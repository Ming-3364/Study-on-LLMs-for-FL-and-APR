[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "getAns",
            "method_body": "static long getAns(int curr, int prev, int found_or_not)\n    {\n        if(curr==a.length)\n        {\n            if(found_or_not==0)\n            return Long.MAX_VALUE;\n            else\n            return 0;\n        }\n        else if(dp[curr][prev][found_or_not]!=-1)\n        return dp[curr][prev][found_or_not];\n        else\n        {\n            long currans=0;\n            if(found_or_not==1)\n            {\n                if(a[curr]==prev)\n                currans=b[curr]+getAns(curr+1,(a[curr]+1)%2,1);\n                else\n                currans=getAns(curr+1,a[curr],1);\n            }\n            else\n            {\n                long change=b[curr]+getAns(curr+1,(a[curr]+1)%2,a[curr]==prev?0:1);\n                long notchange=getAns(curr+1,a[curr],a[curr]==prev?1:0);\n                currans=Math.min(change,notchange);\n            }\n            return dp[curr][prev][found_or_not]=currans;\n        }\n    }",
            "start_line": 43,
            "end_line": 72
        },
        "buggy_method_src": "static long getAns(int curr, int prev, int found_or_not)\n    {\n        if(curr==a.length)\n        {\n            if(found_or_not==0)\n            return Long.MAX_VALUE;\n            else\n            return 0;\n        }\n        else if(dp[curr][prev][found_or_not]!=-1)\n        return dp[curr][prev][found_or_not];\n        else\n        {\n            long currans=0;\n            if(found_or_not==1)\n            {\n                if(a[curr]==prev)\n                currans=b[curr]+getAns(curr+1,(a[curr]+1)%2,1);\n                else\n                currans=getAns(curr+1,a[curr],1);\n            }\n            else\n            {\n                long change=b[curr]+getAns(curr+1,(a[curr]+1)%2,a[curr]==prev?0:1);\n                long notchange=getAns(curr+1,a[curr],a[curr]==prev?1:0);\n                currans=Math.min(change,notchange);\n            }\n            return dp[curr][prev][found_or_not]=currans;\n        }\n    }",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            6
        ],
        "buggy_statements": [
            "            return Long.MAX_VALUE;"
        ],
        "buggy_method_src_endswith_buggy_statement": "static long getAns(int curr, int prev, int found_or_not)\n    {\n        if(curr==a.length)\n        {\n            if(found_or_not==0)\n            return Long.MAX_VALUE;"
    }
]