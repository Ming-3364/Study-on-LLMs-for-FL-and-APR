
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': "public static void main(String[] args) throws IOException {\n        st = new StringTokenizer(reader.readLine());\n        int N = Integer.parseInt(st.nextToken());\n        long A = Long.parseLong(st.nextToken());\n        long B = Long.parseLong(st.nextToken());\n        st = new StringTokenizer(reader.readLine());\n        String S = st.nextToken();\n        int open = 0;\n        int sum = 0;\n        int minSum = 0;\n        for (char c : S.toCharArray()) {\n            if (c == '(') {\n                open++;\n                sum++;\n            } else {\n                sum--;\n            }\n            minSum = Math.min(minSum, sum);\n        }\n        if (open >= N) {\n            writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));\n        } else {\n            writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((open - N - minSum + 1) / 2)));\n        }\n        writer.newLine();\n        writer.flush();\n    }", 'start_line': 9, 'end_line': 35}
================== buggy_method_src ==================
public static void main(String[] args) throws IOException {
        st = new StringTokenizer(reader.readLine());
        int N = Integer.parseInt(st.nextToken());
        long A = Long.parseLong(st.nextToken());
        long B = Long.parseLong(st.nextToken());
        st = new StringTokenizer(reader.readLine());
        String S = st.nextToken();
        int open = 0;
        int sum = 0;
        int minSum = 0;
        for (char c : S.toCharArray()) {
            if (c == '(') {
                open++;
                sum++;
            } else {
                sum--;
            }
            minSum = Math.min(minSum, sum);
        }
        if (open >= N) {
            writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));
        } else {
            writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((open - N - minSum + 1) / 2)));
        }
        writer.newLine();
        writer.flush();
    }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[23]
================== buggy_statements ==================
['            writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((open - N - minSum + 1) / 2)));']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] args) throws IOException {
        st = new StringTokenizer(reader.readLine());
        int N = Integer.parseInt(st.nextToken());
        long A = Long.parseLong(st.nextToken());
        long B = Long.parseLong(st.nextToken());
        st = new StringTokenizer(reader.readLine());
        String S = st.nextToken();
        int open = 0;
        int sum = 0;
        int minSum = 0;
        for (char c : S.toCharArray()) {
            if (c == '(') {
                open++;
                sum++;
            } else {
                sum--;
            }
            minSum = Math.min(minSum, sum);
        }
        if (open >= N) {
            writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));
        } else {
            writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((open - N - minSum + 1) / 2)));