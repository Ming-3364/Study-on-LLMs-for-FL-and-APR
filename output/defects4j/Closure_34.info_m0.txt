
================== buggy_file ==================
src/com/google/javascript/jscomp/CodeGenerator.java
================== buggy_method ==================
{'method_name': 'add', 'method_body': 'void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          "Bad binary operator \\"%s\\": expected 2 arguments but got %s",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it\'s\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add("try");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn\'t a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add("finally");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add("catch(");\n        add(first);\n        add(")");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add("throw");\n        add(first);\n\n        // Must have a \';\' after a throw statement, otherwise safari can\'t\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add("return");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add("var ");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp("=", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add("[");\n        addArrayList(first);\n        add("]");\n        break;\n\n      case Token.PARAM_LIST:\n        add("(");\n        addList(first);\n        add(")");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, ",", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It\'s important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses "- -2" as "2".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp("?", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(":", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error("Expected children to be strings");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error("Unexpected Node subclass.");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add("(");\n        }\n\n        add("function");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(")");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add("get ");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add("set ");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error("Unexpected Node subclass.");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn\'t include \';\' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add("for(");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(";");\n          add(first.getNext());\n          add(";");\n          add(first.getNext().getNext());\n          add(")");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add("for(");\n          add(first);\n          add("in");\n          add(first.getNext());\n          add(")");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add("do");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add("while(");\n        add(last);\n        add(")");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add("while(");\n        add(first);\n        add(")");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            "Bad GETPROP: expected 2 children, but got %s", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            "Bad GETPROP: RHS should be STRING");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add("(");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(")");\n        }\n        add(".");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            "Bad GETELEM: expected 2 children but got %s", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add("[");\n        add(first.getNext());\n        add("]");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add("with(");\n        add(first);\n        add(")");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? "++" : "--";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add("(0,");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(")");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add("(");\n        addList(first.getNext());\n        add(")");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add("if(");\n        add(first);\n        add(")");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add("else");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        add("null");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add("this");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        add("false");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add("true");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add("continue");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error("Unexpected token type. Should be LABEL_NAME.");\n          }\n          add(" ");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add("debugger");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add("break");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error("Unexpected token type. Should be LABEL_NAME.");\n          }\n          add(" ");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add("new ");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don\'t traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // \'()\' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add("(");\n          addList(next);\n          add(")");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0)) {\n          throw new IllegalStateException(\n              "Unexpected String children: " + n.getParent().toStringTree());\n        }\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add("delete ");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add("(");\n        }\n        add("{");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isString());\n            String key = c.getString();\n            // Object literal property names don\'t have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(":");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add("}");\n        if (needsParens) {\n          add(")");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add("switch(");\n        add(first);\n        add(")");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add("case ");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add("default");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error("Unexpected token type. Should be LABEL_NAME.");\n        }\n        add(first);\n        add(":");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error("Unknown type " + type + "\\n" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }', 'start_line': 85, 'end_line': 732, 'buggy_lines': [122, 123, 124]}
================== buggy_method_src ==================
void add(Node n, Context context) {
    if (!cc.continueProcessing()) {
      return;
    }

    int type = n.getType();
    String opstr = NodeUtil.opToStr(type);
    int childCount = n.getChildCount();
    Node first = n.getFirstChild();
    Node last = n.getLastChild();

    // Handle all binary operators
    if (opstr != null && first != last) {
      Preconditions.checkState(
          childCount == 2,
          "Bad binary operator \"%s\": expected 2 arguments but got %s",
          opstr, childCount);
      int p = NodeUtil.precedence(type);

      // For right-hand-side of operations, only pass context if it's
      // the IN_FOR_INIT_CLAUSE one.
      Context rhsContext = getContextForNoInOperator(context);

      // Handle associativity.
      // e.g. if the parse tree is a * (b * c),
      // we can simply generate a * b * c.
      if (last.getType() == type &&
          NodeUtil.isAssociative(type)) {
        addExpr(first, p, context);
        cc.addOp(opstr, true);
        addExpr(last, p, rhsContext);
      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
        // Assignments are the only right-associative binary operators
        addExpr(first, p, context);
        cc.addOp(opstr, true);
        addExpr(last, p, rhsContext);
      } else {
        addExpr(first, p, context);
        cc.addOp(opstr, true);
        addExpr(last, p + 1, rhsContext);
      }
      return;
    }

    cc.startSourceMapping(n);

    switch (type) {
      case Token.TRY: {
        Preconditions.checkState(first.getNext().isBlock() &&
                !first.getNext().hasMoreThanOneChild());
        Preconditions.checkState(childCount >= 2 && childCount <= 3);

        add("try");
        add(first, Context.PRESERVE_BLOCK);

        // second child contains the catch block, or nothing if there
        // isn't a catch block
        Node catchblock = first.getNext().getFirstChild();
        if (catchblock != null) {
          add(catchblock);
        }

        if (childCount == 3) {
          add("finally");
          add(last, Context.PRESERVE_BLOCK);
        }
        break;
      }

      case Token.CATCH:
        Preconditions.checkState(childCount == 2);
        add("catch(");
        add(first);
        add(")");
        add(last, Context.PRESERVE_BLOCK);
        break;

      case Token.THROW:
        Preconditions.checkState(childCount == 1);
        add("throw");
        add(first);

        // Must have a ';' after a throw statement, otherwise safari can't
        // parse this.
        cc.endStatement(true);
        break;

      case Token.RETURN:
        add("return");
        if (childCount == 1) {
          add(first);
        } else {
          Preconditions.checkState(childCount == 0);
        }
        cc.endStatement();
        break;

      case Token.VAR:
        if (first != null) {
          add("var ");
          addList(first, false, getContextForNoInOperator(context));
        }
        break;

      case Token.LABEL_NAME:
        Preconditions.checkState(!n.getString().isEmpty());
        addIdentifier(n.getString());
        break;

      case Token.NAME:
        if (first == null || first.isEmpty()) {
          addIdentifier(n.getString());
        } else {
          Preconditions.checkState(childCount == 1);
          addIdentifier(n.getString());
          cc.addOp("=", true);
          if (first.isComma()) {
            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);
          } else {
            // Add expression, consider nearby code at lowest level of
            // precedence.
            addExpr(first, 0, getContextForNoInOperator(context));
          }
        }
        break;

      case Token.ARRAYLIT:
        add("[");
        addArrayList(first);
        add("]");
        break;

      case Token.PARAM_LIST:
        add("(");
        addList(first);
        add(")");
        break;

      case Token.COMMA:
        Preconditions.checkState(childCount == 2);
        unrollBinaryOperator(n, Token.COMMA, ",", context, Context.OTHER, 0, 0);
        break;

      case Token.NUMBER:
        Preconditions.checkState(childCount == 0);
        cc.addNumber(n.getDouble());
        break;

      case Token.TYPEOF:
      case Token.VOID:
      case Token.NOT:
      case Token.BITNOT:
      case Token.POS: {
        // All of these unary operators are right-associative
        Preconditions.checkState(childCount == 1);
        cc.addOp(NodeUtil.opToStrNoFail(type), false);
        addExpr(first, NodeUtil.precedence(type), Context.OTHER);
        break;
      }

      case Token.NEG: {
        Preconditions.checkState(childCount == 1);

        // It's important to our sanity checker that the code
        // we print produces the same AST as the code we parse back.
        // NEG is a weird case because Rhino parses "- -2" as "2".
        if (n.getFirstChild().isNumber()) {
          cc.addNumber(-n.getFirstChild().getDouble());
        } else {
          cc.addOp(NodeUtil.opToStrNoFail(type), false);
          addExpr(first, NodeUtil.precedence(type), Context.OTHER);
        }

        break;
      }

      case Token.HOOK: {
        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
        addExpr(first, p + 1, context);
        cc.addOp("?", true);
        addExpr(first.getNext(), 1, Context.OTHER);
        cc.addOp(":", true);
        addExpr(last, 1, Context.OTHER);
        break;
      }

      case Token.REGEXP:
        if (!first.isString() ||
            !last.isString()) {
          throw new Error("Expected children to be strings");
        }

        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);

        // I only use one .add because whitespace matters
        if (childCount == 2) {
          add(regexp + last.getString());
        } else {
          Preconditions.checkState(childCount == 1);
          add(regexp);
        }
        break;

      case Token.FUNCTION:
        if (n.getClass() != Node.class) {
          throw new Error("Unexpected Node subclass.");
        }
        Preconditions.checkState(childCount == 3);
        boolean funcNeedsParens = (context == Context.START_OF_EXPR);
        if (funcNeedsParens) {
          add("(");
        }

        add("function");
        add(first);

        add(first.getNext());
        add(last, Context.PRESERVE_BLOCK);
        cc.endFunction(context == Context.STATEMENT);

        if (funcNeedsParens) {
          add(")");
        }
        break;

      case Token.GETTER_DEF:
      case Token.SETTER_DEF:
        Preconditions.checkState(n.getParent().isObjectLit());
        Preconditions.checkState(childCount == 1);
        Preconditions.checkState(first.isFunction());

        // Get methods are unnamed
        Preconditions.checkState(first.getFirstChild().getString().isEmpty());
        if (type == Token.GETTER_DEF) {
          // Get methods have no parameters.
          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
          add("get ");
        } else {
          // Set methods have one parameter.
          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
          add("set ");
        }

        // The name is on the GET or SET node.
        String name = n.getString();
        Node fn = first;
        Node parameters = fn.getChildAtIndex(1);
        Node body = fn.getLastChild();

        // Add the property name.
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&
            // do not encode literally any non-literal characters that were
            // unicode escaped.
            NodeUtil.isLatin(name)) {
          add(name);
        } else {
          // Determine if the string is a simple number.
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            addJsString(n);
          }
        }

        add(parameters);
        add(body, Context.PRESERVE_BLOCK);
        break;

      case Token.SCRIPT:
      case Token.BLOCK: {
        if (n.getClass() != Node.class) {
          throw new Error("Unexpected Node subclass.");
        }
        boolean preserveBlock = context == Context.PRESERVE_BLOCK;
        if (preserveBlock) {
          cc.beginBlock();
        }

        boolean preferLineBreaks =
            type == Token.SCRIPT ||
            (type == Token.BLOCK &&
                !preserveBlock &&
                n.getParent() != null &&
                n.getParent().isScript());
        for (Node c = first; c != null; c = c.getNext()) {
          add(c, Context.STATEMENT);

          // VAR doesn't include ';' since it gets used in expressions
          if (c.isVar()) {
            cc.endStatement();
          }

          if (c.isFunction()) {
            cc.maybeLineBreak();
          }

          // Prefer to break lines in between top-level statements
          // because top level statements are more homogeneous.
          if (preferLineBreaks) {
            cc.notePreferredLineBreak();
          }
        }
        if (preserveBlock) {
          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));
        }
        break;
      }

      case Token.FOR:
        if (childCount == 4) {
          add("for(");
          if (first.isVar()) {
            add(first, Context.IN_FOR_INIT_CLAUSE);
          } else {
            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);
          }
          add(";");
          add(first.getNext());
          add(";");
          add(first.getNext().getNext());
          add(")");
          addNonEmptyStatement(
              last, getContextForNonEmptyExpression(context), false);
        } else {
          Preconditions.checkState(childCount == 3);
          add("for(");
          add(first);
          add("in");
          add(first.getNext());
          add(")");
          addNonEmptyStatement(
              last, getContextForNonEmptyExpression(context), false);
        }
        break;

      case Token.DO:
        Preconditions.checkState(childCount == 2);
        add("do");
        addNonEmptyStatement(first, Context.OTHER, false);
        add("while(");
        add(last);
        add(")");
        cc.endStatement();
        break;

      case Token.WHILE:
        Preconditions.checkState(childCount == 2);
        add("while(");
        add(first);
        add(")");
        addNonEmptyStatement(
            last, getContextForNonEmptyExpression(context), false);
        break;

      case Token.EMPTY:
        Preconditions.checkState(childCount == 0);
        break;

      case Token.GETPROP: {
        Preconditions.checkState(
            childCount == 2,
            "Bad GETPROP: expected 2 children, but got %s", childCount);
        Preconditions.checkState(
            last.isString(),
            "Bad GETPROP: RHS should be STRING");
        boolean needsParens = (first.isNumber());
        if (needsParens) {
          add("(");
        }
        addExpr(first, NodeUtil.precedence(type), context);
        if (needsParens) {
          add(")");
        }
        add(".");
        addIdentifier(last.getString());
        break;
      }

      case Token.GETELEM:
        Preconditions.checkState(
            childCount == 2,
            "Bad GETELEM: expected 2 children but got %s", childCount);
        addExpr(first, NodeUtil.precedence(type), context);
        add("[");
        add(first.getNext());
        add("]");
        break;

      case Token.WITH:
        Preconditions.checkState(childCount == 2);
        add("with(");
        add(first);
        add(")");
        addNonEmptyStatement(
            last, getContextForNonEmptyExpression(context), false);
        break;

      case Token.INC:
      case Token.DEC: {
        Preconditions.checkState(childCount == 1);
        String o = type == Token.INC ? "++" : "--";
        int postProp = n.getIntProp(Node.INCRDECR_PROP);
        // A non-zero post-prop value indicates a post inc/dec, default of zero
        // is a pre-inc/dec.
        if (postProp != 0) {
          addExpr(first, NodeUtil.precedence(type), context);
          cc.addOp(o, false);
        } else {
          cc.addOp(o, false);
          add(first);
        }
        break;
      }

      case Token.CALL:
        // We have two special cases here:
        // 1) If the left hand side of the call is a direct reference to eval,
        // then it must have a DIRECT_EVAL annotation. If it does not, then
        // that means it was originally an indirect call to eval, and that
        // indirectness must be preserved.
        // 2) If the left hand side of the call is a property reference,
        // then the call must not a FREE_CALL annotation. If it does, then
        // that means it was originally an call without an explicit this and
        // that must be preserved.
        if (isIndirectEval(first)
            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {
          add("(0,");
          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);
          add(")");
        } else {
          addExpr(first, NodeUtil.precedence(type), context);
        }
        add("(");
        addList(first.getNext());
        add(")");
        break;

      case Token.IF:
        boolean hasElse = childCount == 3;
        boolean ambiguousElseClause =
            context == Context.BEFORE_DANGLING_ELSE && !hasElse;
        if (ambiguousElseClause) {
          cc.beginBlock();
        }

        add("if(");
        add(first);
        add(")");

        if (hasElse) {
          addNonEmptyStatement(
              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);
          add("else");
          addNonEmptyStatement(
              last, getContextForNonEmptyExpression(context), false);
        } else {
          addNonEmptyStatement(first.getNext(), Context.OTHER, false);
          Preconditions.checkState(childCount == 2);
        }

        if (ambiguousElseClause) {
          cc.endBlock();
        }
        break;

      case Token.NULL:
        Preconditions.checkState(childCount == 0);
        add("null");
        break;

      case Token.THIS:
        Preconditions.checkState(childCount == 0);
        add("this");
        break;

      case Token.FALSE:
        Preconditions.checkState(childCount == 0);
        add("false");
        break;

      case Token.TRUE:
        Preconditions.checkState(childCount == 0);
        add("true");
        break;

      case Token.CONTINUE:
        Preconditions.checkState(childCount <= 1);
        add("continue");
        if (childCount == 1) {
          if (!first.isLabelName()) {
            throw new Error("Unexpected token type. Should be LABEL_NAME.");
          }
          add(" ");
          add(first);
        }
        cc.endStatement();
        break;

      case Token.DEBUGGER:
        Preconditions.checkState(childCount == 0);
        add("debugger");
        cc.endStatement();
        break;

      case Token.BREAK:
        Preconditions.checkState(childCount <= 1);
        add("break");
        if (childCount == 1) {
          if (!first.isLabelName()) {
            throw new Error("Unexpected token type. Should be LABEL_NAME.");
          }
          add(" ");
          add(first);
        }
        cc.endStatement();
        break;

      case Token.EXPR_RESULT:
        Preconditions.checkState(childCount == 1);
        add(first, Context.START_OF_EXPR);
        cc.endStatement();
        break;

      case Token.NEW:
        add("new ");
        int precedence = NodeUtil.precedence(type);

        // If the first child contains a CALL, then claim higher precedence
        // to force parentheses. Otherwise, when parsed, NEW will bind to the
        // first viable parentheses (don't traverse into functions).
        if (NodeUtil.containsType(
            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {
          precedence = NodeUtil.precedence(first.getType()) + 1;
        }
        addExpr(first, precedence, Context.OTHER);

        // '()' is optional when no arguments are present
        Node next = first.getNext();
        if (next != null) {
          add("(");
          addList(next);
          add(")");
        }
        break;

      case Token.STRING:
        if (childCount !=
            ((n.getParent() != null &&
              n.getParent().isObjectLit()) ? 1 : 0)) {
          throw new IllegalStateException(
              "Unexpected String children: " + n.getParent().toStringTree());
        }
        addJsString(n);
        break;

      case Token.DELPROP:
        Preconditions.checkState(childCount == 1);
        add("delete ");
        add(first);
        break;

      case Token.OBJECTLIT: {
        boolean needsParens = (context == Context.START_OF_EXPR);
        if (needsParens) {
          add("(");
        }
        add("{");
        for (Node c = first; c != null; c = c.getNext()) {
          if (c != first) {
            cc.listSeparator();
          }

          if (c.isGetterDef() || c.isSetterDef()) {
            add(c);
          } else {
            Preconditions.checkState(c.isString());
            String key = c.getString();
            // Object literal property names don't have to be quoted if they
            // are not JavaScript keywords
            if (!c.isQuotedString() &&
                !TokenStream.isKeyword(key) &&
                TokenStream.isJSIdentifier(key) &&
                // do not encode literally any non-literal characters that
                // were unicode escaped.
                NodeUtil.isLatin(key)) {
              add(key);
            } else {
              // Determine if the string is a simple number.
              double d = getSimpleNumber(key);
              if (!Double.isNaN(d)) {
                cc.addNumber(d);
              } else {
                addExpr(c, 1, Context.OTHER);
              }
            }
            add(":");
            addExpr(c.getFirstChild(), 1, Context.OTHER);
          }
        }
        add("}");
        if (needsParens) {
          add(")");
        }
        break;
      }

      case Token.SWITCH:
        add("switch(");
        add(first);
        add(")");
        cc.beginBlock();
        addAllSiblings(first.getNext());
        cc.endBlock(context == Context.STATEMENT);
        break;

      case Token.CASE:
        Preconditions.checkState(childCount == 2);
        add("case ");
        add(first);
        addCaseBody(last);
        break;

      case Token.DEFAULT_CASE:
        Preconditions.checkState(childCount == 1);
        add("default");
        addCaseBody(first);
        break;

      case Token.LABEL:
        Preconditions.checkState(childCount == 2);
        if (!first.isLabelName()) {
          throw new Error("Unexpected token type. Should be LABEL_NAME.");
        }
        add(first);
        add(":");
        addNonEmptyStatement(
            last, getContextForNonEmptyExpression(context), true);
        break;

      default:
        throw new Error("Unknown type " + type + "\n" + n.toStringTree());
    }

    cc.endSourceMapping(n);
  }
================== test_stack ==================
com.google.javascript.jscomp.CodePrinterTest::testManyAdds
java.lang.StackOverflowError
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:102)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)
	at com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)
	at com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)

================== test_assert ==================
public void testManyAdds() {
    int numAdds = 10000;
    List<String> numbers = Lists.newArrayList("0", "1");
    Node current = new Node(Token.ADD, Node.newNumber(0), Node.newNumber(1));
    for (int i = 2; i < numAdds; i++) {
      current = new Node(Token.ADD, current);

      // 1000 is printed as 1E3, and screws up our test.
      int num = i % 1000;
      numbers.add(String.valueOf(num));
      current.addChildToBack(Node.newNumber(num));
    }

    String expected = Joiner.on("+").join(numbers);
    String actual = printNode(current).replace("\n", "");
    assertEquals(expected, actual);
  }
================== buggy_lines_in_method ==================
[38, 39, 40]
================== buggy_statements ==================
['        addExpr(first, p, context);', '        cc.addOp(opstr, true);', '        addExpr(last, p + 1, rhsContext);']
================== buggy_method_src_endswith_buggy_statement ==================
void add(Node n, Context context) {
    if (!cc.continueProcessing()) {
      return;
    }

    int type = n.getType();
    String opstr = NodeUtil.opToStr(type);
    int childCount = n.getChildCount();
    Node first = n.getFirstChild();
    Node last = n.getLastChild();

    // Handle all binary operators
    if (opstr != null && first != last) {
      Preconditions.checkState(
          childCount == 2,
          "Bad binary operator \"%s\": expected 2 arguments but got %s",
          opstr, childCount);
      int p = NodeUtil.precedence(type);

      // For right-hand-side of operations, only pass context if it's
      // the IN_FOR_INIT_CLAUSE one.
      Context rhsContext = getContextForNoInOperator(context);

      // Handle associativity.
      // e.g. if the parse tree is a * (b * c),
      // we can simply generate a * b * c.
      if (last.getType() == type &&
          NodeUtil.isAssociative(type)) {
        addExpr(first, p, context);
        cc.addOp(opstr, true);
        addExpr(last, p, rhsContext);
      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
        // Assignments are the only right-associative binary operators
        addExpr(first, p, context);
        cc.addOp(opstr, true);
        addExpr(last, p, rhsContext);
      } else {
        addExpr(first, p, context);
        cc.addOp(opstr, true);
        addExpr(last, p + 1, rhsContext);