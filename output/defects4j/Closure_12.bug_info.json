[
    {
        "buggy_file": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "buggy_method": {
            "method_name": "computeMayUse",
            "method_body": "private void computeMayUse(\n      Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n    switch (n.getType()) {\n\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.NAME:\n        addToUseIfLocal(n.getString(), cfgNode, output);\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeMayUse(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeMayUse(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (lhs.isVar()) {\n            lhs = lhs.getLastChild(); // for(var x in y) {...}\n          }\n          if (lhs.isName() && !conditional) {\n            removeFromUseIfLocal(lhs.getString(), output);\n          }\n          computeMayUse(rhs, cfgNode, output, conditional);\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeMayUse(n.getLastChild(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n        return;\n\n      case Token.HOOK:\n        computeMayUse(n.getLastChild(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n        return;\n\n      case Token.VAR:\n        Node varName = n.getFirstChild();\n        Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n\n        if (varName.hasChildren()) {\n          computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n          if (!conditional) {\n            removeFromUseIfLocal(varName.getString(), output);\n          }\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) {\n          Node name = n.getFirstChild();\n          if (!conditional) {\n            removeFromUseIfLocal(name.getString(), output);\n          }\n\n          // In case of a += \"Hello\". There is a read of a.\n          if (!n.isAssign()) {\n            addToUseIfLocal(name.getString(), cfgNode, output);\n          }\n\n          computeMayUse(name.getNext(), cfgNode, output, conditional);\n        } else {\n          /*\n           * We want to traverse in reverse order because we want the LAST\n           * definition in the sub-tree....\n           * But we have no better way to traverse in reverse other :'(\n           */\n          for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {\n            computeMayUse(c, cfgNode, output, conditional);\n          }\n        }\n    }\n  }",
            "start_line": 163,
            "end_line": 248,
            "buggy_lines": [
                165
            ]
        },
        "buggy_method_src": "private void computeMayUse(\n      Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n    switch (n.getType()) {\n\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.NAME:\n        addToUseIfLocal(n.getString(), cfgNode, output);\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeMayUse(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeMayUse(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (lhs.isVar()) {\n            lhs = lhs.getLastChild(); // for(var x in y) {...}\n          }\n          if (lhs.isName() && !conditional) {\n            removeFromUseIfLocal(lhs.getString(), output);\n          }\n          computeMayUse(rhs, cfgNode, output, conditional);\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeMayUse(n.getLastChild(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n        return;\n\n      case Token.HOOK:\n        computeMayUse(n.getLastChild(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n        return;\n\n      case Token.VAR:\n        Node varName = n.getFirstChild();\n        Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n\n        if (varName.hasChildren()) {\n          computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n          if (!conditional) {\n            removeFromUseIfLocal(varName.getString(), output);\n          }\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) {\n          Node name = n.getFirstChild();\n          if (!conditional) {\n            removeFromUseIfLocal(name.getString(), output);\n          }\n\n          // In case of a += \"Hello\". There is a read of a.\n          if (!n.isAssign()) {\n            addToUseIfLocal(name.getString(), cfgNode, output);\n          }\n\n          computeMayUse(name.getNext(), cfgNode, output, conditional);\n        } else {\n          /*\n           * We want to traverse in reverse order because we want the LAST\n           * definition in the sub-tree....\n           * But we have no better way to traverse in reverse other :'(\n           */\n          for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {\n            computeMayUse(c, cfgNode, output, conditional);\n          }\n        }\n    }\n  }",
        "test_stack": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testIssue794b\njunit.framework.AssertionFailedError:\nExpected: function _func(){var x=1;try{x=x+someFunction()}catch(e){}x=x+1;try{x=x+someFunction()}catch(e$$1){}return x}\nResult: function _func(){var x;try{x=1+someFunction()}catch(e){}try{x=x+1+someFunction()}catch(e$$1){}return x}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _func 1 [source_file: expected0]\n            NAME _func 1 [source_file: expected0]\n            PARAM_LIST 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME x 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                TRY 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME x 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    NAME x 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME someFunction 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        CATCH 1 [source_file: expected0]\n                            NAME e 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    ASSIGN 1 [source_file: expected0]\n                        NAME x 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NAME x 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                TRY 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME x 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    NAME x 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME someFunction 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        CATCH 1 [source_file: expected0]\n                            NAME e$$1 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                RETURN 1 [source_file: expected0]\n                    NAME x 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _func 1 [source_file: testcode]\n            NAME _func 1 [source_file: testcode]\n            PARAM_LIST 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME x 1 [source_file: testcode]\n                TRY 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME x 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME someFunction 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        CATCH 1 [source_file: testcode]\n                            NAME e 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                TRY 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME x 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        NAME x 1 [source_file: testcode]\n                                        NUMBER 1.0 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME someFunction 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        CATCH 1 [source_file: testcode]\n                            NAME e$$1 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                RETURN 1 [source_file: testcode]\n                    NAME x 1 [source_file: testcode]\n\n\nSubtree1: BLOCK 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME x 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n    TRY 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NAME x 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME someFunction 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            CATCH 1 [source_file: expected0]\n                NAME e 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            NAME x 1 [source_file: expected0]\n            ADD 1 [source_file: expected0]\n                NAME x 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n    TRY 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NAME x 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME someFunction 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            CATCH 1 [source_file: expected0]\n                NAME e$$1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n    RETURN 1 [source_file: expected0]\n        NAME x 1 [source_file: expected0]\n\n\nSubtree2: BLOCK 1 [source_file: testcode]\n    VAR 1 [source_file: testcode]\n        NAME x 1 [source_file: testcode]\n    TRY 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME someFunction 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            CATCH 1 [source_file: testcode]\n                NAME e 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n    TRY 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NAME x 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME someFunction 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            CATCH 1 [source_file: testcode]\n                NAME e$$1 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n    RETURN 1 [source_file: testcode]\n        NAME x 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:409)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:387)\n\tat com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.inline(FlowSensitiveInlineVariablesTest.java:526)\n\tat com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.noInline(FlowSensitiveInlineVariablesTest.java:522)\n\tat com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest.testIssue794b(FlowSensitiveInlineVariablesTest.java:513)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n",
        "test_assert": "noInline(\n",
        "buggy_lines_in_method": [
            3
        ],
        "buggy_statements": [
            "    switch (n.getType()) {"
        ],
        "buggy_method_src_endswith_buggy_statement": "private void computeMayUse(\n      Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n    switch (n.getType()) {"
    }
]