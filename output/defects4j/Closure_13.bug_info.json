[
    {
        "buggy_file": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "buggy_method": {
            "method_name": "traverse",
            "method_body": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
            "start_line": 113,
            "end_line": 138,
            "buggy_lines": [
                127
            ]
        },
        "buggy_method_src": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
        "test_stack": "com.google.javascript.jscomp.IntegrationTest::testIssue787\njunit.framework.AssertionFailedError:\nExpected: function some_function(){var a,b;any_expression&&(b=external_ref,a=function(){return b()});return{method1:function(){a&&a();return!0},method2:function(){return!1}}}\nResult: function some_function(){var a,b;any_expression&&(b=external_ref,a=function(){return b()});return{method1:function(){a&&a();return true},method2:function(){return false}}}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: input0] [input_id: InputId: input0]\n        FUNCTION some_function 1 [source_file: input0]\n            NAME some_function 1 [source_file: input0]\n            PARAM_LIST 1 [source_file: input0]\n            BLOCK 1 [source_file: input0]\n                VAR 2 [source_file: input0]\n                    NAME a 2 [source_file: input0]\n                    NAME b 2 [source_file: input0]\n                EXPR_RESULT 3 [source_file: input0]\n                    AND 3 [source_file: input0]\n                        NAME any_expression 3 [source_file: input0]\n                        COMMA 3 [parenthesized: true] [source_file: input0]\n                            ASSIGN 3 [source_file: input0]\n                                NAME b 3 [source_file: input0]\n                                NAME external_ref 3 [source_file: input0]\n                            ASSIGN 3 [source_file: input0]\n                                NAME a 3 [source_file: input0]\n                                FUNCTION  3 [source_file: input0]\n                                    NAME  3 [source_file: input0]\n                                    PARAM_LIST 3 [source_file: input0]\n                                    BLOCK 3 [source_file: input0]\n                                        RETURN 4 [source_file: input0]\n                                            CALL 4 [free_call: 1] [source_file: input0]\n                                                NAME b 4 [source_file: input0]\n                RETURN 6 [source_file: input0]\n                    OBJECTLIT 6 [source_file: input0]\n                        STRING_KEY method1 6 [source_file: input0]\n                            FUNCTION  6 [source_file: input0]\n                                NAME  6 [source_file: input0]\n                                PARAM_LIST 6 [source_file: input0]\n                                BLOCK 6 [source_file: input0]\n                                    EXPR_RESULT 7 [source_file: input0]\n                                        AND 7 [source_file: input0]\n                                            NAME a 7 [source_file: input0]\n                                            CALL 7 [free_call: 1] [source_file: input0]\n                                                NAME a 7 [source_file: input0]\n                                    RETURN 8 [source_file: input0]\n                                        NOT 8 [source_file: input0]\n                                            NUMBER 0.0 8 [source_file: input0]\n                        STRING_KEY method2 9 [source_file: input0]\n                            FUNCTION  9 [source_file: input0]\n                                NAME  9 [source_file: input0]\n                                PARAM_LIST 9 [source_file: input0]\n                                BLOCK 9 [source_file: input0]\n                                    RETURN 10 [source_file: input0]\n                                        NOT 10 [source_file: input0]\n                                            NUMBER 1.0 10 [source_file: input0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: i0] [input_id: InputId: i0]\n        FUNCTION some_function 1 [source_file: i0]\n            NAME some_function 1 [source_file: i0]\n            PARAM_LIST 1 [source_file: i0]\n            BLOCK 1 [source_file: i0]\n                VAR 2 [source_file: i0]\n                    NAME a 2 [source_file: i0]\n                    NAME b 3 [source_file: i0]\n                EXPR_RESULT 5 [source_file: i0]\n                    AND 5 [source_file: i0]\n                        NAME any_expression 5 [source_file: i0]\n                        COMMA 7 [source_file: i0]\n                            ASSIGN 6 [source_file: i0]\n                                NAME b 6 [source_file: i0]\n                                NAME external_ref 6 [source_file: i0]\n                            ASSIGN 7 [source_file: i0]\n                                NAME a 7 [source_file: i0]\n                                FUNCTION  7 [source_file: i0]\n                                    NAME  7 [source_file: i0]\n                                    PARAM_LIST 7 [source_file: i0]\n                                    BLOCK 7 [source_file: i0]\n                                        RETURN 8 [source_file: i0]\n                                            CALL 8 [free_call: 1] [source_file: i0]\n                                                NAME b 8 [source_file: i0]\n                RETURN 12 [source_file: i0]\n                    OBJECTLIT 12 [source_file: i0]\n                        STRING_KEY method1 13 [source_file: i0]\n                            FUNCTION  13 [source_file: i0]\n                                NAME  13 [source_file: i0]\n                                PARAM_LIST 13 [source_file: i0]\n                                BLOCK 13 [source_file: i0]\n                                    EXPR_RESULT 14 [source_file: i0]\n                                        AND 14 [source_file: i0]\n                                            NAME a 14 [source_file: i0]\n                                            CALL 14 [free_call: 1] [source_file: i0]\n                                                NAME a 14 [source_file: i0]\n                                    RETURN 15 [source_file: i0]\n                                        TRUE 15 [source_file: i0]\n                        STRING_KEY method2 17 [source_file: i0]\n                            FUNCTION  17 [source_file: i0]\n                                NAME  17 [source_file: i0]\n                                PARAM_LIST 17 [source_file: i0]\n                                BLOCK 17 [source_file: i0]\n                                    RETURN 18 [source_file: i0]\n                                        FALSE 18 [source_file: i0]\n\n\nSubtree1: NOT 8 [source_file: input0]\n    NUMBER 0.0 8 [source_file: input0]\n\n\nSubtree2: TRUE 15 [source_file: i0]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.IntegrationTestCase.test(IntegrationTestCase.java:94)\n\tat com.google.javascript.jscomp.IntegrationTestCase.test(IntegrationTestCase.java:76)\n\tat com.google.javascript.jscomp.IntegrationTest.testIssue787(IntegrationTest.java:2262)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "test(options, code, result);\n",
        "buggy_lines_in_method": [
            15
        ],
        "buggy_statements": [
            "        Node next = c.getNext();"
        ],
        "buggy_method_src_endswith_buggy_statement": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();"
    }
]