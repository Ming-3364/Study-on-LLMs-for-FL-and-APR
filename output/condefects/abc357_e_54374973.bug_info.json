[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "solve",
            "method_body": "static void solve() {\n        int n = vt.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = vt.nextInt() - 1;\n        }\n        int[] dp = new int[n];\n        int[] vis = new int[n];\n        int id = 0;\n        for (int i = 0; i < n; i++) {\n            if (vis[i] == 0) {\n                HashSet<Integer> set = new HashSet<>();\n                findcycle(i, arr, vis, id, set);\n            }\n        }\n        int ans = 0;\n        int[] newvis = new int[n];\n        for (Integer i : list) {\n            HashSet<Integer> set = new HashSet<>();\n            int len = findcyclelength(i, arr, id, set);\n            for (Integer j : set) {\n                dp[j] = len;\n                newvis[j] = 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (newvis[i] == 0) {\n                dp[i] = dfs(i, arr, dp, newvis);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            ans = ans + dp[i];\n        }\n        out.println(ans);\n    }",
            "start_line": 66,
            "end_line": 100
        },
        "buggy_method_src": "static void solve() {\n        int n = vt.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = vt.nextInt() - 1;\n        }\n        int[] dp = new int[n];\n        int[] vis = new int[n];\n        int id = 0;\n        for (int i = 0; i < n; i++) {\n            if (vis[i] == 0) {\n                HashSet<Integer> set = new HashSet<>();\n                findcycle(i, arr, vis, id, set);\n            }\n        }\n        int ans = 0;\n        int[] newvis = new int[n];\n        for (Integer i : list) {\n            HashSet<Integer> set = new HashSet<>();\n            int len = findcyclelength(i, arr, id, set);\n            for (Integer j : set) {\n                dp[j] = len;\n                newvis[j] = 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (newvis[i] == 0) {\n                dp[i] = dfs(i, arr, dp, newvis);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            ans = ans + dp[i];\n        }\n        out.println(ans);\n    }",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            16
        ],
        "buggy_statements": [
            "        int ans = 0;"
        ],
        "buggy_method_src_endswith_buggy_statement": "static void solve() {\n        int n = vt.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = vt.nextInt() - 1;\n        }\n        int[] dp = new int[n];\n        int[] vis = new int[n];\n        int id = 0;\n        for (int i = 0; i < n; i++) {\n            if (vis[i] == 0) {\n                HashSet<Integer> set = new HashSet<>();\n                findcycle(i, arr, vis, id, set);\n            }\n        }\n        int ans = 0;"
    }
]