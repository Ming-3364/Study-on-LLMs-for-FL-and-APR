[
    {
        "buggy_file": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "buggy_method": {
            "method_name": "recordAssignment",
            "method_body": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // The rhs of the assignment is the caller, so it's used by the\n          // context. Don't associate it w/ the lhs.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
            "start_line": 558,
            "end_line": 588,
            "buggy_lines": [
                578
            ]
        },
        "buggy_method_src": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // The rhs of the assignment is the caller, so it's used by the\n          // context. Don't associate it w/ the lhs.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
        "test_stack": "com.google.javascript.jscomp.NameAnalyzerTest::testAssignWithCall\njunit.framework.AssertionFailedError:\nExpected: var x;(function(){x})()\nResult: (function(){x})()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME x 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            NAME x 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            CALL 1 [free_call: 1] [source_file: testcode]\n                FUNCTION  1 [source_file: testcode]\n                    NAME  1 [source_file: testcode]\n                    PARAM_LIST 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            NAME x 1 [source_file: testcode]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    VAR 1 [source_file: expected0]\n        NAME x 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        NAME x 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n    EXPR_RESULT 1 [source_file: testcode]\n        CALL 1 [free_call: 1] [source_file: testcode]\n            FUNCTION  1 [source_file: testcode]\n                NAME  1 [source_file: testcode]\n                PARAM_LIST 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        NAME x 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:957)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)\n\tat com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithCall(NameAnalyzerTest.java:1236)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "test(\"var fun, x; (fun = function(){ x; })();\",\n",
        "buggy_lines_in_method": [
            21
        ],
        "buggy_statements": [
            "        } else {"
        ],
        "buggy_method_src_endswith_buggy_statement": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {"
    }
]