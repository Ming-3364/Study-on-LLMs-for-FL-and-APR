[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int N = scanner.nextInt();\n        int swapCost = scanner.nextInt();\n        int replaceCost = scanner.nextInt();\n\n        String s = scanner.next();\n\n\n        char[] charArray = s.toCharArray();\n        long balance = getBalance(charArray);\n        long ans = 0;\n\n        if (balance > 0) {\n            for (int i = 0; i < charArray.length; i++) {\n                if (balance > 0 && charArray[i] == ')') {\n                    charArray[i] = '(';\n                    ans += replaceCost;\n                    balance -= 2;\n                }\n            }\n        } else if (balance < 0) {\n            for (int i = charArray.length - 1; i >= 0; i--) {\n                if (balance < 0 && charArray[i] == '(') {\n                    charArray[i] = ')';\n                    ans += replaceCost;\n                    balance += 2;\n                }\n            }\n        }\n\n        Stack<Character> stack = new Stack<>();\n\n        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n            if (c == '(') {\n                stack.add(c);\n            } else {\n                if (!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    stack.add(c);\n                }\n            }\n        }\n\n  \n\n        System.out.println(ans + ((stack.size() + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));\n    }",
            "start_line": 5,
            "end_line": 55
        },
        "buggy_method_src": "public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int N = scanner.nextInt();\n        int swapCost = scanner.nextInt();\n        int replaceCost = scanner.nextInt();\n\n        String s = scanner.next();\n\n\n        char[] charArray = s.toCharArray();\n        long balance = getBalance(charArray);\n        long ans = 0;\n\n        if (balance > 0) {\n            for (int i = 0; i < charArray.length; i++) {\n                if (balance > 0 && charArray[i] == ')') {\n                    charArray[i] = '(';\n                    ans += replaceCost;\n                    balance -= 2;\n                }\n            }\n        } else if (balance < 0) {\n            for (int i = charArray.length - 1; i >= 0; i--) {\n                if (balance < 0 && charArray[i] == '(') {\n                    charArray[i] = ')';\n                    ans += replaceCost;\n                    balance += 2;\n                }\n            }\n        }\n\n        Stack<Character> stack = new Stack<>();\n\n        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n            if (c == '(') {\n                stack.add(c);\n            } else {\n                if (!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    stack.add(c);\n                }\n            }\n        }\n\n  \n\n        System.out.println(ans + ((stack.size() + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));\n    }",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            50
        ],
        "buggy_statements": [
            "        System.out.println(ans + ((stack.size() + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));"
        ],
        "buggy_method_src_endswith_buggy_statement": "public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int N = scanner.nextInt();\n        int swapCost = scanner.nextInt();\n        int replaceCost = scanner.nextInt();\n\n        String s = scanner.next();\n\n\n        char[] charArray = s.toCharArray();\n        long balance = getBalance(charArray);\n        long ans = 0;\n\n        if (balance > 0) {\n            for (int i = 0; i < charArray.length; i++) {\n                if (balance > 0 && charArray[i] == ')') {\n                    charArray[i] = '(';\n                    ans += replaceCost;\n                    balance -= 2;\n                }\n            }\n        } else if (balance < 0) {\n            for (int i = charArray.length - 1; i >= 0; i--) {\n                if (balance < 0 && charArray[i] == '(') {\n                    charArray[i] = ')';\n                    ans += replaceCost;\n                    balance += 2;\n                }\n            }\n        }\n\n        Stack<Character> stack = new Stack<>();\n\n        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n            if (c == '(') {\n                stack.add(c);\n            } else {\n                if (!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    stack.add(c);\n                }\n            }\n        }\n\n  \n\n        System.out.println(ans + ((stack.size() + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));"
    }
]