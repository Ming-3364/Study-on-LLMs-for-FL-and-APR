[
    {
        "buggy_file": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "buggy_method": {
            "method_name": "tryFoldComparison",
            "method_body": "@SuppressWarnings(\"fallthrough\")\n  private Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false)) {\n      // We only handle non-literal operands for LT and GT.\n      if (n.getType() != Token.GT && n.getType() != Token.LT) {\n        return n;\n      }\n    }\n\n    int op = n.getType();\n    boolean result;\n\n    // TODO(johnlenz): Use the JSType to compare nodes of different types.\n\n    boolean rightLiteral = NodeUtil.isLiteralValue(right, false);\n    boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    int lhType = left.getType();\n    int rhType = right.getType();\n    switch (lhType) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (right.getType() != Token.THIS) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }\n\n    Node newNode = new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n\n    return newNode;\n  }",
            "start_line": 887,
            "end_line": 1069,
            "buggy_lines": [
                907,
                908
            ]
        },
        "buggy_method_src": "@SuppressWarnings(\"fallthrough\")\n  private Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false)) {\n      // We only handle non-literal operands for LT and GT.\n      if (n.getType() != Token.GT && n.getType() != Token.LT) {\n        return n;\n      }\n    }\n\n    int op = n.getType();\n    boolean result;\n\n    // TODO(johnlenz): Use the JSType to compare nodes of different types.\n\n    boolean rightLiteral = NodeUtil.isLiteralValue(right, false);\n    boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    int lhType = left.getType();\n    int rhType = right.getType();\n    switch (lhType) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (right.getType() != Token.THIS) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }\n\n    Node newNode = new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n\n    return newNode;\n  }",
        "test_stack": "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3\njunit.framework.AssertionFailedError:\nExpected: x=false\nResult: x=!1==!0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                NAME x 1 [sourcename: expected0]\n                FALSE 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: testcode]\n            ASSIGN 1 [sourcename: testcode]\n                NAME x 1 [sourcename: testcode]\n                EQ 1 [sourcename: testcode]\n                    NOT 1 [sourcename: testcode]\n                        NUMBER 1.0 1 [sourcename: testcode]\n                    NOT 1 [sourcename: testcode]\n                        NUMBER 0.0 1 [sourcename: testcode]\n\n\nSubtree1: FALSE 1 [sourcename: expected0]\n\n\nSubtree2: EQ 1 [sourcename: testcode]\n    NOT 1 [sourcename: testcode]\n        NUMBER 1.0 1 [sourcename: testcode]\n    NOT 1 [sourcename: testcode]\n        NUMBER 0.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:844)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:411)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:336)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:293)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.fold(PeepholeFoldConstantsTest.java:69)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.testFoldComparison3(PeepholeFoldConstantsTest.java:700)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators\njunit.framework.ComparisonFailure: Expressions did not fold the same\nexprA: !0 > undefined\nexprB: false expected:<[!0>undefined]> but was:<[false]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.assertSameResults(PeepholeFoldConstantsTest.java:1184)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.testInvertibleOperators(PeepholeFoldConstantsTest.java:1122)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators\njunit.framework.ComparisonFailure: Expressions did not fold the same\nexprA: undefined == !0\nexprB: !0 == undefined expected:<[false]> but was:<[!0==undefined]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.assertSameResults(PeepholeFoldConstantsTest.java:1184)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.assertSameResultsOrUncollapsed(PeepholeFoldConstantsTest.java:1179)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.testCommutativeOperators(PeepholeFoldConstantsTest.java:1162)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "fold(\"x = !1 == !0\", \"x = false\");\n",
        "buggy_lines_in_method": [
            21,
            22
        ],
        "buggy_statements": [
            "    int lhType = left.getType();",
            "    int rhType = right.getType();"
        ],
        "buggy_method_src_endswith_buggy_statement": "@SuppressWarnings(\"fallthrough\")\n  private Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false)) {\n      // We only handle non-literal operands for LT and GT.\n      if (n.getType() != Token.GT && n.getType() != Token.LT) {\n        return n;\n      }\n    }\n\n    int op = n.getType();\n    boolean result;\n\n    // TODO(johnlenz): Use the JSType to compare nodes of different types.\n\n    boolean rightLiteral = NodeUtil.isLiteralValue(right, false);\n    boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    int lhType = left.getType();\n    int rhType = right.getType();"
    }
]