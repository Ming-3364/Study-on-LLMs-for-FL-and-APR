[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "public static void main(String[] args){\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tInputReader sc=new InputReader(System.in);\t\t\n\t\tint n = sc.nextInt();\n\t\tint[] a = sc.nextIntArray(n);\n\t\tint q = sc.nextInt();\n\t\tHashMap<Integer, Integer> front = new HashMap<>();\n\t\tHashMap<Integer, Integer> back = new HashMap<>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfront.put(a[i], i - 1 >= 0 ? a[i - 1] : -1);\n\t\t\tback.put(a[i], i + 1 < n ? a[i + 1] : -1);\n\t\t}\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tif (sc.nextInt() == 1) {\n\t\t\t\tint x = sc.nextInt();\n\t\t\t\tint y = sc.nextInt();\n\t\t\t\tint x_back = back.get(x);\n\t\t\t\tback.put(x, y);\n\t\t\t\tif (x_back != -1) front.put(x_back, y);\n\t\t\t\tfront.put(y, x);\n\t\t\t\tback.put(y, x_back);\n\t\t\t}else {\n\t\t\t\tint x = sc.nextInt();\n\t\t\t\tint x_front = front.get(x);\n\t\t\t\tint x_back = back.get(x);\n\t\t\t\tif (x_front != -1) back.put(x_front, x_back);\n\t\t\t\tif (x_back != -1) front.put(x_back, x_front);\n\t\t\t}\n\t\t}\n\t\tint top = 0;\n\t\tfor (int key : front.keySet()) {\n\t\t\tif (front.get(key) == -1) top = key;\n\t\t}\n\t\tint now = top;\n\t\twhile (now != -1) {\n\t\t\tout.println(now);\n\t\t\tnow = back.get(now);\n\t\t}\n\t\tout.flush();\n\t}",
            "start_line": 153,
            "end_line": 192
        },
        "buggy_method_src": "public static void main(String[] args){\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tInputReader sc=new InputReader(System.in);\t\t\n\t\tint n = sc.nextInt();\n\t\tint[] a = sc.nextIntArray(n);\n\t\tint q = sc.nextInt();\n\t\tHashMap<Integer, Integer> front = new HashMap<>();\n\t\tHashMap<Integer, Integer> back = new HashMap<>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfront.put(a[i], i - 1 >= 0 ? a[i - 1] : -1);\n\t\t\tback.put(a[i], i + 1 < n ? a[i + 1] : -1);\n\t\t}\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tif (sc.nextInt() == 1) {\n\t\t\t\tint x = sc.nextInt();\n\t\t\t\tint y = sc.nextInt();\n\t\t\t\tint x_back = back.get(x);\n\t\t\t\tback.put(x, y);\n\t\t\t\tif (x_back != -1) front.put(x_back, y);\n\t\t\t\tfront.put(y, x);\n\t\t\t\tback.put(y, x_back);\n\t\t\t}else {\n\t\t\t\tint x = sc.nextInt();\n\t\t\t\tint x_front = front.get(x);\n\t\t\t\tint x_back = back.get(x);\n\t\t\t\tif (x_front != -1) back.put(x_front, x_back);\n\t\t\t\tif (x_back != -1) front.put(x_back, x_front);\n\t\t\t}\n\t\t}\n\t\tint top = 0;\n\t\tfor (int key : front.keySet()) {\n\t\t\tif (front.get(key) == -1) top = key;\n\t\t}\n\t\tint now = top;\n\t\twhile (now != -1) {\n\t\t\tout.println(now);\n\t\t\tnow = back.get(now);\n\t\t}\n\t\tout.flush();\n\t}",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            28
        ],
        "buggy_statements": [
            "\t\t\t}"
        ],
        "buggy_method_src_endswith_buggy_statement": "public static void main(String[] args){\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tInputReader sc=new InputReader(System.in);\t\t\n\t\tint n = sc.nextInt();\n\t\tint[] a = sc.nextIntArray(n);\n\t\tint q = sc.nextInt();\n\t\tHashMap<Integer, Integer> front = new HashMap<>();\n\t\tHashMap<Integer, Integer> back = new HashMap<>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfront.put(a[i], i - 1 >= 0 ? a[i - 1] : -1);\n\t\t\tback.put(a[i], i + 1 < n ? a[i + 1] : -1);\n\t\t}\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tif (sc.nextInt() == 1) {\n\t\t\t\tint x = sc.nextInt();\n\t\t\t\tint y = sc.nextInt();\n\t\t\t\tint x_back = back.get(x);\n\t\t\t\tback.put(x, y);\n\t\t\t\tif (x_back != -1) front.put(x_back, y);\n\t\t\t\tfront.put(y, x);\n\t\t\t\tback.put(y, x_back);\n\t\t\t}else {\n\t\t\t\tint x = sc.nextInt();\n\t\t\t\tint x_front = front.get(x);\n\t\t\t\tint x_back = back.get(x);\n\t\t\t\tif (x_front != -1) back.put(x_front, x_back);\n\t\t\t\tif (x_back != -1) front.put(x_back, x_front);\n\t\t\t}"
    }
]