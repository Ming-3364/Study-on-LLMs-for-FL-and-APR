
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'public static void main(String[] args) {\n    FastScanner sc = new FastScanner();\n    int n = Integer.parseInt(sc.next());\n    List<Long> a = new ArrayList<>();\n    Long ans = 0L;\n    Map<Long, Long> w = new HashMap<>();\n    for(int j = 0; j < n; j++) {\n      a.add(sc.nextLong());\n    }\n    for(int i = 0; i < n; i++) {\n      long temp = sc.nextLong();\n      if(!w.containsKey(a.get(i))) {\n        w.put(a.get(i), temp);\n      } else {\n        ans += Math.min(w.get(a.get(i)), temp);\n        w.put(a.get(i), Math.min(w.get(a.get(i)), temp));\n      }\n    }\n    System.out.print(ans);\n  }', 'start_line': 5, 'end_line': 24}
================== buggy_method_src ==================
public static void main(String[] args) {
    FastScanner sc = new FastScanner();
    int n = Integer.parseInt(sc.next());
    List<Long> a = new ArrayList<>();
    Long ans = 0L;
    Map<Long, Long> w = new HashMap<>();
    for(int j = 0; j < n; j++) {
      a.add(sc.nextLong());
    }
    for(int i = 0; i < n; i++) {
      long temp = sc.nextLong();
      if(!w.containsKey(a.get(i))) {
        w.put(a.get(i), temp);
      } else {
        ans += Math.min(w.get(a.get(i)), temp);
        w.put(a.get(i), Math.min(w.get(a.get(i)), temp));
      }
    }
    System.out.print(ans);
  }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[16]
================== buggy_statements ==================
['        w.put(a.get(i), Math.min(w.get(a.get(i)), temp));']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] args) {
    FastScanner sc = new FastScanner();
    int n = Integer.parseInt(sc.next());
    List<Long> a = new ArrayList<>();
    Long ans = 0L;
    Map<Long, Long> w = new HashMap<>();
    for(int j = 0; j < n; j++) {
      a.add(sc.nextLong());
    }
    for(int i = 0; i < n; i++) {
      long temp = sc.nextLong();
      if(!w.containsKey(a.get(i))) {
        w.put(a.get(i), temp);
      } else {
        ans += Math.min(w.get(a.get(i)), temp);
        w.put(a.get(i), Math.min(w.get(a.get(i)), temp));