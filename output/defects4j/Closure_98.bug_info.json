[
    {
        "buggy_file": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "buggy_method": {
            "method_name": "getOneAndOnlyAssignment",
            "method_body": "private Reference getOneAndOnlyAssignment() {\n      Reference assignment = null;\n      int size = references.size();\n      for (int i = 0; i < size; i++) {\n        Reference ref = references.get(i);\n        if (ref.isLvalue() || ref.isInitializingDeclaration()) {\n          if (assignment == null) {\n            assignment = ref;\n          } else {\n            return null;\n          }\n        }\n      }\n      return assignment;\n    }",
            "start_line": 369,
            "end_line": 383,
            "buggy_lines": [
                368
            ]
        },
        "buggy_method_src": "private Reference getOneAndOnlyAssignment() {\n      Reference assignment = null;\n      int size = references.size();\n      for (int i = 0; i < size; i++) {\n        Reference ref = references.get(i);\n        if (ref.isLvalue() || ref.isInitializingDeclaration()) {\n          if (assignment == null) {\n            assignment = ref;\n          } else {\n            return null;\n          }\n        }\n      }\n      return assignment;\n    }",
        "test_stack": "com.google.javascript.jscomp.InlineVariablesTest::testNoInlineAliasesInLoop\njunit.framework.AssertionFailedError:\nExpected: function f(){var i=0;for(;i<5;i++){var x=extern();(function(){var y=x;window.setTimeout(function(){extern(y)},0)})()}}\nResult: function f(){var i=0;for(;i<5;i++){var x=extern();(function(){window.setTimeout(function(){extern(x)},0)})()}}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME f 1\n            LP 1\n            BLOCK 1\n                VAR 1\n                    NAME i 1\n                        NUMBER 0.0 1\n                FOR 1\n                    EMPTY 1\n                    LT 1\n                        NAME i 1\n                        NUMBER 5.0 1\n                    INC 1 [incrdecr: 1]\n                        NAME i 1\n                    BLOCK 1\n                        VAR 1\n                            NAME x 1\n                                CALL 1\n                                    NAME extern 1\n                        EXPR_RESULT 1\n                            CALL 1\n                                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                                    NAME  1\n                                    LP 1\n                                    BLOCK 1\n                                        VAR 1\n                                            NAME y 1\n                                                NAME x 1\n                                        EXPR_RESULT 1\n                                            CALL 1\n                                                GETPROP 1\n                                                    NAME window 1\n                                                    STRING setTimeout 1\n                                                FUNCTION  1 [sourcename: expected0]\n                                                    NAME  1\n                                                    LP 1\n                                                    BLOCK 1\n                                                        EXPR_RESULT 1\n                                                            CALL 1\n                                                                NAME extern 1\n                                                                NAME y 1\n                                                NUMBER 0.0 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME f 1\n            LP 1\n            BLOCK 1\n                VAR 1\n                    NAME i 1\n                        NUMBER 0.0 1\n                FOR 1\n                    EMPTY 1\n                    LT 1\n                        NAME i 1\n                        NUMBER 5.0 1\n                    INC 1 [incrdecr: 1]\n                        NAME i 1\n                    BLOCK 1\n                        VAR 1\n                            NAME x 1\n                                CALL 1\n                                    NAME extern 1\n                        EXPR_RESULT 1\n                            CALL 1\n                                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                                    NAME  1\n                                    LP 1\n                                    BLOCK 1\n                                        EXPR_RESULT 1\n                                            CALL 1\n                                                GETPROP 1\n                                                    NAME window 1\n                                                    STRING setTimeout 1\n                                                FUNCTION  1 [sourcename: testcode]\n                                                    NAME  1\n                                                    LP 1\n                                                    BLOCK 1\n                                                        EXPR_RESULT 1\n                                                            CALL 1\n                                                                NAME extern 1\n                                                                NAME x 1\n                                                NUMBER 0.0 1\n\n\nSubtree1: BLOCK 1\n    VAR 1\n        NAME y 1\n            NAME x 1\n    EXPR_RESULT 1\n        CALL 1\n            GETPROP 1\n                NAME window 1\n                STRING setTimeout 1\n            FUNCTION  1 [sourcename: expected0]\n                NAME  1\n                LP 1\n                BLOCK 1\n                    EXPR_RESULT 1\n                        CALL 1\n                            NAME extern 1\n                            NAME y 1\n            NUMBER 0.0 1\n\n\nSubtree2: BLOCK 1\n    EXPR_RESULT 1\n        CALL 1\n            GETPROP 1\n                NAME window 1\n                STRING setTimeout 1\n            FUNCTION  1 [sourcename: testcode]\n                NAME  1\n                LP 1\n                BLOCK 1\n                    EXPR_RESULT 1\n                        CALL 1\n                            NAME extern 1\n                            NAME x 1\n            NUMBER 0.0 1\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:777)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliasesInLoop(InlineVariablesTest.java:617)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "testSame(\n",
        "buggy_lines_in_method": [
            0
        ],
        "buggy_statements": [
            "    }"
        ],
        "buggy_method_src_endswith_buggy_statement": ""
    },
    {
        "buggy_file": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "buggy_method": {
            "method_name": "provablyExecutesBefore",
            "method_body": "boolean provablyExecutesBefore(BasicBlock thatBlock) {\n      // If thatBlock is a descendant of this block, and there are no hoisted\n      // blocks between them, then this block must start before thatBlock.\n      BasicBlock currentBlock;\n      for (currentBlock = thatBlock;\n           currentBlock != null && currentBlock != this;\n           currentBlock = currentBlock.getParent()) {\n        if (currentBlock.isHoisted) {\n          return false;\n        }\n      }\n\n      return currentBlock == this;\n    }",
            "start_line": 572,
            "end_line": 585,
            "buggy_lines": [
                571,
                580
            ]
        },
        "buggy_method_src": "boolean provablyExecutesBefore(BasicBlock thatBlock) {\n      // If thatBlock is a descendant of this block, and there are no hoisted\n      // blocks between them, then this block must start before thatBlock.\n      BasicBlock currentBlock;\n      for (currentBlock = thatBlock;\n           currentBlock != null && currentBlock != this;\n           currentBlock = currentBlock.getParent()) {\n        if (currentBlock.isHoisted) {\n          return false;\n        }\n      }\n\n      return currentBlock == this;\n    }",
        "test_stack": "com.google.javascript.jscomp.InlineVariablesTest::testNoInlineAliasesInLoop\njunit.framework.AssertionFailedError:\nExpected: function f(){var i=0;for(;i<5;i++){var x=extern();(function(){var y=x;window.setTimeout(function(){extern(y)},0)})()}}\nResult: function f(){var i=0;for(;i<5;i++){var x=extern();(function(){window.setTimeout(function(){extern(x)},0)})()}}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME f 1\n            LP 1\n            BLOCK 1\n                VAR 1\n                    NAME i 1\n                        NUMBER 0.0 1\n                FOR 1\n                    EMPTY 1\n                    LT 1\n                        NAME i 1\n                        NUMBER 5.0 1\n                    INC 1 [incrdecr: 1]\n                        NAME i 1\n                    BLOCK 1\n                        VAR 1\n                            NAME x 1\n                                CALL 1\n                                    NAME extern 1\n                        EXPR_RESULT 1\n                            CALL 1\n                                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                                    NAME  1\n                                    LP 1\n                                    BLOCK 1\n                                        VAR 1\n                                            NAME y 1\n                                                NAME x 1\n                                        EXPR_RESULT 1\n                                            CALL 1\n                                                GETPROP 1\n                                                    NAME window 1\n                                                    STRING setTimeout 1\n                                                FUNCTION  1 [sourcename: expected0]\n                                                    NAME  1\n                                                    LP 1\n                                                    BLOCK 1\n                                                        EXPR_RESULT 1\n                                                            CALL 1\n                                                                NAME extern 1\n                                                                NAME y 1\n                                                NUMBER 0.0 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME f 1\n            LP 1\n            BLOCK 1\n                VAR 1\n                    NAME i 1\n                        NUMBER 0.0 1\n                FOR 1\n                    EMPTY 1\n                    LT 1\n                        NAME i 1\n                        NUMBER 5.0 1\n                    INC 1 [incrdecr: 1]\n                        NAME i 1\n                    BLOCK 1\n                        VAR 1\n                            NAME x 1\n                                CALL 1\n                                    NAME extern 1\n                        EXPR_RESULT 1\n                            CALL 1\n                                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                                    NAME  1\n                                    LP 1\n                                    BLOCK 1\n                                        EXPR_RESULT 1\n                                            CALL 1\n                                                GETPROP 1\n                                                    NAME window 1\n                                                    STRING setTimeout 1\n                                                FUNCTION  1 [sourcename: testcode]\n                                                    NAME  1\n                                                    LP 1\n                                                    BLOCK 1\n                                                        EXPR_RESULT 1\n                                                            CALL 1\n                                                                NAME extern 1\n                                                                NAME x 1\n                                                NUMBER 0.0 1\n\n\nSubtree1: BLOCK 1\n    VAR 1\n        NAME y 1\n            NAME x 1\n    EXPR_RESULT 1\n        CALL 1\n            GETPROP 1\n                NAME window 1\n                STRING setTimeout 1\n            FUNCTION  1 [sourcename: expected0]\n                NAME  1\n                LP 1\n                BLOCK 1\n                    EXPR_RESULT 1\n                        CALL 1\n                            NAME extern 1\n                            NAME y 1\n            NUMBER 0.0 1\n\n\nSubtree2: BLOCK 1\n    EXPR_RESULT 1\n        CALL 1\n            GETPROP 1\n                NAME window 1\n                STRING setTimeout 1\n            FUNCTION  1 [sourcename: testcode]\n                NAME  1\n                LP 1\n                BLOCK 1\n                    EXPR_RESULT 1\n                        CALL 1\n                            NAME extern 1\n                            NAME x 1\n            NUMBER 0.0 1\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:777)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliasesInLoop(InlineVariablesTest.java:617)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "testSame(\n",
        "buggy_lines_in_method": [
            0,
            9
        ],
        "buggy_statements": [
            "    }",
            "          return false;"
        ],
        "buggy_method_src_endswith_buggy_statement": "boolean provablyExecutesBefore(BasicBlock thatBlock) {\n      // If thatBlock is a descendant of this block, and there are no hoisted\n      // blocks between them, then this block must start before thatBlock.\n      BasicBlock currentBlock;\n      for (currentBlock = thatBlock;\n           currentBlock != null && currentBlock != this;\n           currentBlock = currentBlock.getParent()) {\n        if (currentBlock.isHoisted) {\n          return false;"
    }
]