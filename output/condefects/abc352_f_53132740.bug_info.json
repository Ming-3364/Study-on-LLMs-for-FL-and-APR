[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "solve",
            "method_body": "private void solve(final FastIO io, final String[] args) {\n\t\tio.setAutoFlush(true);\n\t\tio.setAutoOutFlush(false);\n\t\t/*\n\t\t * author: 31536000\n\t\t * AtCoder Beginner Contest 352 F\u554f\u984c\n\t\t * \u8003\u5bdf\u30e1\u30e2\n\t\t * \u307e\u305a\u3001\u758e\u306a\u9802\u70b9\u304c\u4e8c\u3064\u3042\u308b\u5834\u5408\u306f\u660e\u3089\u304b\u306b\u305d\u3053\u306b\u95a2\u3057\u3066\u306f\u4e00\u610f\u306b\u5b9a\u307e\u3089\u306a\u3044\n\t\t * \u3088\u3063\u3066\u3001\u6b8b\u308a\u306e\u9802\u70b9\u306b\u5bfe\u3059\u308b\u5272\u308a\u5f53\u3066\u3060\u3051\u8003\u3048\u308c\u3070\u826f\u3044\n\t\t * \u5404\u9023\u7d50\u6210\u5206\u306b\u5bfe\u3057\u3066\u3001\u6700\u5c0f\u5024\u3092\u6c7a\u3081\u308c\u3070\u6b8b\u308a\u306f\u4e00\u610f\u306b\u5b9a\u307e\u308b\n\t\t * \u3068\u3044\u3046\u3053\u3068\u306f\u3001\u9023\u7d50\u6210\u5206\u306fN/2\u500b\u4ee5\u4e0b\u3067\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306b\u6700\u5c0f\u5024\u3092\u6c7a\u3081\u308b\u306e\u306f16P8\u22525e8\u3068\u304b(\u5b9f\u969b\u306b\u306f\u3082\u3063\u3068\u5c0f\u3055\u3044\u306f\u305a)\n\t\t */\n\t\tint N = io.nextInt(), M = io.nextInt();\n\t\tACL.DisjointSetUnion dsu = ACL.DisjointSetUnion.create(N);\n\t\tArrayList<ArrayList<Edge>> graph = new ArrayList<>(N);\n\t\tfor (int i = 0;i < N;++ i) graph.add(new ArrayList<>());\n\t\tfor (int i = 0;i < M;++ i) {\n\t\t\tint A = io.nextInt() - 1, B = io.nextInt() - 1, C = io.nextInt();\n\t\t\tdsu.merge(A, B);\n\t\t\tgraph.get(A).add(new Edge(A, B, -C));\n\t\t\tgraph.get(B).add(new Edge(B, A, C));\n\t\t}\n\t\t// \u8981\u7d20\u65701\u306e\u9023\u7d50\u6210\u5206\u304c\u4e8c\u3064\u4ee5\u4e0a\u3042\u308b\u306a\u3089\u3001\u6570\u3048\u306a\u3044\n\t\tint one = IntStream.range(0, N).filter(i -> dsu.getSize(i) == 1).sum();\n\t\tComponent[] comp = Arrays\n\t\t\t\t.stream(dsu.getGroups().stream().filter(i -> one <= 1 || i.size() != 1).mapToInt(i -> i.get(0)).toArray())\n\t\t\t\t.mapToObj(i -> new Component(i, graph)).toArray(Component[]::new);\n\t\tdfs(comp, new BitSet(N), 0, N);\n\t\tint[] ans = new int[N];\n\t\tArrays.fill(ans, -1);\n\t\tfor (Component c : comp) {\n\t\t\tif (c.candidate.cardinality() != 1) continue;\n\t\t\tint min = c.candidate.nextSetBit(0) + 1;\n\t\t\tfor (Map.Entry<Integer, Integer> e : c.add.entrySet()) ans[e.getKey()] = e.getValue() + min;\n\t\t}\n\t\tio.println(ans);\n\t}\n\tclass Edge {\n\t\tint source, target, dist;\n\t\tEdge(int source, int target, int dist) {\n\t\t\tthis.source = source;\n\t\t\tthis.target = target;\n\t\t\tthis.dist = dist;\n\t\t}\n\t}\n\tclass Component {\n\t\tBitSet candidate;\n\t\tint[] fill;\n\t\tHashMap<Integer, Integer> add = new HashMap<>();\n\t\tint N, max, target;\n\t\tComponent(int i, ArrayList<Array",
            "start_line": 27,
            "end_line": 63
        },
        "buggy_method_src": "private void solve(final FastIO io, final String[] args) {\n\t\tio.setAutoFlush(true);\n\t\tio.setAutoOutFlush(false);\n\t\t/*\n\t\t * author: 31536000\n\t\t * AtCoder Beginner Contest 352 F\u554f\u984c\n\t\t * \u8003\u5bdf\u30e1\u30e2\n\t\t * \u307e\u305a\u3001\u758e\u306a\u9802\u70b9\u304c\u4e8c\u3064\u3042\u308b\u5834\u5408\u306f\u660e\u3089\u304b\u306b\u305d\u3053\u306b\u95a2\u3057\u3066\u306f\u4e00\u610f\u306b\u5b9a\u307e\u3089\u306a\u3044\n\t\t * \u3088\u3063\u3066\u3001\u6b8b\u308a\u306e\u9802\u70b9\u306b\u5bfe\u3059\u308b\u5272\u308a\u5f53\u3066\u3060\u3051\u8003\u3048\u308c\u3070\u826f\u3044\n\t\t * \u5404\u9023\u7d50\u6210\u5206\u306b\u5bfe\u3057\u3066\u3001\u6700\u5c0f\u5024\u3092\u6c7a\u3081\u308c\u3070\u6b8b\u308a\u306f\u4e00\u610f\u306b\u5b9a\u307e\u308b\n\t\t * \u3068\u3044\u3046\u3053\u3068\u306f\u3001\u9023\u7d50\u6210\u5206\u306fN/2\u500b\u4ee5\u4e0b\u3067\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306b\u6700\u5c0f\u5024\u3092\u6c7a\u3081\u308b\u306e\u306f16P8\u22525e8\u3068\u304b(\u5b9f\u969b\u306b\u306f\u3082\u3063\u3068\u5c0f\u3055\u3044\u306f\u305a)\n\t\t */\n\t\tint N = io.nextInt(), M = io.nextInt();\n\t\tACL.DisjointSetUnion dsu = ACL.DisjointSetUnion.create(N);\n\t\tArrayList<ArrayList<Edge>> graph = new ArrayList<>(N);\n\t\tfor (int i = 0;i < N;++ i) graph.add(new ArrayList<>());\n\t\tfor (int i = 0;i < M;++ i) {\n\t\t\tint A = io.nextInt() - 1, B = io.nextInt() - 1, C = io.nextInt();\n\t\t\tdsu.merge(A, B);\n\t\t\tgraph.get(A).add(new Edge(A, B, -C));\n\t\t\tgraph.get(B).add(new Edge(B, A, C));\n\t\t}\n\t\t// \u8981\u7d20\u65701\u306e\u9023\u7d50\u6210\u5206\u304c\u4e8c\u3064\u4ee5\u4e0a\u3042\u308b\u306a\u3089\u3001\u6570\u3048\u306a\u3044\n\t\tint one = IntStream.range(0, N).filter(i -> dsu.getSize(i) == 1).sum();\n\t\tComponent[] comp = Arrays\n\t\t\t\t.stream(dsu.getGroups().stream().filter(i -> one <= 1 || i.size() != 1).mapToInt(i -> i.get(0)).toArray())\n\t\t\t\t.mapToObj(i -> new Component(i, graph)).toArray(Component[]::new);\n\t\tdfs(comp, new BitSet(N), 0, N);\n\t\tint[] ans = new int[N];\n\t\tArrays.fill(ans, -1);\n\t\tfor (Component c : comp) {\n\t\t\tif (c.candidate.cardinality() != 1) continue;\n\t\t\tint min = c.candidate.nextSetBit(0) + 1;\n\t\t\tfor (Map.Entry<Integer, Integer> e : c.add.entrySet()) ans[e.getKey()] = e.getValue() + min;\n\t\t}\n\t\tio.println(ans);\n\t}\n\tclass Edge {\n\t\tint source, target, dist;\n\t\tEdge(int source, int target, int dist) {\n\t\t\tthis.source = source;\n\t\t\tthis.target = target;\n\t\t\tthis.dist = dist;\n\t\t}\n\t}\n\tclass Component {\n\t\tBitSet candidate;\n\t\tint[] fill;\n\t\tHashMap<Integer, Integer> add = new HashMap<>();\n\t\tint N, max, target;\n\t\tComponent(int i, ArrayList<Array",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            24
        ],
        "buggy_statements": [
            "\t\tint one = IntStream.range(0, N).filter(i -> dsu.getSize(i) == 1).sum();"
        ],
        "buggy_method_src_endswith_buggy_statement": "private void solve(final FastIO io, final String[] args) {\n\t\tio.setAutoFlush(true);\n\t\tio.setAutoOutFlush(false);\n\t\t/*\n\t\t * author: 31536000\n\t\t * AtCoder Beginner Contest 352 F\u554f\u984c\n\t\t * \u8003\u5bdf\u30e1\u30e2\n\t\t * \u307e\u305a\u3001\u758e\u306a\u9802\u70b9\u304c\u4e8c\u3064\u3042\u308b\u5834\u5408\u306f\u660e\u3089\u304b\u306b\u305d\u3053\u306b\u95a2\u3057\u3066\u306f\u4e00\u610f\u306b\u5b9a\u307e\u3089\u306a\u3044\n\t\t * \u3088\u3063\u3066\u3001\u6b8b\u308a\u306e\u9802\u70b9\u306b\u5bfe\u3059\u308b\u5272\u308a\u5f53\u3066\u3060\u3051\u8003\u3048\u308c\u3070\u826f\u3044\n\t\t * \u5404\u9023\u7d50\u6210\u5206\u306b\u5bfe\u3057\u3066\u3001\u6700\u5c0f\u5024\u3092\u6c7a\u3081\u308c\u3070\u6b8b\u308a\u306f\u4e00\u610f\u306b\u5b9a\u307e\u308b\n\t\t * \u3068\u3044\u3046\u3053\u3068\u306f\u3001\u9023\u7d50\u6210\u5206\u306fN/2\u500b\u4ee5\u4e0b\u3067\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306b\u6700\u5c0f\u5024\u3092\u6c7a\u3081\u308b\u306e\u306f16P8\u22525e8\u3068\u304b(\u5b9f\u969b\u306b\u306f\u3082\u3063\u3068\u5c0f\u3055\u3044\u306f\u305a)\n\t\t */\n\t\tint N = io.nextInt(), M = io.nextInt();\n\t\tACL.DisjointSetUnion dsu = ACL.DisjointSetUnion.create(N);\n\t\tArrayList<ArrayList<Edge>> graph = new ArrayList<>(N);\n\t\tfor (int i = 0;i < N;++ i) graph.add(new ArrayList<>());\n\t\tfor (int i = 0;i < M;++ i) {\n\t\t\tint A = io.nextInt() - 1, B = io.nextInt() - 1, C = io.nextInt();\n\t\t\tdsu.merge(A, B);\n\t\t\tgraph.get(A).add(new Edge(A, B, -C));\n\t\t\tgraph.get(B).add(new Edge(B, A, C));\n\t\t}\n\t\t// \u8981\u7d20\u65701\u306e\u9023\u7d50\u6210\u5206\u304c\u4e8c\u3064\u4ee5\u4e0a\u3042\u308b\u306a\u3089\u3001\u6570\u3048\u306a\u3044\n\t\tint one = IntStream.range(0, N).filter(i -> dsu.getSize(i) == 1).sum();"
    }
]