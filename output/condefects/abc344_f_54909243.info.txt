
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'id main(String[] args){\n        PrintWriter out = new PrintWriter(System.out);\n        InputReader sc=new InputReader(System.in);\n        int n = sc.nextInt();\n        long[][] p = new long[n][n];\n        long[][] r = new long[n][n - 1];\n        long[][] d = new long[n - 1][n];\n        for (int i = 0; i < n; i++) {\n            p[i] = sc.nextLongArray(n);\n        }\n        for (int i = 0; i < n; i++) {\n            r[i] = sc.nextLongArray(n - 1);\n        }\n        for (int i = 0; i < n - 1; i++) {\n            d[i] = sc.nextLongArray(n);\n        }\n        PairLong[][] dp = new PairLong[n][n];\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(dp[i], new PairLong(MAX, MAX));\n        }\n        dp[0][0] = new PairLong(0, 0);\n        long ans = MAX;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == n - 1 && j == n - 1) {\n                  continue;\n                }\n                if (dp[i][j].x == MAX) {\n                    continue;\n                }\n                long[][] dist = new long[n][n];\n                for (int k = 0; k < n; k++) {\n                    Arrays.fill(dist[k], MAX);\n                }\n                dist[i][j] = 0;\n                for (int k = i; k < n; k++) {\n                    for (int l = j; l < n; l++) {\n                        if (k + 1 < n) {\n                            dist[k + 1][l] = Math.min(dist[k + 1][l], dist[k][l] + d[k][l]);\n                        }\n                        if (l + 1 < n) {\n                            dist[k][l + 1] = Math.min(dist[k][l + 1], dist[k][l] + r[k][l]);\n                        }\n                    }\n                }\n                long x = dp[i][j].x;\n                long y = dp[i][j].y;\n                ans = Math.min(ans, x + ceil(Math.max(dist[n - 1][n - 1] - y, 0), p[i][j]));\n                //System.out.println(ans + " " + i + " " + j + " " + x + " " + y + " " + dist[n - 1][n - 1] + " " + p[i][j]);\n                for (int k = i; k < n; k++) {\n                    for (int l = j; l < n; l++) {\n                        if (k == i && l == j) {\n                            continue;\n                        }\n                        if (p[i][j] >= p[k][l]) {\n                            continue;\n                        }\n                        long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j]);\n                        long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];\n                        if (nx < dp[k][l].x || (nx == dp[k][l].x && ny < dp[k][l].y)) {\n                            dp[k][l] = new PairLong(nx, ny);\n                        }\n                    }\n                }\n            }\n        }\n        out.println(ans + 2 * n - 2);\n        out.flush();\n    }\n\n    static cla', 'start_line': 22, 'end_line': 90}
================== buggy_method_src ==================
id main(String[] args){
        PrintWriter out = new PrintWriter(System.out);
        InputReader sc=new InputReader(System.in);
        int n = sc.nextInt();
        long[][] p = new long[n][n];
        long[][] r = new long[n][n - 1];
        long[][] d = new long[n - 1][n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextLongArray(n);
        }
        for (int i = 0; i < n; i++) {
            r[i] = sc.nextLongArray(n - 1);
        }
        for (int i = 0; i < n - 1; i++) {
            d[i] = sc.nextLongArray(n);
        }
        PairLong[][] dp = new PairLong[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], new PairLong(MAX, MAX));
        }
        dp[0][0] = new PairLong(0, 0);
        long ans = MAX;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == n - 1 && j == n - 1) {
                  continue;
                }
                if (dp[i][j].x == MAX) {
                    continue;
                }
                long[][] dist = new long[n][n];
                for (int k = 0; k < n; k++) {
                    Arrays.fill(dist[k], MAX);
                }
                dist[i][j] = 0;
                for (int k = i; k < n; k++) {
                    for (int l = j; l < n; l++) {
                        if (k + 1 < n) {
                            dist[k + 1][l] = Math.min(dist[k + 1][l], dist[k][l] + d[k][l]);
                        }
                        if (l + 1 < n) {
                            dist[k][l + 1] = Math.min(dist[k][l + 1], dist[k][l] + r[k][l]);
                        }
                    }
                }
                long x = dp[i][j].x;
                long y = dp[i][j].y;
                ans = Math.min(ans, x + ceil(Math.max(dist[n - 1][n - 1] - y, 0), p[i][j]));
                //System.out.println(ans + " " + i + " " + j + " " + x + " " + y + " " + dist[n - 1][n - 1] + " " + p[i][j]);
                for (int k = i; k < n; k++) {
                    for (int l = j; l < n; l++) {
                        if (k == i && l == j) {
                            continue;
                        }
                        if (p[i][j] >= p[k][l]) {
                            continue;
                        }
                        long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j]);
                        long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];
                        if (nx < dp[k][l].x || (nx == dp[k][l].x && ny < dp[k][l].y)) {
                            dp[k][l] = new PairLong(nx, ny);
                        }
                    }
                }
            }
        }
        out.println(ans + 2 * n - 2);
        out.flush();
    }

    static cla
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[60]
================== buggy_statements ==================
['                        if (nx < dp[k][l].x || (nx == dp[k][l].x && ny < dp[k][l].y)) {']
================== buggy_method_src_endswith_buggy_statement ==================
id main(String[] args){
        PrintWriter out = new PrintWriter(System.out);
        InputReader sc=new InputReader(System.in);
        int n = sc.nextInt();
        long[][] p = new long[n][n];
        long[][] r = new long[n][n - 1];
        long[][] d = new long[n - 1][n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextLongArray(n);
        }
        for (int i = 0; i < n; i++) {
            r[i] = sc.nextLongArray(n - 1);
        }
        for (int i = 0; i < n - 1; i++) {
            d[i] = sc.nextLongArray(n);
        }
        PairLong[][] dp = new PairLong[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], new PairLong(MAX, MAX));
        }
        dp[0][0] = new PairLong(0, 0);
        long ans = MAX;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == n - 1 && j == n - 1) {
                  continue;
                }
                if (dp[i][j].x == MAX) {
                    continue;
                }
                long[][] dist = new long[n][n];
                for (int k = 0; k < n; k++) {
                    Arrays.fill(dist[k], MAX);
                }
                dist[i][j] = 0;
                for (int k = i; k < n; k++) {
                    for (int l = j; l < n; l++) {
                        if (k + 1 < n) {
                            dist[k + 1][l] = Math.min(dist[k + 1][l], dist[k][l] + d[k][l]);
                        }
                        if (l + 1 < n) {
                            dist[k][l + 1] = Math.min(dist[k][l + 1], dist[k][l] + r[k][l]);
                        }
                    }
                }
                long x = dp[i][j].x;
                long y = dp[i][j].y;
                ans = Math.min(ans, x + ceil(Math.max(dist[n - 1][n - 1] - y, 0), p[i][j]));
                //System.out.println(ans + " " + i + " " + j + " " + x + " " + y + " " + dist[n - 1][n - 1] + " " + p[i][j]);
                for (int k = i; k < n; k++) {
                    for (int l = j; l < n; l++) {
                        if (k == i && l == j) {
                            continue;
                        }
                        if (p[i][j] >= p[k][l]) {
                            continue;
                        }
                        long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j]);
                        long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];
                        if (nx < dp[k][l].x || (nx == dp[k][l].x && ny < dp[k][l].y)) {