[
    {
        "buggy_file": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "buggy_method": {
            "method_name": "isVariableStillLiveWithinExpression",
            "method_body": "private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }",
            "start_line": 290,
            "end_line": 324,
            "buggy_lines": [
                309,
                317,
                318,
                319
            ]
        },
        "buggy_method_src": "private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }",
        "test_stack": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2\njunit.framework.AssertionFailedError:\nExpected: function FUNC(param1,param2){var a;a=1;if(2||(a=3)||a);}\nResult: function FUNC(param1,param2){var a;a=1;if((a=2)||(a=3)||a);}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                EXPR_RESULT 1 [sourcename: expected0]\n                    ASSIGN 1 [sourcename: expected0]\n                        NAME a 1 [sourcename: expected0]\n                        NUMBER 1.0 1 [sourcename: expected0]\n                IF 1 [sourcename: expected0]\n                    OR 1 [sourcename: expected0]\n                        NUMBER 2.0 1 [sourcename: expected0] [parenthesized: true]\n                        OR 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0] [parenthesized: true]\n                                NAME a 1 [sourcename: expected0]\n                                NUMBER 3.0 1 [sourcename: expected0]\n                            NAME a 1 [sourcename: expected0] [parenthesized: true]\n                    BLOCK 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                EXPR_RESULT 1 [sourcename: testcode]\n                    ASSIGN 1 [sourcename: testcode]\n                        NAME a 1 [sourcename: testcode]\n                        NUMBER 1.0 1 [sourcename: testcode]\n                IF 1 [sourcename: testcode]\n                    OR 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n                            NAME a 1 [sourcename: testcode]\n                            NUMBER 2.0 1 [sourcename: testcode]\n                        OR 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n                                NAME a 1 [sourcename: testcode]\n                                NUMBER 3.0 1 [sourcename: testcode]\n                            NAME a 1 [sourcename: testcode] [parenthesized: true]\n                    BLOCK 1 [sourcename: testcode]\n\n\nSubtree1: NUMBER 2.0 1 [sourcename: expected0] [parenthesized: true]\n\n\nSubtree2: ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n    NAME a 1 [sourcename: testcode]\n    NUMBER 2.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testInExpression2(DeadAssignmentsEliminationTest.java:459)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b\njunit.framework.AssertionFailedError:\nExpected: function FUNC(param1,param2){var a,b;f(b=true)||f(b=false)?a=b:a=null;return a}\nResult: function FUNC(param1,param2){var a,b;f(true)||f(b=false)?a=b:a=null;return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    HOOK 2 [sourcename: expected0]\n                        OR 2 [sourcename: expected0] [parenthesized: true]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NULL 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    HOOK 2 [sourcename: testcode]\n                        OR 2 [sourcename: testcode] [parenthesized: true]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NULL 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384b(DeadAssignmentsEliminationTest.java:501)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c\njunit.framework.AssertionFailedError:\nExpected: function FUNC(param1,param2){var a,b;(a?f(b=true):f(b=false))&&(a=b);return a}\nResult: function FUNC(param1,param2){var a,b;(a?f(true):f(b=false))&&(a=b);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    AND 2 [sourcename: expected0]\n                        HOOK 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    AND 2 [sourcename: testcode]\n                        HOOK 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384c(DeadAssignmentsEliminationTest.java:508)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d\njunit.framework.AssertionFailedError:\nExpected: function FUNC(param1,param2){var a,b;(f(b=true)||f(b=false))&&(a=b);return a}\nResult: function FUNC(param1,param2){var a,b;(f(true)||f(b=false))&&(a=b);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    AND 2 [sourcename: expected0]\n                        OR 2 [sourcename: expected0] [parenthesized: true]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    AND 2 [sourcename: testcode]\n                        OR 2 [sourcename: testcode] [parenthesized: true]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384d(DeadAssignmentsEliminationTest.java:515)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "inFunction(\n",
        "buggy_lines_in_method": [
            20,
            28,
            29,
            30
        ],
        "buggy_statements": [
            "            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {",
            "            }",
            "          }",
            "      }"
        ],
        "buggy_method_src_endswith_buggy_statement": "private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }"
    },
    {
        "buggy_file": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "buggy_method": {
            "method_name": "isVariableReadBeforeKill",
            "method_body": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }",
            "start_line": 338,
            "end_line": 382,
            "buggy_lines": [
                372,
                378
            ]
        },
        "buggy_method_src": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }",
        "test_stack": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2\njunit.framework.AssertionFailedError:\nExpected: function FUNC(param1,param2){var a;a=1;if(2||(a=3)||a);}\nResult: function FUNC(param1,param2){var a;a=1;if((a=2)||(a=3)||a);}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                EXPR_RESULT 1 [sourcename: expected0]\n                    ASSIGN 1 [sourcename: expected0]\n                        NAME a 1 [sourcename: expected0]\n                        NUMBER 1.0 1 [sourcename: expected0]\n                IF 1 [sourcename: expected0]\n                    OR 1 [sourcename: expected0]\n                        NUMBER 2.0 1 [sourcename: expected0] [parenthesized: true]\n                        OR 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0] [parenthesized: true]\n                                NAME a 1 [sourcename: expected0]\n                                NUMBER 3.0 1 [sourcename: expected0]\n                            NAME a 1 [sourcename: expected0] [parenthesized: true]\n                    BLOCK 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                EXPR_RESULT 1 [sourcename: testcode]\n                    ASSIGN 1 [sourcename: testcode]\n                        NAME a 1 [sourcename: testcode]\n                        NUMBER 1.0 1 [sourcename: testcode]\n                IF 1 [sourcename: testcode]\n                    OR 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n                            NAME a 1 [sourcename: testcode]\n                            NUMBER 2.0 1 [sourcename: testcode]\n                        OR 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n                                NAME a 1 [sourcename: testcode]\n                                NUMBER 3.0 1 [sourcename: testcode]\n                            NAME a 1 [sourcename: testcode] [parenthesized: true]\n                    BLOCK 1 [sourcename: testcode]\n\n\nSubtree1: NUMBER 2.0 1 [sourcename: expected0] [parenthesized: true]\n\n\nSubtree2: ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n    NAME a 1 [sourcename: testcode]\n    NUMBER 2.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testInExpression2(DeadAssignmentsEliminationTest.java:459)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b\njunit.framework.AssertionFailedError:\nExpected: function FUNC(param1,param2){var a,b;f(b=true)||f(b=false)?a=b:a=null;return a}\nResult: function FUNC(param1,param2){var a,b;f(true)||f(b=false)?a=b:a=null;return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    HOOK 2 [sourcename: expected0]\n                        OR 2 [sourcename: expected0] [parenthesized: true]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NULL 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    HOOK 2 [sourcename: testcode]\n                        OR 2 [sourcename: testcode] [parenthesized: true]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NULL 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384b(DeadAssignmentsEliminationTest.java:501)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c\njunit.framework.AssertionFailedError:\nExpected: function FUNC(param1,param2){var a,b;(a?f(b=true):f(b=false))&&(a=b);return a}\nResult: function FUNC(param1,param2){var a,b;(a?f(true):f(b=false))&&(a=b);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    AND 2 [sourcename: expected0]\n                        HOOK 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    AND 2 [sourcename: testcode]\n                        HOOK 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384c(DeadAssignmentsEliminationTest.java:508)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d\njunit.framework.AssertionFailedError:\nExpected: function FUNC(param1,param2){var a,b;(f(b=true)||f(b=false))&&(a=b);return a}\nResult: function FUNC(param1,param2){var a,b;(f(true)||f(b=false))&&(a=b);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    AND 2 [sourcename: expected0]\n                        OR 2 [sourcename: expected0] [parenthesized: true]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    AND 2 [sourcename: testcode]\n                        OR 2 [sourcename: testcode] [parenthesized: true]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384d(DeadAssignmentsEliminationTest.java:515)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "inFunction(\n",
        "buggy_lines_in_method": [
            35,
            41
        ],
        "buggy_statements": [
            "          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION",
            "      }"
        ],
        "buggy_method_src_endswith_buggy_statement": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }"
    }
]