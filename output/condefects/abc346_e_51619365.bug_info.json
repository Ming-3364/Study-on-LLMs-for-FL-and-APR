[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        long h = sc.nextLong();\n        long w = sc.nextLong();\n        int m = sc.nextInt();\n        int[] t = new int[m];\n        int[] a = new int[m];\n        int[] x = new int[m];\n        for(int i=0; i<m; ++i) {\n            t[i] = sc.nextInt();\n            a[i] = sc.nextInt();\n            x[i] = sc.nextInt();\n        }\n\n        Set<Integer> cols = new TreeSet<>();\n        Set<Integer> rows = new TreeSet<>();\n        Map<Integer, Long> ans = new TreeMap<>();\n        ans.put(0, h * w);\n        for(int i=m-1; i>=0; --i) {\n            if(t[i] == 1) {\n                if(rows.contains(a[i])) continue;\n\n                if(w - cols.size() > 0) {\n                    long add = w - cols.size();\n                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);\n                    ans.put(x[i], base + add);\n                    ans.put(0, ans.get(0) - base - add);\n                }\n\n                rows.add(a[i]);\n            } else if(t[i] == 2) {\n                if(cols.contains(a[i])) continue;\n\n                if(h - rows.size() > 0) {\n                    long add = h - rows.size();\n                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);\n                    ans.put(x[i], base + add);\n                    ans.put(0, ans.get(0) - add);\n                }\n\n                cols.add(a[i]);\n            }\n        }\n\n        if(ans.get(0) < 1) {\n            ans.remove(0);\n        }\n\n        System.out.println(ans.size());\n        for(var e : ans.entrySet()) {\n            System.out.println(e.getKey() + \" \" + e.getValue());\n        }\n    }",
            "start_line": 4,
            "end_line": 57
        },
        "buggy_method_src": "public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        long h = sc.nextLong();\n        long w = sc.nextLong();\n        int m = sc.nextInt();\n        int[] t = new int[m];\n        int[] a = new int[m];\n        int[] x = new int[m];\n        for(int i=0; i<m; ++i) {\n            t[i] = sc.nextInt();\n            a[i] = sc.nextInt();\n            x[i] = sc.nextInt();\n        }\n\n        Set<Integer> cols = new TreeSet<>();\n        Set<Integer> rows = new TreeSet<>();\n        Map<Integer, Long> ans = new TreeMap<>();\n        ans.put(0, h * w);\n        for(int i=m-1; i>=0; --i) {\n            if(t[i] == 1) {\n                if(rows.contains(a[i])) continue;\n\n                if(w - cols.size() > 0) {\n                    long add = w - cols.size();\n                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);\n                    ans.put(x[i], base + add);\n                    ans.put(0, ans.get(0) - base - add);\n                }\n\n                rows.add(a[i]);\n            } else if(t[i] == 2) {\n                if(cols.contains(a[i])) continue;\n\n                if(h - rows.size() > 0) {\n                    long add = h - rows.size();\n                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);\n                    ans.put(x[i], base + add);\n                    ans.put(0, ans.get(0) - add);\n                }\n\n                cols.add(a[i]);\n            }\n        }\n\n        if(ans.get(0) < 1) {\n            ans.remove(0);\n        }\n\n        System.out.println(ans.size());\n        for(var e : ans.entrySet()) {\n            System.out.println(e.getKey() + \" \" + e.getValue());\n        }\n    }",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            28
        ],
        "buggy_statements": [
            "                    ans.put(0, ans.get(0) - base - add);"
        ],
        "buggy_method_src_endswith_buggy_statement": "public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        long h = sc.nextLong();\n        long w = sc.nextLong();\n        int m = sc.nextInt();\n        int[] t = new int[m];\n        int[] a = new int[m];\n        int[] x = new int[m];\n        for(int i=0; i<m; ++i) {\n            t[i] = sc.nextInt();\n            a[i] = sc.nextInt();\n            x[i] = sc.nextInt();\n        }\n\n        Set<Integer> cols = new TreeSet<>();\n        Set<Integer> rows = new TreeSet<>();\n        Map<Integer, Long> ans = new TreeMap<>();\n        ans.put(0, h * w);\n        for(int i=m-1; i>=0; --i) {\n            if(t[i] == 1) {\n                if(rows.contains(a[i])) continue;\n\n                if(w - cols.size() > 0) {\n                    long add = w - cols.size();\n                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);\n                    ans.put(x[i], base + add);\n                    ans.put(0, ans.get(0) - base - add);"
    }
]