[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "public static void main(String[] args){\n        //PrintWriter out = new PrintWriter(System.out);\n        InputReader sc=new InputReader(System.in);\n        int n = sc.nextInt();\n        int l = sc.nextInt();\n        int r = sc.nextInt();\n        int N = (1 << n) + 1;\n        graph G = new graph(N);\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < n; j++) {\n                int s = 1 << j;\n                if (i % s == 0 && i + s < N) {\n                    G.addUndirectedEdge(i, i + s, 1);\n                }\n            }\n        }\n        int[] par = new int[N];\n        int[] L = G.bfs(l, par);\n        ArrayDeque<Integer> q = new ArrayDeque<>();\n        int now = r + 1;\n        while (now != l) {\n            q.addFirst(now);\n            now = par[now];\n        }\n        long ans = 0;\n        UnionFindTree ut = new UnionFindTree(N);\n        while (!q.isEmpty()) {\n            int v = q.poll();\n            int x = Integer.toBinaryString(Math.abs(v - now)).length() - 1;\n            int y = Math.min(now, v) / (1 << x);\n            System.out.println(\"? \" + x + \" \" + y);\n            System.out.flush();\n            int z = sc.nextInt();\n            if (v - now < 0) {\n                ans -= z;\n            }else {\n                ans += z;\n            }\n            now = v;\n        }\n        System.out.println(\"!\" + \" \" + ((ans % 100) + 100) % 100);\n    }",
            "start_line": 17,
            "end_line": 58
        },
        "buggy_method_src": "public static void main(String[] args){\n        //PrintWriter out = new PrintWriter(System.out);\n        InputReader sc=new InputReader(System.in);\n        int n = sc.nextInt();\n        int l = sc.nextInt();\n        int r = sc.nextInt();\n        int N = (1 << n) + 1;\n        graph G = new graph(N);\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < n; j++) {\n                int s = 1 << j;\n                if (i % s == 0 && i + s < N) {\n                    G.addUndirectedEdge(i, i + s, 1);\n                }\n            }\n        }\n        int[] par = new int[N];\n        int[] L = G.bfs(l, par);\n        ArrayDeque<Integer> q = new ArrayDeque<>();\n        int now = r + 1;\n        while (now != l) {\n            q.addFirst(now);\n            now = par[now];\n        }\n        long ans = 0;\n        UnionFindTree ut = new UnionFindTree(N);\n        while (!q.isEmpty()) {\n            int v = q.poll();\n            int x = Integer.toBinaryString(Math.abs(v - now)).length() - 1;\n            int y = Math.min(now, v) / (1 << x);\n            System.out.println(\"? \" + x + \" \" + y);\n            System.out.flush();\n            int z = sc.nextInt();\n            if (v - now < 0) {\n                ans -= z;\n            }else {\n                ans += z;\n            }\n            now = v;\n        }\n        System.out.println(\"!\" + \" \" + ((ans % 100) + 100) % 100);\n    }",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            10
        ],
        "buggy_statements": [
            "            for (int j = 0; j < n; j++) {"
        ],
        "buggy_method_src_endswith_buggy_statement": "public static void main(String[] args){\n        //PrintWriter out = new PrintWriter(System.out);\n        InputReader sc=new InputReader(System.in);\n        int n = sc.nextInt();\n        int l = sc.nextInt();\n        int r = sc.nextInt();\n        int N = (1 << n) + 1;\n        graph G = new graph(N);\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < n; j++) {"
    }
]