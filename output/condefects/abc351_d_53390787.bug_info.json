[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "public static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint row = Integer.parseInt(sc.next());\n\t\tint column = Integer.parseInt(sc.next());\n\n\t\tList<String> s = new ArrayList<>();\n\t\tfor (int i = 0; i < row; i++) {\n\t\t\ts.add(sc.next());\n\t\t}\n\n\t\tList<Character> c = new ArrayList<>();\n\t\tfor (int i = 0; i < row; i++) {\n\t\t\tfor (int j = 0; j < column; j++) {\n\t\t\t\tc.add(s.get(i).charAt(j));\n\t\t\t}\n\t\t}\n\n\t\tint vertex = row * column;\n\n\t\tList<List<Integer>> graph = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tgraph.add(new ArrayList<>());\n\t\t}\n\n\t\tList<Boolean> troutInInfluence = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\ttroutInInfluence.add(false);\n\t\t}\n\n\t\tif (row > 1 && column > 1) {\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == (row - 1) * column) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i == row * column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if ((row - 1) * column < i && i < row * column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i % column == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i % column == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (0 < i % column && i % column < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (row == 1 && column == 1) {\n\t\t\tif (c.get(0) == '#') {\n\t\t\t\ttroutInInfluence.set(0, true);\n\t\t\t}\n\t\t} else if (row == 1) {\n\t\t\tfor (int i = 0; i < column; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (column == 1) {\n\t\t\tfor (int i = 0; i < row; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == row - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (0 < i && i < row - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (row > 1 && column > 1) {\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(column + 1);\n\t\t\t\t\t} else if (i == (row - 1) * column) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i == row * column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if ((row - 1) * column < i && i < row * column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i % column == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i % column == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (0 < i % column && i % column < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (row == 1 && column == 1) {\n\t\t} else if (row == 1) {\n\t\t\tfor (int i = 0; i < column; i++) {\n\t\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (column == 1) {\n\t\t\tfor (int i = 0; i < row; i++) {\n\t\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (i == row - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (0 < i && i < row - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t \n\t\tList<Boolean> used = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tused.add(false);\n\t\t}\n\n\t\tList<Integer> last = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tlast.add(0);\n\t\t}\n\n\t\tint time = 0;\n\t\tint ans = 1;\n\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\tif (used.get(i) == true) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttime++;\n\t\t\t\tint cnt = 0;\n\t\t\t\tQueue<Integer> queue = new LinkedList<>();\n\t\t\t\tqueue.add(i);\n\t\t\t\tused.set(i, true);\n\t\t\t\twhile (!queue.isEmpty()) {\n\t\t\t\t\tint position = queue.remove();\n\t\t\t\t\tcnt++;\n\t\t\t\t\tfor (int j = 0; j < graph.get(position).size(); j++) {\n\t\t\t\t\t\tint next = graph.get(position).get(j);\n\t\t\t\t\t\tif (used.get(next) == true) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (troutInInfluence.get(next) == true) {\n\t\t\t\t\t\t\tif (last.get(next) != time) {\n\t\t\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\t\t\tlast.set(next, time);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqueue.add(next);\n\t\t\t\t\t\tused.set(next, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tans = Math.max(ans, cnt);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}",
            "start_line": 4,
            "end_line": 233
        },
        "buggy_method_src": "public static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint row = Integer.parseInt(sc.next());\n\t\tint column = Integer.parseInt(sc.next());\n\n\t\tList<String> s = new ArrayList<>();\n\t\tfor (int i = 0; i < row; i++) {\n\t\t\ts.add(sc.next());\n\t\t}\n\n\t\tList<Character> c = new ArrayList<>();\n\t\tfor (int i = 0; i < row; i++) {\n\t\t\tfor (int j = 0; j < column; j++) {\n\t\t\t\tc.add(s.get(i).charAt(j));\n\t\t\t}\n\t\t}\n\n\t\tint vertex = row * column;\n\n\t\tList<List<Integer>> graph = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tgraph.add(new ArrayList<>());\n\t\t}\n\n\t\tList<Boolean> troutInInfluence = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\ttroutInInfluence.add(false);\n\t\t}\n\n\t\tif (row > 1 && column > 1) {\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == (row - 1) * column) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i == row * column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if ((row - 1) * column < i && i < row * column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i % column == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i % column == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (0 < i % column && i % column < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (row == 1 && column == 1) {\n\t\t\tif (c.get(0) == '#') {\n\t\t\t\ttroutInInfluence.set(0, true);\n\t\t\t}\n\t\t} else if (row == 1) {\n\t\t\tfor (int i = 0; i < column; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (column == 1) {\n\t\t\tfor (int i = 0; i < row; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == row - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (0 < i && i < row - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (row > 1 && column > 1) {\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(column + 1);\n\t\t\t\t\t} else if (i == (row - 1) * column) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i == row * column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if ((row - 1) * column < i && i < row * column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i % column == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i % column == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (0 < i % column && i % column < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (row == 1 && column == 1) {\n\t\t} else if (row == 1) {\n\t\t\tfor (int i = 0; i < column; i++) {\n\t\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (column == 1) {\n\t\t\tfor (int i = 0; i < row; i++) {\n\t\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (i == row - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (0 < i && i < row - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t \n\t\tList<Boolean> used = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tused.add(false);\n\t\t}\n\n\t\tList<Integer> last = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tlast.add(0);\n\t\t}\n\n\t\tint time = 0;\n\t\tint ans = 1;\n\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\tif (used.get(i) == true) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttime++;\n\t\t\t\tint cnt = 0;\n\t\t\t\tQueue<Integer> queue = new LinkedList<>();\n\t\t\t\tqueue.add(i);\n\t\t\t\tused.set(i, true);\n\t\t\t\twhile (!queue.isEmpty()) {\n\t\t\t\t\tint position = queue.remove();\n\t\t\t\t\tcnt++;\n\t\t\t\t\tfor (int j = 0; j < graph.get(position).size(); j++) {\n\t\t\t\t\t\tint next = graph.get(position).get(j);\n\t\t\t\t\t\tif (used.get(next) == true) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (troutInInfluence.get(next) == true) {\n\t\t\t\t\t\t\tif (last.get(next) != time) {\n\t\t\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\t\t\tlast.set(next, time);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqueue.add(next);\n\t\t\t\t\t\tused.set(next, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tans = Math.max(ans, cnt);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            128
        ],
        "buggy_statements": [
            "\t\t\t\t\t\tgraph.get(i).add(column + 1);"
        ],
        "buggy_method_src_endswith_buggy_statement": "public static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint row = Integer.parseInt(sc.next());\n\t\tint column = Integer.parseInt(sc.next());\n\n\t\tList<String> s = new ArrayList<>();\n\t\tfor (int i = 0; i < row; i++) {\n\t\t\ts.add(sc.next());\n\t\t}\n\n\t\tList<Character> c = new ArrayList<>();\n\t\tfor (int i = 0; i < row; i++) {\n\t\t\tfor (int j = 0; j < column; j++) {\n\t\t\t\tc.add(s.get(i).charAt(j));\n\t\t\t}\n\t\t}\n\n\t\tint vertex = row * column;\n\n\t\tList<List<Integer>> graph = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tgraph.add(new ArrayList<>());\n\t\t}\n\n\t\tList<Boolean> troutInInfluence = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\ttroutInInfluence.add(false);\n\t\t}\n\n\t\tif (row > 1 && column > 1) {\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == (row - 1) * column) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i == row * column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if ((row - 1) * column < i && i < row * column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i % column == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i % column == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (0 < i % column && i % column < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (row == 1 && column == 1) {\n\t\t\tif (c.get(0) == '#') {\n\t\t\t\ttroutInInfluence.set(0, true);\n\t\t\t}\n\t\t} else if (row == 1) {\n\t\t\tfor (int i = 0; i < column; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + 1, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - 1, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (column == 1) {\n\t\t\tfor (int i = 0; i < row; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == row - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t} else if (0 < i && i < row - 1) {\n\t\t\t\t\t\ttroutInInfluence.set(i, true);\n\t\t\t\t\t\ttroutInInfluence.set(i + column, true);\n\t\t\t\t\t\ttroutInInfluence.set(i - column, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (row > 1 && column > 1) {\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tif (troutInInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(column + 1);"
    }
]