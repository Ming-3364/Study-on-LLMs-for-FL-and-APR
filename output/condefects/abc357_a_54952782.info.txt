
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'public static void main(String[] args) {\n\t\t// TODO 自動生成されたメソッド・スタブ\n\t\tScanner sc = new Scanner(System.in);\n\t\t//宇宙人の人数\n\t\tint N = sc.nextInt();\n\t\t//消毒液が消毒できる手の数\n\t\tint M = sc.nextInt();\n\t\t\n\t\tint[] H = new int[N];\n\t\tfor (int i = 0;i < N ; i ++) {\n\t\t\tH[i] = sc.nextInt();\n\t\t}\n\t\tfor (int j = 1 ; j < N; j ++) {\n\t\t\tM = M - H[j];\n\t\t\tif ( M <0) {\n\t\t\t\tSystem.out.println(j);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t} System.out.println(N);\t\t\n\t}\n\n}\n', 'start_line': 7, 'end_line': 26}
================== buggy_method_src ==================
public static void main(String[] args) {
		// TODO 自動生成されたメソッド・スタブ
		Scanner sc = new Scanner(System.in);
		//宇宙人の人数
		int N = sc.nextInt();
		//消毒液が消毒できる手の数
		int M = sc.nextInt();
		
		int[] H = new int[N];
		for (int i = 0;i < N ; i ++) {
			H[i] = sc.nextInt();
		}
		for (int j = 1 ; j < N; j ++) {
			M = M - H[j];
			if ( M <0) {
				System.out.println(j);
				return ;
			}
		} System.out.println(N);		
	}

}

================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[13]
================== buggy_statements ==================
['\t\tfor (int j = 1 ; j < N; j ++) {']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] args) {
		// TODO 自動生成されたメソッド・スタブ
		Scanner sc = new Scanner(System.in);
		//宇宙人の人数
		int N = sc.nextInt();
		//消毒液が消毒できる手の数
		int M = sc.nextInt();
		
		int[] H = new int[N];
		for (int i = 0;i < N ; i ++) {
			H[i] = sc.nextInt();
		}
		for (int j = 1 ; j < N; j ++) {