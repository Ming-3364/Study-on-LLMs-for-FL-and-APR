
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'calc', 'method_body': "private int calc(char c){\n    int[][] len = new int[N][N];\n    for (var is:len)\n      fill(is,infI);\n\n    Deque<int[]> que = new ArrayDeque<>();\n    if (c == 'R') {\n      if (S[0][0] == c) {\n        len[0][0] = 0;\n        que.add(new int[]{0, 0, 0});\n      } else {\n        len[0][0] = 1;\n        que.add(new int[]{0, 0, 1});\n      }\n    } else if (S[0][0] == c) {\n      len[0][N -1] = 0;\n      que.add(new int[]{0, N -1, 0});\n    } else {\n      len[0][N -1] = 1;\n      que.add(new int[]{0, N -1, 1});\n    }\n\n    while (!que.isEmpty()) {\n      var cur = que.poll();\n      int i = cur[0];\n      int j = cur[1];\n\n      List<int[]> sur = new ArrayList<>();\n      if (0 < i)\n        sur.add(new int[]{i -1, j});\n      if (0 < j)\n        sur.add(new int[]{i, j -1});\n      if (i +1 < N)\n        sur.add(new int[]{i +1, j});\n      if (j +1 < N)\n        sur.add(new int[]{i, j +1});\n\n      for (var s:sur) {\n        int l = S[s[0]][s[1]] == c ? 0 : 1;\n        if (len[s[0]][s[1]] > cur[2] +l) {\n          len[s[0]][s[1]] = cur[2] +l;\n          if (l == 0)\n            que.addFirst(new int[]{s[0], s[1], len[s[0]][s[1]]});\n          else\n            que.addLast(new int[]{s[0], s[1], len[s[0]][s[1]]});\n        }\n      }\n    }\n\n    return c == 'R' ? len[N -1][N -1] : len[N -1][0];\n  }", 'start_line': 34, 'end_line': 84}
================== buggy_method_src ==================
private int calc(char c){
    int[][] len = new int[N][N];
    for (var is:len)
      fill(is,infI);

    Deque<int[]> que = new ArrayDeque<>();
    if (c == 'R') {
      if (S[0][0] == c) {
        len[0][0] = 0;
        que.add(new int[]{0, 0, 0});
      } else {
        len[0][0] = 1;
        que.add(new int[]{0, 0, 1});
      }
    } else if (S[0][0] == c) {
      len[0][N -1] = 0;
      que.add(new int[]{0, N -1, 0});
    } else {
      len[0][N -1] = 1;
      que.add(new int[]{0, N -1, 1});
    }

    while (!que.isEmpty()) {
      var cur = que.poll();
      int i = cur[0];
      int j = cur[1];

      List<int[]> sur = new ArrayList<>();
      if (0 < i)
        sur.add(new int[]{i -1, j});
      if (0 < j)
        sur.add(new int[]{i, j -1});
      if (i +1 < N)
        sur.add(new int[]{i +1, j});
      if (j +1 < N)
        sur.add(new int[]{i, j +1});

      for (var s:sur) {
        int l = S[s[0]][s[1]] == c ? 0 : 1;
        if (len[s[0]][s[1]] > cur[2] +l) {
          len[s[0]][s[1]] = cur[2] +l;
          if (l == 0)
            que.addFirst(new int[]{s[0], s[1], len[s[0]][s[1]]});
          else
            que.addLast(new int[]{s[0], s[1], len[s[0]][s[1]]});
        }
      }
    }

    return c == 'R' ? len[N -1][N -1] : len[N -1][0];
  }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[15]
================== buggy_statements ==================
['    } else if (S[0][0] == c) {']
================== buggy_method_src_endswith_buggy_statement ==================
private int calc(char c){
    int[][] len = new int[N][N];
    for (var is:len)
      fill(is,infI);

    Deque<int[]> que = new ArrayDeque<>();
    if (c == 'R') {
      if (S[0][0] == c) {
        len[0][0] = 0;
        que.add(new int[]{0, 0, 0});
      } else {
        len[0][0] = 1;
        que.add(new int[]{0, 0, 1});
      }
    } else if (S[0][0] == c) {