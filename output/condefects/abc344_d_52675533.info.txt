
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'public static final void main(String[] args) {\n    final String T = getNext();\n    final int Tlen = T.length();\n    final int N = getNextInt();\n    final String[][] S = new String[N][];\n    for(int row = 0; row < N; row++) {\n      final int A = getNextInt();\n      S[row] = new String[A];\n      for(int col = 0; col < A; col++) {\n        S[row][col] = getNext();\n      }\n    }\n    final int[][] dp = Stream.generate(\n        () -> IntStream.generate(() -> Integer.MAX_VALUE).limit(Tlen + 1).toArray()\n        ).limit(N).toArray(int[][]::new);\n    dp[0][0] = 0;\n    for(int col = 0; col < S[0].length; col++) {\n      if(T.startsWith(S[0][col])) {\n        dp[0][S[0][col].length()] = 1;\n      }\n    }\n    for(int row = 1; row < N; row++) {\n      for(int tPos = 0; tPos < Tlen; tPos++) {\n        if(dp[row - 1][tPos] < Integer.MAX_VALUE) {\n          dp[row][tPos] = Math.min(dp[row][tPos], dp[row - 1][tPos]);\n          for(int col = 0; col < S[row].length; col++) {\n            if(T.substring(tPos).startsWith(S[row][col])) {\n              dp[row][tPos + S[row][col].length()] = Math.min(dp[row][tPos + S[row][col].length()], dp[row - 1][tPos] + 1);\n            }\n          }\n        }\n      }\n      dp[row - 1][Tlen] = Math.min(dp[row][Tlen], dp[row - 1][Tlen]);\n    }\n    println(dp[N - 1][Tlen] < Integer.MAX_VALUE ? dp[N - 1][Tlen] : -1);\n    flush();\n  }', 'start_line': 11, 'end_line': 47}
================== buggy_method_src ==================
public static final void main(String[] args) {
    final String T = getNext();
    final int Tlen = T.length();
    final int N = getNextInt();
    final String[][] S = new String[N][];
    for(int row = 0; row < N; row++) {
      final int A = getNextInt();
      S[row] = new String[A];
      for(int col = 0; col < A; col++) {
        S[row][col] = getNext();
      }
    }
    final int[][] dp = Stream.generate(
        () -> IntStream.generate(() -> Integer.MAX_VALUE).limit(Tlen + 1).toArray()
        ).limit(N).toArray(int[][]::new);
    dp[0][0] = 0;
    for(int col = 0; col < S[0].length; col++) {
      if(T.startsWith(S[0][col])) {
        dp[0][S[0][col].length()] = 1;
      }
    }
    for(int row = 1; row < N; row++) {
      for(int tPos = 0; tPos < Tlen; tPos++) {
        if(dp[row - 1][tPos] < Integer.MAX_VALUE) {
          dp[row][tPos] = Math.min(dp[row][tPos], dp[row - 1][tPos]);
          for(int col = 0; col < S[row].length; col++) {
            if(T.substring(tPos).startsWith(S[row][col])) {
              dp[row][tPos + S[row][col].length()] = Math.min(dp[row][tPos + S[row][col].length()], dp[row - 1][tPos] + 1);
            }
          }
        }
      }
      dp[row - 1][Tlen] = Math.min(dp[row][Tlen], dp[row - 1][Tlen]);
    }
    println(dp[N - 1][Tlen] < Integer.MAX_VALUE ? dp[N - 1][Tlen] : -1);
    flush();
  }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[33]
================== buggy_statements ==================
['      dp[row - 1][Tlen] = Math.min(dp[row][Tlen], dp[row - 1][Tlen]);']
================== buggy_method_src_endswith_buggy_statement ==================
public static final void main(String[] args) {
    final String T = getNext();
    final int Tlen = T.length();
    final int N = getNextInt();
    final String[][] S = new String[N][];
    for(int row = 0; row < N; row++) {
      final int A = getNextInt();
      S[row] = new String[A];
      for(int col = 0; col < A; col++) {
        S[row][col] = getNext();
      }
    }
    final int[][] dp = Stream.generate(
        () -> IntStream.generate(() -> Integer.MAX_VALUE).limit(Tlen + 1).toArray()
        ).limit(N).toArray(int[][]::new);
    dp[0][0] = 0;
    for(int col = 0; col < S[0].length; col++) {
      if(T.startsWith(S[0][col])) {
        dp[0][S[0][col].length()] = 1;
      }
    }
    for(int row = 1; row < N; row++) {
      for(int tPos = 0; tPos < Tlen; tPos++) {
        if(dp[row - 1][tPos] < Integer.MAX_VALUE) {
          dp[row][tPos] = Math.min(dp[row][tPos], dp[row - 1][tPos]);
          for(int col = 0; col < S[row].length; col++) {
            if(T.substring(tPos).startsWith(S[row][col])) {
              dp[row][tPos + S[row][col].length()] = Math.min(dp[row][tPos + S[row][col].length()], dp[row - 1][tPos] + 1);
            }
          }
        }
      }
      dp[row - 1][Tlen] = Math.min(dp[row][Tlen], dp[row - 1][Tlen]);