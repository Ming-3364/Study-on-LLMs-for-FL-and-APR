
================== buggy_file ==================
src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
================== buggy_method ==================
{'method_name': 'isPrototypePropertyAssign', 'method_body': 'private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP\n          ) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals("prototype")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }', 'start_line': 314, 'end_line': 334, 'buggy_lines': [318]}
================== buggy_method_src ==================
private boolean isPrototypePropertyAssign(Node assign) {
      Node n = assign.getFirstChild();
      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
          && n.getType() == Token.GETPROP
          ) {
        // We want to exclude the assignment itself from the usage list
        boolean isChainedProperty =
            n.getFirstChild().getType() == Token.GETPROP;

        if (isChainedProperty) {
          Node child = n.getFirstChild().getFirstChild().getNext();

          if (child.getType() == Token.STRING &&
              child.getString().equals("prototype")) {
            return true;
          }
        }
      }

      return false;
    }
================== test_stack ==================
com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7
junit.framework.AssertionFailedError:
Expected: function e(){}e.prototype["alias1"]=e.prototype.method1=function(){this.method2()};e.prototype.method2=function(){}
Result: function e(){}e.prototype["alias1"]=e.prototype.method1=function(){this.method2()}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [sourcename: expected0] [synthetic: 1]
        FUNCTION e 1 [sourcename: expected0]
            NAME e 1 [sourcename: expected0]
            LP 1 [sourcename: expected0]
            BLOCK 1 [sourcename: expected0]
        EXPR_RESULT 1 [sourcename: expected0]
            ASSIGN 1 [sourcename: expected0]
                GETELEM 1 [sourcename: expected0]
                    GETPROP 1 [sourcename: expected0]
                        NAME e 1 [sourcename: expected0]
                        STRING prototype 1 [sourcename: expected0]
                    STRING alias1 1 [sourcename: expected0]
                ASSIGN 1 [sourcename: expected0]
                    GETPROP 1 [sourcename: expected0]
                        GETPROP 1 [sourcename: expected0]
                            NAME e 1 [sourcename: expected0]
                            STRING prototype 1 [sourcename: expected0]
                        STRING method1 1 [sourcename: expected0]
                    FUNCTION  1 [sourcename: expected0]
                        NAME  1 [sourcename: expected0]
                        LP 1 [sourcename: expected0]
                        BLOCK 1 [sourcename: expected0]
                            EXPR_RESULT 1 [sourcename: expected0]
                                CALL 1 [sourcename: expected0]
                                    GETPROP 1 [sourcename: expected0]
                                        THIS 1 [sourcename: expected0]
                                        STRING method2 1 [sourcename: expected0]
        EXPR_RESULT 1 [sourcename: expected0]
            ASSIGN 1 [sourcename: expected0]
                GETPROP 1 [sourcename: expected0]
                    GETPROP 1 [sourcename: expected0]
                        NAME e 1 [sourcename: expected0]
                        STRING prototype 1 [sourcename: expected0]
                    STRING method2 1 [sourcename: expected0]
                FUNCTION  1 [sourcename: expected0]
                    NAME  1 [sourcename: expected0]
                    LP 1 [sourcename: expected0]
                    BLOCK 1 [sourcename: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [sourcename: testcode] [synthetic: 1]
        FUNCTION e 1 [sourcename: testcode]
            NAME e 1 [sourcename: testcode]
            LP 1 [sourcename: testcode]
            BLOCK 1 [sourcename: testcode]
        EXPR_RESULT 1 [sourcename: testcode]
            ASSIGN 1 [sourcename: testcode]
                GETELEM 1 [sourcename: testcode]
                    GETPROP 1 [sourcename: testcode]
                        NAME e 1 [sourcename: testcode]
                        STRING prototype 1 [sourcename: testcode]
                    STRING alias1 1 [sourcename: testcode]
                ASSIGN 1 [sourcename: testcode]
                    GETPROP 1 [sourcename: testcode]
                        GETPROP 1 [sourcename: testcode]
                            NAME e 1 [sourcename: testcode]
                            STRING prototype 1 [sourcename: testcode]
                        STRING method1 1 [sourcename: testcode]
                    FUNCTION  1 [sourcename: testcode]
                        NAME  1 [sourcename: testcode]
                        LP 1 [sourcename: testcode]
                        BLOCK 1 [sourcename: testcode]
                            EXPR_RESULT 1 [sourcename: testcode]
                                CALL 1 [sourcename: testcode]
                                    GETPROP 1 [sourcename: testcode]
                                        THIS 1 [sourcename: testcode]
                                        STRING method2 1 [sourcename: testcode]


Subtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]
    FUNCTION e 1 [sourcename: expected0]
        NAME e 1 [sourcename: expected0]
        LP 1 [sourcename: expected0]
        BLOCK 1 [sourcename: expected0]
    EXPR_RESULT 1 [sourcename: expected0]
        ASSIGN 1 [sourcename: expected0]
            GETELEM 1 [sourcename: expected0]
                GETPROP 1 [sourcename: expected0]
                    NAME e 1 [sourcename: expected0]
                    STRING prototype 1 [sourcename: expected0]
                STRING alias1 1 [sourcename: expected0]
            ASSIGN 1 [sourcename: expected0]
                GETPROP 1 [sourcename: expected0]
                    GETPROP 1 [sourcename: expected0]
                        NAME e 1 [sourcename: expected0]
                        STRING prototype 1 [sourcename: expected0]
                    STRING method1 1 [sourcename: expected0]
                FUNCTION  1 [sourcename: expected0]
                    NAME  1 [sourcename: expected0]
                    LP 1 [sourcename: expected0]
                    BLOCK 1 [sourcename: expected0]
                        EXPR_RESULT 1 [sourcename: expected0]
                            CALL 1 [sourcename: expected0]
                                GETPROP 1 [sourcename: expected0]
                                    THIS 1 [sourcename: expected0]
                                    STRING method2 1 [sourcename: expected0]
    EXPR_RESULT 1 [sourcename: expected0]
        ASSIGN 1 [sourcename: expected0]
            GETPROP 1 [sourcename: expected0]
                GETPROP 1 [sourcename: expected0]
                    NAME e 1 [sourcename: expected0]
                    STRING prototype 1 [sourcename: expected0]
                STRING method2 1 [sourcename: expected0]
            FUNCTION  1 [sourcename: expected0]
                NAME  1 [sourcename: expected0]
                LP 1 [sourcename: expected0]
                BLOCK 1 [sourcename: expected0]


Subtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]
    FUNCTION e 1 [sourcename: testcode]
        NAME e 1 [sourcename: testcode]
        LP 1 [sourcename: testcode]
        BLOCK 1 [sourcename: testcode]
    EXPR_RESULT 1 [sourcename: testcode]
        ASSIGN 1 [sourcename: testcode]
            GETELEM 1 [sourcename: testcode]
                GETPROP 1 [sourcename: testcode]
                    NAME e 1 [sourcename: testcode]
                    STRING prototype 1 [sourcename: testcode]
                STRING alias1 1 [sourcename: testcode]
            ASSIGN 1 [sourcename: testcode]
                GETPROP 1 [sourcename: testcode]
                    GETPROP 1 [sourcename: testcode]
                        NAME e 1 [sourcename: testcode]
                        STRING prototype 1 [sourcename: testcode]
                    STRING method1 1 [sourcename: testcode]
                FUNCTION  1 [sourcename: testcode]
                    NAME  1 [sourcename: testcode]
                    LP 1 [sourcename: testcode]
                    BLOCK 1 [sourcename: testcode]
                        EXPR_RESULT 1 [sourcename: testcode]
                            CALL 1 [sourcename: testcode]
                                GETPROP 1 [sourcename: testcode]
                                    THIS 1 [sourcename: testcode]
                                    STRING method2 1 [sourcename: testcode]

	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at junit.framework.Assert.assertNull(Assert.java:277)
	at junit.framework.TestCase.assertNull(TestCase.java:447)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:537)
	at com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest.testAliasing7(RemoveUnusedPrototypePropertiesTest.java:189)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

================== test_assert ==================
testSame("function e(){}" +

================== buggy_lines_in_method ==================
[5]
================== buggy_statements ==================
['          ) {']
================== buggy_method_src_endswith_buggy_statement ==================
private boolean isPrototypePropertyAssign(Node assign) {
      Node n = assign.getFirstChild();
      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
          && n.getType() == Token.GETPROP
          ) {