
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'getValue', 'method_body': 'private int[] getValue(int idx, int min, int max, int left, int right) {\n            if (left <= min && max <= right) {\n                return new int[]{firsts[idx], seconds[idx]};\n            }\n            if (right <= min || max <= left) {\n                return new int[2];\n            }\n            int[] value1 = getValue(idx * 2 + 1, min, (min + max) / 2, left, right);\n            int[] value2 = getValue(idx * 2 + 2, (min + max) / 2, max, left, right);\n            int[] ans  = new int[2];\n            if (value1[0] == value2[0]) {\n                ans[0] = value1[0];\n                if (value1[1] >= value2[1]) {\n                    ans[1] = value1[1];\n                } else {\n                    ans[1] = value2[1];\n                }\n            } else if (value1[0] > value2[0]) {\n                ans[0] = value1[0];\n                if (value1[1] >= value2[0]) {\n                    ans[1] = value1[1];\n                } else {\n                    ans[1] = value2[0];\n                }\n            } else {\n                ans[1] = value2[0];\n                if (value1[0] >= value2[1]) {\n                    ans[1] = value1[0];\n                } else {\n                    ans[1] = value2[1];\n                }\n            }\n            return ans;\n        }', 'start_line': 103, 'end_line': 136}
================== buggy_method_src ==================
private int[] getValue(int idx, int min, int max, int left, int right) {
            if (left <= min && max <= right) {
                return new int[]{firsts[idx], seconds[idx]};
            }
            if (right <= min || max <= left) {
                return new int[2];
            }
            int[] value1 = getValue(idx * 2 + 1, min, (min + max) / 2, left, right);
            int[] value2 = getValue(idx * 2 + 2, (min + max) / 2, max, left, right);
            int[] ans  = new int[2];
            if (value1[0] == value2[0]) {
                ans[0] = value1[0];
                if (value1[1] >= value2[1]) {
                    ans[1] = value1[1];
                } else {
                    ans[1] = value2[1];
                }
            } else if (value1[0] > value2[0]) {
                ans[0] = value1[0];
                if (value1[1] >= value2[0]) {
                    ans[1] = value1[1];
                } else {
                    ans[1] = value2[0];
                }
            } else {
                ans[1] = value2[0];
                if (value1[0] >= value2[1]) {
                    ans[1] = value1[0];
                } else {
                    ans[1] = value2[1];
                }
            }
            return ans;
        }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[26]
================== buggy_statements ==================
['                ans[1] = value2[0];']
================== buggy_method_src_endswith_buggy_statement ==================
private int[] getValue(int idx, int min, int max, int left, int right) {
            if (left <= min && max <= right) {
                return new int[]{firsts[idx], seconds[idx]};
            }
            if (right <= min || max <= left) {
                return new int[2];
            }
            int[] value1 = getValue(idx * 2 + 1, min, (min + max) / 2, left, right);
            int[] value2 = getValue(idx * 2 + 2, (min + max) / 2, max, left, right);
            int[] ans  = new int[2];
            if (value1[0] == value2[0]) {
                ans[0] = value1[0];
                if (value1[1] >= value2[1]) {
                    ans[1] = value1[1];
                } else {
                    ans[1] = value2[1];
                }
            } else if (value1[0] > value2[0]) {
                ans[0] = value1[0];
                if (value1[1] >= value2[0]) {
                    ans[1] = value1[1];
                } else {
                    ans[1] = value2[0];
                }
            } else {
                ans[1] = value2[0];