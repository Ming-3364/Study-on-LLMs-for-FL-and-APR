
================== buggy_file ==================
src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
================== buggy_method ==================
{'method_name': 'functionFormatNumber', 'method_body': 'private Object functionFormatNumber(EvalContext context) {\n        int ac = getArgumentCount();\n        if (ac != 2 && ac != 3) {\n            assertArgCount(2);\n        }\n\n        double number =\n            InfoSetUtil.doubleValue(getArg1().computeValue(context));\n        String pattern =\n            InfoSetUtil.stringValue(getArg2().computeValue(context));\n\n        DecimalFormatSymbols symbols = null;\n        if (ac == 3) {\n            String symbolsName =\n                InfoSetUtil.stringValue(getArg3().computeValue(context));\n            symbols =\n                context.getJXPathContext().getDecimalFormatSymbols(symbolsName);\n        }\n        else {\n            NodePointer pointer = context.getCurrentNodePointer();\n            Locale locale;\n            if (pointer != null) {\n                locale = pointer.getLocale();\n            }\n            else {\n                locale = context.getJXPathContext().getLocale();\n            }\n            symbols = new DecimalFormatSymbols(locale);\n        }\n        \n        DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();\n        format.setDecimalFormatSymbols(symbols);\n        format.applyLocalizedPattern(pattern);\n        return format.format(number);\n    }', 'start_line': 671, 'end_line': 705, 'buggy_lines': [676]}
================== buggy_method_src ==================
private Object functionFormatNumber(EvalContext context) {
        int ac = getArgumentCount();
        if (ac != 2 && ac != 3) {
            assertArgCount(2);
        }

        double number =
            InfoSetUtil.doubleValue(getArg1().computeValue(context));
        String pattern =
            InfoSetUtil.stringValue(getArg2().computeValue(context));

        DecimalFormatSymbols symbols = null;
        if (ac == 3) {
            String symbolsName =
                InfoSetUtil.stringValue(getArg3().computeValue(context));
            symbols =
                context.getJXPathContext().getDecimalFormatSymbols(symbolsName);
        }
        else {
            NodePointer pointer = context.getCurrentNodePointer();
            Locale locale;
            if (pointer != null) {
                locale = pointer.getLocale();
            }
            else {
                locale = context.getJXPathContext().getLocale();
            }
            symbols = new DecimalFormatSymbols(locale);
        }
        
        DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();
        format.setDecimalFormatSymbols(symbols);
        format.applyLocalizedPattern(pattern);
        return format.format(number);
    }
================== test_stack ==================
org.apache.commons.jxpath.ri.compiler.CoreFunctionTest::testCoreFunctions
junit.framework.AssertionFailedError: Evaluating <round('NaN')> expected:<NaN> but was:<0.0>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:78)
	at junit.framework.TestCase.assertEquals(TestCase.java:244)
	at org.apache.commons.jxpath.JXPathTestCase.assertXPathValue(JXPathTestCase.java:55)
	at org.apache.commons.jxpath.ri.compiler.CoreFunctionTest.testCoreFunctions(CoreFunctionTest.java:126)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

================== test_assert ==================
assertXPathValue(context, "round('NaN')", new Double(Double.NaN));

================== buggy_lines_in_method ==================
[6]
================== buggy_statements ==================
['']
================== buggy_method_src_endswith_buggy_statement ==================
private Object functionFormatNumber(EvalContext context) {
        int ac = getArgumentCount();
        if (ac != 2 && ac != 3) {
            assertArgCount(2);
        }
