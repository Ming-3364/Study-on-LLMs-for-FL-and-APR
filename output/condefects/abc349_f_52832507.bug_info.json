[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        long m = sc.nextLong();\n        long base_m = m;\n\n        for (long i = 2; i * i <= m; i++) {\n            if (m % i == 0) {\n                p[k] = i;\n                while(m % i == 0) {\n                    m /= i;\n                    c[k] += 1;\n                }\n                k++;\n            }\n        }\n        if (m > 1) {\n            p[k] = m;\n            c[k] = 1;\n            k++;\n        }\n\n        for (int i = 0; i < n; i++) {\n            var a = sc.nextLong();\n            if (a == gcd(base_m, a)) {\n                dp[encode(a)] += 1;\n            }\n        }\n\n        for (int i = 0; i < k; i++) {\n            for (int j = 0; j < 1 << k; j++) {\n                if ((j >> i & 1) == 1) {\n                    dp[j] += dp[j ^ (1 << i)];\n                }\n            }\n        }\n\n        long ans = 0;\n        for (int i = 0; i < 1 << k; i++) {\n            int count = 0;\n            for(int j = 0; j < k; j++) {\n                if ((i >> j & 1) == 1) count += 1;\n            }\n            if ((k & 1) == (count & 1)) ans = (ans + qpow(2, dp[i])) % P;\n            else ans = (ans + P - qpow(2, dp[i])) % P;\n        }\n\n        System.out.println(m == 1 ? (ans + P - 1) % P : ans);\n    }",
            "start_line": 11,
            "end_line": 60
        },
        "buggy_method_src": "public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        long m = sc.nextLong();\n        long base_m = m;\n\n        for (long i = 2; i * i <= m; i++) {\n            if (m % i == 0) {\n                p[k] = i;\n                while(m % i == 0) {\n                    m /= i;\n                    c[k] += 1;\n                }\n                k++;\n            }\n        }\n        if (m > 1) {\n            p[k] = m;\n            c[k] = 1;\n            k++;\n        }\n\n        for (int i = 0; i < n; i++) {\n            var a = sc.nextLong();\n            if (a == gcd(base_m, a)) {\n                dp[encode(a)] += 1;\n            }\n        }\n\n        for (int i = 0; i < k; i++) {\n            for (int j = 0; j < 1 << k; j++) {\n                if ((j >> i & 1) == 1) {\n                    dp[j] += dp[j ^ (1 << i)];\n                }\n            }\n        }\n\n        long ans = 0;\n        for (int i = 0; i < 1 << k; i++) {\n            int count = 0;\n            for(int j = 0; j < k; j++) {\n                if ((i >> j & 1) == 1) count += 1;\n            }\n            if ((k & 1) == (count & 1)) ans = (ans + qpow(2, dp[i])) % P;\n            else ans = (ans + P - qpow(2, dp[i])) % P;\n        }\n\n        System.out.println(m == 1 ? (ans + P - 1) % P : ans);\n    }",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            49
        ],
        "buggy_statements": [
            "        System.out.println(m == 1 ? (ans + P - 1) % P : ans);"
        ],
        "buggy_method_src_endswith_buggy_statement": "public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        long m = sc.nextLong();\n        long base_m = m;\n\n        for (long i = 2; i * i <= m; i++) {\n            if (m % i == 0) {\n                p[k] = i;\n                while(m % i == 0) {\n                    m /= i;\n                    c[k] += 1;\n                }\n                k++;\n            }\n        }\n        if (m > 1) {\n            p[k] = m;\n            c[k] = 1;\n            k++;\n        }\n\n        for (int i = 0; i < n; i++) {\n            var a = sc.nextLong();\n            if (a == gcd(base_m, a)) {\n                dp[encode(a)] += 1;\n            }\n        }\n\n        for (int i = 0; i < k; i++) {\n            for (int j = 0; j < 1 << k; j++) {\n                if ((j >> i & 1) == 1) {\n                    dp[j] += dp[j ^ (1 << i)];\n                }\n            }\n        }\n\n        long ans = 0;\n        for (int i = 0; i < 1 << k; i++) {\n            int count = 0;\n            for(int j = 0; j < k; j++) {\n                if ((i >> j & 1) == 1) count += 1;\n            }\n            if ((k & 1) == (count & 1)) ans = (ans + qpow(2, dp[i])) % P;\n            else ans = (ans + P - qpow(2, dp[i])) % P;\n        }\n\n        System.out.println(m == 1 ? (ans + P - 1) % P : ans);"
    }
]