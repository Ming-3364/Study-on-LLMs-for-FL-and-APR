[
    {
        "buggy_file": "src/com/google/javascript/jscomp/NodeUtil.java",
        "buggy_method": {
            "method_name": "mayBeString",
            "method_body": "static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
            "start_line": 1415,
            "end_line": 1421,
            "buggy_lines": [
                1417
            ]
        },
        "buggy_method_src": "static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
        "test_stack": "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIssue821\njunit.framework.AssertionFailedError:\nExpected: var a=(Math.random()>0.5?\"1\":2)+3+4\nResult: var a=(Math.random()>0.5?1:2)+7\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        HOOK 1 [parenthesized: true] [source_file: expected0]\n                            GT 1 [source_file: expected0]\n                                CALL 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME Math 1 [source_file: expected0]\n                                        STRING random 1 [source_file: expected0]\n                                NUMBER 0.5 1 [source_file: expected0]\n                            STRING 1 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                    NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    HOOK 1 [parenthesized: true] [source_file: testcode]\n                        GT 1 [source_file: testcode]\n                            CALL 1 [source_file: testcode]\n                                GETPROP 1 [source_file: testcode]\n                                    NAME Math 1 [source_file: testcode]\n                                    STRING random 1 [source_file: testcode]\n                            NUMBER 0.5 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 7.0 1 [source_file: testcode]\n\n\nSubtree1: ADD 1 [source_file: expected0]\n    HOOK 1 [parenthesized: true] [source_file: expected0]\n        GT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME Math 1 [source_file: expected0]\n                    STRING random 1 [source_file: expected0]\n            NUMBER 0.5 1 [source_file: expected0]\n        STRING 1 1 [source_file: expected0]\n        NUMBER 2.0 1 [source_file: expected0]\n    NUMBER 3.0 1 [source_file: expected0]\n\n\nSubtree2: HOOK 1 [parenthesized: true] [source_file: testcode]\n    GT 1 [source_file: testcode]\n        CALL 1 [source_file: testcode]\n            GETPROP 1 [source_file: testcode]\n                NAME Math 1 [source_file: testcode]\n                STRING random 1 [source_file: testcode]\n        NUMBER 0.5 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:560)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.foldSame(PeepholeFoldConstantsTest.java:67)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.testIssue821(PeepholeFoldConstantsTest.java:581)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "foldSame(\"var a =(Math.random()>0.5? '1' : 2 ) + 3 + 4;\");\n",
        "buggy_lines_in_method": [
            3
        ],
        "buggy_statements": [
            "      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);"
        ],
        "buggy_method_src_endswith_buggy_statement": "static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);"
    }
]