[
    {
        "buggy_file": "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
        "buggy_method": {
            "method_name": "resolve",
            "method_body": "@SuppressWarnings(\"unchecked\")\n    public void resolve(SerializerProvider provider) throws JsonMappingException\n    {\n        // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }",
            "start_line": 78,
            "end_line": 83,
            "buggy_lines": [
                82
            ]
        },
        "buggy_method_src": "@SuppressWarnings(\"unchecked\")\n    public void resolve(SerializerProvider provider) throws JsonMappingException\n    {\n        // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }",
        "test_stack": "com.fasterxml.jackson.databind.ser.TestAnyGetter::testIssue705\njunit.framework.ComparisonFailure: expected:<{\"[stuff\":\"[key/value]]\"}> but was:<{\"[key\":\"value]\"}>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.fasterxml.jackson.databind.ser.TestAnyGetter.testIssue705(TestAnyGetter.java:139)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(\"{\\\"stuff\\\":\\\"[key/value]\\\"}\", json);\n",
        "buggy_lines_in_method": [
            5
        ],
        "buggy_statements": [
            "        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);"
        ],
        "buggy_method_src_endswith_buggy_statement": "@SuppressWarnings(\"unchecked\")\n    public void resolve(SerializerProvider provider) throws JsonMappingException\n    {\n        // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);"
    },
    {
        "buggy_file": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "buggy_method": {
            "method_name": "constructBeanSerializer",
            "method_body": "@SuppressWarnings(\"unchecked\")\n    protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n        // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n        if (beanDesc.getBeanClass() == Object.class) {\n            return prov.getUnknownTypeSerializer(Object.class);\n//            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n        }\n        final SerializationConfig config = prov.getConfig();\n        BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n        builder.setConfig(config);\n\n        // First: any detectable (auto-detect, annotations) properties to serialize?\n        List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n        if (props == null) {\n            props = new ArrayList<BeanPropertyWriter>();\n        }\n        // [databind#638]: Allow injection of \"virtual\" properties:\n        prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n\n        // [JACKSON-440] Need to allow modification bean properties to serialize:\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.changeProperties(config, beanDesc, props);\n            }\n        }\n\n        // Any properties to suppress?\n        props = filterBeanProperties(config, beanDesc, props);\n\n        // [JACKSON-440] Need to allow reordering of properties to serialize\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.orderProperties(config, beanDesc, props);\n            }\n        }\n\n        /* And if Object Id is needed, some preparation for that as well: better\n         * do before view handling, mostly for the custom id case which needs\n         * access to a property\n         */\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n        \n        builder.setProperties(props);\n        builder.setFilterId(findFilterId(config, beanDesc));\n        \n        AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n        if (anyGetter != null) {\n            if (config.canOverrideAccessModifiers()) {\n                anyGetter.fixAccess();\n            }\n            JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n            // copied from BasicSerializerFactory.buildMapSerializer():\n            boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n            JavaType valueType = type.getContentType();\n            TypeSerializer typeSer = createTypeSerializer(config, valueType);\n            // last 2 nulls; don't know key, value serializers (yet)\n            // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n            MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n                // TODO: support '@JsonIgnoreProperties' with any setter?\n            // TODO: can we find full PropertyName?\n            PropertyName name = new PropertyName(anyGetter.getName());\n            BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n                    beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n            builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n        }\n        // Next: need to gather view information, if any:\n        processViews(config, builder);\n\n        // Finally: let interested parties mess with the result bit more...\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        \n        JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n        \n        if (ser == null) {\n            // If we get this far, there were no properties found, so no regular BeanSerializer\n            // would be constructed. But, couple of exceptions.\n            // First: if there are known annotations, just create 'empty bean' serializer\n            if (beanDesc.hasKnownClassAnnotations()) {\n                return builder.createDummy();\n            }\n        }\n        return ser;\n    }",
            "start_line": 334,
            "end_line": 424,
            "buggy_lines": [
                395
            ]
        },
        "buggy_method_src": "@SuppressWarnings(\"unchecked\")\n    protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n        // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n        if (beanDesc.getBeanClass() == Object.class) {\n            return prov.getUnknownTypeSerializer(Object.class);\n//            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n        }\n        final SerializationConfig config = prov.getConfig();\n        BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n        builder.setConfig(config);\n\n        // First: any detectable (auto-detect, annotations) properties to serialize?\n        List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n        if (props == null) {\n            props = new ArrayList<BeanPropertyWriter>();\n        }\n        // [databind#638]: Allow injection of \"virtual\" properties:\n        prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n\n        // [JACKSON-440] Need to allow modification bean properties to serialize:\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.changeProperties(config, beanDesc, props);\n            }\n        }\n\n        // Any properties to suppress?\n        props = filterBeanProperties(config, beanDesc, props);\n\n        // [JACKSON-440] Need to allow reordering of properties to serialize\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.orderProperties(config, beanDesc, props);\n            }\n        }\n\n        /* And if Object Id is needed, some preparation for that as well: better\n         * do before view handling, mostly for the custom id case which needs\n         * access to a property\n         */\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n        \n        builder.setProperties(props);\n        builder.setFilterId(findFilterId(config, beanDesc));\n        \n        AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n        if (anyGetter != null) {\n            if (config.canOverrideAccessModifiers()) {\n                anyGetter.fixAccess();\n            }\n            JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n            // copied from BasicSerializerFactory.buildMapSerializer():\n            boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n            JavaType valueType = type.getContentType();\n            TypeSerializer typeSer = createTypeSerializer(config, valueType);\n            // last 2 nulls; don't know key, value serializers (yet)\n            // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n            MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n                // TODO: support '@JsonIgnoreProperties' with any setter?\n            // TODO: can we find full PropertyName?\n            PropertyName name = new PropertyName(anyGetter.getName());\n            BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n                    beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n            builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n        }\n        // Next: need to gather view information, if any:\n        processViews(config, builder);\n\n        // Finally: let interested parties mess with the result bit more...\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        \n        JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n        \n        if (ser == null) {\n            // If we get this far, there were no properties found, so no regular BeanSerializer\n            // would be constructed. But, couple of exceptions.\n            // First: if there are known annotations, just create 'empty bean' serializer\n            if (beanDesc.hasKnownClassAnnotations()) {\n                return builder.createDummy();\n            }\n        }\n        return ser;\n    }",
        "test_stack": "com.fasterxml.jackson.databind.ser.TestAnyGetter::testIssue705\njunit.framework.ComparisonFailure: expected:<{\"[stuff\":\"[key/value]]\"}> but was:<{\"[key\":\"value]\"}>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.fasterxml.jackson.databind.ser.TestAnyGetter.testIssue705(TestAnyGetter.java:139)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(\"{\\\"stuff\\\":\\\"[key/value]\\\"}\", json);\n",
        "buggy_lines_in_method": [
            62
        ],
        "buggy_statements": [
            "            MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);"
        ],
        "buggy_method_src_endswith_buggy_statement": "@SuppressWarnings(\"unchecked\")\n    protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n        // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n        if (beanDesc.getBeanClass() == Object.class) {\n            return prov.getUnknownTypeSerializer(Object.class);\n//            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n        }\n        final SerializationConfig config = prov.getConfig();\n        BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n        builder.setConfig(config);\n\n        // First: any detectable (auto-detect, annotations) properties to serialize?\n        List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n        if (props == null) {\n            props = new ArrayList<BeanPropertyWriter>();\n        }\n        // [databind#638]: Allow injection of \"virtual\" properties:\n        prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n\n        // [JACKSON-440] Need to allow modification bean properties to serialize:\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.changeProperties(config, beanDesc, props);\n            }\n        }\n\n        // Any properties to suppress?\n        props = filterBeanProperties(config, beanDesc, props);\n\n        // [JACKSON-440] Need to allow reordering of properties to serialize\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                props = mod.orderProperties(config, beanDesc, props);\n            }\n        }\n\n        /* And if Object Id is needed, some preparation for that as well: better\n         * do before view handling, mostly for the custom id case which needs\n         * access to a property\n         */\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n        \n        builder.setProperties(props);\n        builder.setFilterId(findFilterId(config, beanDesc));\n        \n        AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n        if (anyGetter != null) {\n            if (config.canOverrideAccessModifiers()) {\n                anyGetter.fixAccess();\n            }\n            JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n            // copied from BasicSerializerFactory.buildMapSerializer():\n            boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n            JavaType valueType = type.getContentType();\n            TypeSerializer typeSer = createTypeSerializer(config, valueType);\n            // last 2 nulls; don't know key, value serializers (yet)\n            // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n            MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);"
    }
]