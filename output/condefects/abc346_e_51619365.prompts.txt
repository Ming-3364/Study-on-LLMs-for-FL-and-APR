
================== prompt_fl_1 ==================

source code:
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long h = sc.nextLong();
        long w = sc.nextLong();
        int m = sc.nextInt();
        int[] t = new int[m];
        int[] a = new int[m];
        int[] x = new int[m];
        for(int i=0; i<m; ++i) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }

        Set<Integer> cols = new TreeSet<>();
        Set<Integer> rows = new TreeSet<>();
        Map<Integer, Long> ans = new TreeMap<>();
        ans.put(0, h * w);
        for(int i=m-1; i>=0; --i) {
            if(t[i] == 1) {
                if(rows.contains(a[i])) continue;

                if(w - cols.size() > 0) {
                    long add = w - cols.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - base - add);
                }

                rows.add(a[i]);
            } else if(t[i] == 2) {
                if(cols.contains(a[i])) continue;

                if(h - rows.size() > 0) {
                    long add = h - rows.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - add);
                }

                cols.add(a[i]);
            }
        }

        if(ans.get(0) < 1) {
            ans.remove(0);
        }

        System.out.println(ans.size());
        for(var e : ans.entrySet()) {
            System.out.println(e.getKey() + " " + e.getValue());
        }
    }

There is a bug in the above code, please help me locate it.

Please output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.

================== prompt_fl_4 ==================

source code:
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long h = sc.nextLong();
        long w = sc.nextLong();
        int m = sc.nextInt();
        int[] t = new int[m];
        int[] a = new int[m];
        int[] x = new int[m];
        for(int i=0; i<m; ++i) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }

        Set<Integer> cols = new TreeSet<>();
        Set<Integer> rows = new TreeSet<>();
        Map<Integer, Long> ans = new TreeMap<>();
        ans.put(0, h * w);
        for(int i=m-1; i>=0; --i) {
            if(t[i] == 1) {
                if(rows.contains(a[i])) continue;

                if(w - cols.size() > 0) {
                    long add = w - cols.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - base - add);
                }

                rows.add(a[i]);
            } else if(t[i] == 2) {
                if(cols.contains(a[i])) continue;

                if(h - rows.size() > 0) {
                    long add = h - rows.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - add);
                }

                cols.add(a[i]);
            }
        }

        if(ans.get(0) < 1) {
            ans.remove(0);
        }

        System.out.println(ans.size());
        for(var e : ans.entrySet()) {
            System.out.println(e.getKey() + " " + e.getValue());
        }
    }

There is a bug in the above code, please help me locate it.

Output **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.

================== prompt_apr_1 ==================

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long h = sc.nextLong();
        long w = sc.nextLong();
        int m = sc.nextInt();
        int[] t = new int[m];
        int[] a = new int[m];
        int[] x = new int[m];
        for(int i=0; i<m; ++i) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }

        Set<Integer> cols = new TreeSet<>();
        Set<Integer> rows = new TreeSet<>();
        Map<Integer, Long> ans = new TreeMap<>();
        ans.put(0, h * w);
        for(int i=m-1; i>=0; --i) {
            if(t[i] == 1) {
                if(rows.contains(a[i])) continue;

                if(w - cols.size() > 0) {
                    long add = w - cols.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - base - add);
                }

                rows.add(a[i]);
            } else if(t[i] == 2) {
                if(cols.contains(a[i])) continue;

                if(h - rows.size() > 0) {
                    long add = h - rows.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - add);
                }

                cols.add(a[i]);
            }
        }

        if(ans.get(0) < 1) {
            ans.remove(0);
        }

        System.out.println(ans.size());
        for(var e : ans.entrySet()) {
            System.out.println(e.getKey() + " " + e.getValue());
        }
    }

There is a bug in line [28] of the code, please help me fix it.

Please return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.

================== prompt_apr_2 ==================

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long h = sc.nextLong();
        long w = sc.nextLong();
        int m = sc.nextInt();
        int[] t = new int[m];
        int[] a = new int[m];
        int[] x = new int[m];
        for(int i=0; i<m; ++i) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }

        Set<Integer> cols = new TreeSet<>();
        Set<Integer> rows = new TreeSet<>();
        Map<Integer, Long> ans = new TreeMap<>();
        ans.put(0, h * w);
        for(int i=m-1; i>=0; --i) {
            if(t[i] == 1) {
                if(rows.contains(a[i])) continue;

                if(w - cols.size() > 0) {
                    long add = w - cols.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - base - add);
                }

                rows.add(a[i]);
            } else if(t[i] == 2) {
                if(cols.contains(a[i])) continue;

                if(h - rows.size() > 0) {
                    long add = h - rows.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - add);
                }

                cols.add(a[i]);
            }
        }

        if(ans.get(0) < 1) {
            ans.remove(0);
        }

        System.out.println(ans.size());
        for(var e : ans.entrySet()) {
            System.out.println(e.getKey() + " " + e.getValue());
        }
    }

There is a bug in ['                    ans.put(0, ans.get(0) - base - add);'] , please help me fix it. 

Please return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.

================== prompt_apr_3 ==================

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long h = sc.nextLong();
        long w = sc.nextLong();
        int m = sc.nextInt();
        int[] t = new int[m];
        int[] a = new int[m];
        int[] x = new int[m];
        for(int i=0; i<m; ++i) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }

        Set<Integer> cols = new TreeSet<>();
        Set<Integer> rows = new TreeSet<>();
        Map<Integer, Long> ans = new TreeMap<>();
        ans.put(0, h * w);
        for(int i=m-1; i>=0; --i) {
            if(t[i] == 1) {
                if(rows.contains(a[i])) continue;

                if(w - cols.size() > 0) {
                    long add = w - cols.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - base - add);

There is a bug in the last statement, please help me fix it.

Return the code **only from the method declaration to the fixed statement**, without completing or adding additional code. Do not modify anything beyond fixing the bug, and do not complete the `if` statement or other unfinished parts. Do not include ```java or ``` markers in the response.

================== prompt_apr_4 ==================

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long h = sc.nextLong();
        long w = sc.nextLong();
        int m = sc.nextInt();
        int[] t = new int[m];
        int[] a = new int[m];
        int[] x = new int[m];
        for(int i=0; i<m; ++i) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }

        Set<Integer> cols = new TreeSet<>();
        Set<Integer> rows = new TreeSet<>();
        Map<Integer, Long> ans = new TreeMap<>();
        ans.put(0, h * w);
        for(int i=m-1; i>=0; --i) {
            if(t[i] == 1) {
                if(rows.contains(a[i])) continue;

                if(w - cols.size() > 0) {
                    long add = w - cols.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - base - add);
                }

                rows.add(a[i]);
            } else if(t[i] == 2) {
                if(cols.contains(a[i])) continue;

                if(h - rows.size() > 0) {
                    long add = h - rows.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - add);
                }

                cols.add(a[i]);
            }
        }

        if(ans.get(0) < 1) {
            ans.remove(0);
        }

        System.out.println(ans.size());
        for(var e : ans.entrySet()) {
            System.out.println(e.getKey() + " " + e.getValue());
        }
    }

There is a bug in line [28] of the code, please help me fix it.

Please return the results in a strict JSON format as described below. Please follow these instructions carefully:
1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).
2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:
   - `"line_number"`: The line number of the buggy code that was repaired (integer).
   - `"fixed_statement"`: The repaired statement for that specific line (string).

3. The result must strictly follow this format:
[
    {
        "line_number": int,
        "fixed_statement": "string"
    },
    {
        "line_number": int,
        "fixed_statement": "string"
    }
]
4. The repaired statement in "fixed_statement" must replace the corresponding line in the buggy code.
5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.

================== prompt_apr_5 ==================

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long h = sc.nextLong();
        long w = sc.nextLong();
        int m = sc.nextInt();
        int[] t = new int[m];
        int[] a = new int[m];
        int[] x = new int[m];
        for(int i=0; i<m; ++i) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }

        Set<Integer> cols = new TreeSet<>();
        Set<Integer> rows = new TreeSet<>();
        Map<Integer, Long> ans = new TreeMap<>();
        ans.put(0, h * w);
        for(int i=m-1; i>=0; --i) {
            if(t[i] == 1) {
                if(rows.contains(a[i])) continue;

                if(w - cols.size() > 0) {
                    long add = w - cols.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - base - add);
                }

                rows.add(a[i]);
            } else if(t[i] == 2) {
                if(cols.contains(a[i])) continue;

                if(h - rows.size() > 0) {
                    long add = h - rows.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - add);
                }

                cols.add(a[i]);
            }
        }

        if(ans.get(0) < 1) {
            ans.remove(0);
        }

        System.out.println(ans.size());
        for(var e : ans.entrySet()) {
            System.out.println(e.getKey() + " " + e.getValue());
        }
    }

There is a bug in ['                    ans.put(0, ans.get(0) - base - add);'] , please help me fix it. 

Please return the results in a strict JSON format as described below. Please follow these instructions carefully:
1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).
2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:
   - `"line_number"`: The line number of the buggy code that was repaired (integer).
   - `"fixed_statement"`: The repaired statement for that specific line (string).

3. The result must strictly follow this format:
[
    {
        "line_number": int,
        "fixed_statement": "string"
    },
    {
        "line_number": int,
        "fixed_statement": "string"
    }
]
4. The repaired statement in "fixed_statement" must replace the corresponding line in the buggy code.
5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.

================== prompt_apr_6 ==================

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long h = sc.nextLong();
        long w = sc.nextLong();
        int m = sc.nextInt();
        int[] t = new int[m];
        int[] a = new int[m];
        int[] x = new int[m];
        for(int i=0; i<m; ++i) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }

        Set<Integer> cols = new TreeSet<>();
        Set<Integer> rows = new TreeSet<>();
        Map<Integer, Long> ans = new TreeMap<>();
        ans.put(0, h * w);
        for(int i=m-1; i>=0; --i) {
            if(t[i] == 1) {
                if(rows.contains(a[i])) continue;

                if(w - cols.size() > 0) {
                    long add = w - cols.size();
                    long base = ((ans.containsKey(x[i])) ? ans.get(x[i]) : 0);
                    ans.put(x[i], base + add);
                    ans.put(0, ans.get(0) - base - add);

There is a bug in the last statement, please help me fix it.

Please return the results in a strict JSON format as described below. Please follow these instructions carefully:
1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).
2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:
   - `"line_number"`: The line number of the buggy code that was repaired (integer).
   - `"fixed_statement"`: The repaired statement for that specific line (string).

3. The result must strictly follow this format:
[
    {
        "line_number": int,
        "fixed_statement": "string"
    },
    {
        "line_number": int,
        "fixed_statement": "string"
    }
]
4. The repaired statement in "fixed_statement" must replace the corresponding line in the buggy code.
5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.
