[
    {
        "buggy_file": "src/com/google/javascript/jscomp/InlineVariables.java",
        "buggy_method": {
            "method_name": "doInlinesForScope",
            "method_body": "private void doInlinesForScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap) {\n\n      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n\n        ReferenceCollection referenceInfo = referenceMap.get(v);\n\n        // referenceInfo will be null if we're in constants-only mode\n        // and the variable is not a constant.\n        if (referenceInfo == null || isVarInlineForbidden(v)) {\n          // Never try to inline exported variables or variables that\n          // were not collected or variables that have already been inlined.\n          continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n          Reference init = referenceInfo.getInitializingReferenceForConstants();\n          Node value = init.getAssignedValue();\n          inlineDeclaredConstant(v, value, referenceInfo.references);\n          staleVars.add(v);\n        } else if (mode == Mode.CONSTANTS_ONLY) {\n          // If we're in constants-only mode, don't run more aggressive\n          // inlining heuristics. See InlineConstantsTest.\n          continue;\n        } else {\n          inlineNonConstants(v, referenceInfo);\n        }\n      }\n    }",
            "start_line": 196,
            "end_line": 223,
            "buggy_lines": [
                220
            ]
        },
        "buggy_method_src": "private void doInlinesForScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap) {\n\n      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n\n        ReferenceCollection referenceInfo = referenceMap.get(v);\n\n        // referenceInfo will be null if we're in constants-only mode\n        // and the variable is not a constant.\n        if (referenceInfo == null || isVarInlineForbidden(v)) {\n          // Never try to inline exported variables or variables that\n          // were not collected or variables that have already been inlined.\n          continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n          Reference init = referenceInfo.getInitializingReferenceForConstants();\n          Node value = init.getAssignedValue();\n          inlineDeclaredConstant(v, value, referenceInfo.references);\n          staleVars.add(v);\n        } else if (mode == Mode.CONSTANTS_ONLY) {\n          // If we're in constants-only mode, don't run more aggressive\n          // inlining heuristics. See InlineConstantsTest.\n          continue;\n        } else {\n          inlineNonConstants(v, referenceInfo);\n        }\n      }\n    }",
        "test_stack": "com.google.javascript.jscomp.InlineVariablesTest::testArgumentsModifiedInInnerFunction\njunit.framework.AssertionFailedError:\nExpected: function g(callback){function inner(callback$$1){var x=callback$$1;arguments[0]=this;x.apply(this)}callback.apply(this,arguments)}\nResult: function g(callback){function inner(callback$$1){arguments[0]=this;callback$$1.apply(this)}callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                FUNCTION inner 3 [sourcename: expected0]\n                    NAME inner 3 [sourcename: expected0]\n                    LP 3 [sourcename: expected0]\n                        NAME callback$$1 3 [sourcename: expected0]\n                    BLOCK 3 [sourcename: expected0]\n                        VAR 3 [sourcename: expected0]\n                            NAME x 3 [sourcename: expected0]\n                                NAME callback$$1 3 [sourcename: expected0]\n                        EXPR_RESULT 4 [sourcename: expected0]\n                            ASSIGN 4 [sourcename: expected0]\n                                GETELEM 4 [sourcename: expected0]\n                                    NAME arguments 4 [sourcename: expected0]\n                                    NUMBER 0.0 4 [sourcename: expected0]\n                                THIS 4 [sourcename: expected0]\n                        EXPR_RESULT 5 [sourcename: expected0]\n                            CALL 5 [sourcename: expected0]\n                                GETPROP 5 [sourcename: expected0]\n                                    NAME x 5 [sourcename: expected0]\n                                    STRING apply 5 [sourcename: expected0]\n                                THIS 5 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    CALL 2 [sourcename: expected0]\n                        GETPROP 2 [sourcename: expected0]\n                            NAME callback 2 [sourcename: expected0]\n                            STRING apply 2 [sourcename: expected0]\n                        THIS 2 [sourcename: expected0]\n                        NAME arguments 2 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                FUNCTION inner 4 [sourcename: testcode]\n                    NAME inner 4 [sourcename: testcode]\n                    LP 4 [sourcename: testcode]\n                        NAME callback$$1 4 [sourcename: testcode]\n                    BLOCK 4 [sourcename: testcode]\n                        EXPR_RESULT 5 [sourcename: testcode]\n                            ASSIGN 5 [sourcename: testcode]\n                                GETELEM 5 [sourcename: testcode]\n                                    NAME arguments 5 [sourcename: testcode]\n                                    NUMBER 0.0 5 [sourcename: testcode]\n                                THIS 5 [sourcename: testcode]\n                        EXPR_RESULT 6 [sourcename: testcode]\n                            CALL 6 [sourcename: testcode]\n                                GETPROP 6 [sourcename: testcode]\n                                    NAME callback$$1 4 [sourcename: testcode]\n                                    STRING apply 6 [sourcename: testcode]\n                                THIS 6 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode]\n                        GETPROP 3 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                        NAME arguments 3 [sourcename: testcode]\n\n\nSubtree1: BLOCK 3 [sourcename: expected0]\n    VAR 3 [sourcename: expected0]\n        NAME x 3 [sourcename: expected0]\n            NAME callback$$1 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        ASSIGN 4 [sourcename: expected0]\n            GETELEM 4 [sourcename: expected0]\n                NAME arguments 4 [sourcename: expected0]\n                NUMBER 0.0 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME x 5 [sourcename: expected0]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        ASSIGN 5 [sourcename: testcode]\n            GETELEM 5 [sourcename: testcode]\n                NAME arguments 5 [sourcename: testcode]\n                NUMBER 0.0 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n    EXPR_RESULT 6 [sourcename: testcode]\n        CALL 6 [sourcename: testcode]\n            GETPROP 6 [sourcename: testcode]\n                NAME callback$$1 4 [sourcename: testcode]\n                STRING apply 6 [sourcename: testcode]\n            THIS 6 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testArgumentsModifiedInInnerFunction(InlineVariablesTest.java:1035)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testArgumentsModifiedInOuterFunction\njunit.framework.AssertionFailedError:\nExpected: function g(callback){function inner(callback$$1){callback$$1.apply(this)}var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){function inner(callback$$1){callback$$1.apply(this)}arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                FUNCTION inner 5 [sourcename: expected0]\n                    NAME inner 5 [sourcename: expected0]\n                    LP 5 [sourcename: expected0]\n                        NAME callback$$1 5 [sourcename: expected0]\n                    BLOCK 5 [sourcename: expected0]\n                        EXPR_RESULT 5 [sourcename: expected0]\n                            CALL 5 [sourcename: expected0]\n                                GETPROP 5 [sourcename: expected0]\n                                    NAME callback$$1 5 [sourcename: expected0]\n                                    STRING apply 5 [sourcename: expected0]\n                                THIS 5 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    ASSIGN 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                FUNCTION inner 5 [sourcename: testcode]\n                    NAME inner 5 [sourcename: testcode]\n                    LP 5 [sourcename: testcode]\n                        NAME callback$$1 5 [sourcename: testcode]\n                    BLOCK 5 [sourcename: testcode]\n                        EXPR_RESULT 6 [sourcename: testcode]\n                            CALL 6 [sourcename: testcode]\n                                GETPROP 6 [sourcename: testcode]\n                                    NAME callback$$1 5 [sourcename: testcode]\n                                    STRING apply 6 [sourcename: testcode]\n                                THIS 6 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    ASSIGN 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    FUNCTION inner 5 [sourcename: expected0]\n        NAME inner 5 [sourcename: expected0]\n        LP 5 [sourcename: expected0]\n            NAME callback$$1 5 [sourcename: expected0]\n        BLOCK 5 [sourcename: expected0]\n            EXPR_RESULT 5 [sourcename: expected0]\n                CALL 5 [sourcename: expected0]\n                    GETPROP 5 [sourcename: expected0]\n                        NAME callback$$1 5 [sourcename: expected0]\n                        STRING apply 5 [sourcename: expected0]\n                    THIS 5 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        ASSIGN 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    FUNCTION inner 5 [sourcename: testcode]\n        NAME inner 5 [sourcename: testcode]\n        LP 5 [sourcename: testcode]\n            NAME callback$$1 5 [sourcename: testcode]\n        BLOCK 5 [sourcename: testcode]\n            EXPR_RESULT 6 [sourcename: testcode]\n                CALL 6 [sourcename: testcode]\n                    GETPROP 6 [sourcename: testcode]\n                        NAME callback$$1 5 [sourcename: testcode]\n                        STRING apply 6 [sourcename: testcode]\n                    THIS 6 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        ASSIGN 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testArgumentsModifiedInOuterFunction(InlineVariablesTest.java:1014)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378ModifiedArguments1\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    ASSIGN 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    ASSIGN 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        ASSIGN 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        ASSIGN 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378ModifiedArguments1(InlineVariablesTest.java:915)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378ModifiedArguments2\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n                    NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n                        NAME callback 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    ASSIGN 4 [sourcename: expected0]\n                        GETELEM 4 [sourcename: expected0]\n                            NAME arguments 4 [sourcename: expected0]\n                            NUMBER 0.0 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                EXPR_RESULT 5 [sourcename: expected0]\n                    CALL 5 [sourcename: expected0]\n                        GETPROP 5 [sourcename: expected0]\n                            NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                            STRING apply 5 [sourcename: expected0]\n                        THIS 5 [sourcename: expected0]\n                        NAME arguments 5 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    ASSIGN 4 [sourcename: testcode]\n                        GETELEM 4 [sourcename: testcode]\n                            NAME arguments 4 [sourcename: testcode]\n                            NUMBER 0.0 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                EXPR_RESULT 5 [sourcename: testcode]\n                    CALL 5 [sourcename: testcode]\n                        GETPROP 5 [sourcename: testcode]\n                            NAME callback 3 [sourcename: testcode]\n                            STRING apply 5 [sourcename: testcode]\n                        THIS 5 [sourcename: testcode]\n                        NAME arguments 5 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n        NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n            NAME callback 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        ASSIGN 4 [sourcename: expected0]\n            GETELEM 4 [sourcename: expected0]\n                NAME arguments 4 [sourcename: expected0]\n                NUMBER 0.0 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n            NAME arguments 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        ASSIGN 4 [sourcename: testcode]\n            GETELEM 4 [sourcename: testcode]\n                NAME arguments 4 [sourcename: testcode]\n                NUMBER 0.0 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        CALL 5 [sourcename: testcode]\n            GETPROP 5 [sourcename: testcode]\n                NAME callback 3 [sourcename: testcode]\n                STRING apply 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n            NAME arguments 5 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378ModifiedArguments2(InlineVariablesTest.java:924)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments1\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments,this);f.apply(this,arguments)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments,this);callback.apply(this,arguments)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    CALL 3 [sourcename: expected0] [free_call: 1]\n                        NAME h 3 [sourcename: expected0]\n                        NAME arguments 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n        FUNCTION h 6 [sourcename: expected0]\n            NAME h 6 [sourcename: expected0]\n            LP 6 [sourcename: expected0]\n                NAME a 6 [sourcename: expected0]\n                NAME b 6 [sourcename: expected0]\n            BLOCK 6 [sourcename: expected0]\n                EXPR_RESULT 7 [sourcename: expected0]\n                    ASSIGN 7 [sourcename: expected0]\n                        GETELEM 7 [sourcename: expected0]\n                            NAME a 7 [sourcename: expected0]\n                            NUMBER 0.0 7 [sourcename: expected0]\n                        NAME b 7 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode] [free_call: 1]\n                        NAME h 3 [sourcename: testcode]\n                        NAME arguments 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n        FUNCTION h 6 [sourcename: testcode]\n            NAME h 6 [sourcename: testcode]\n            LP 6 [sourcename: testcode]\n                NAME a 6 [sourcename: testcode]\n                NAME b 6 [sourcename: testcode]\n            BLOCK 6 [sourcename: testcode]\n                EXPR_RESULT 7 [sourcename: testcode]\n                    ASSIGN 7 [sourcename: testcode]\n                        GETELEM 7 [sourcename: testcode]\n                            NAME a 7 [sourcename: testcode]\n                            NUMBER 0.0 7 [sourcename: testcode]\n                        NAME b 7 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        CALL 3 [sourcename: expected0] [free_call: 1]\n            NAME h 3 [sourcename: expected0]\n            NAME arguments 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        CALL 3 [sourcename: testcode] [free_call: 1]\n            NAME h 3 [sourcename: testcode]\n            NAME arguments 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments1(InlineVariablesTest.java:934)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments2\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments,this);f.apply(this)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments,this);callback.apply(this)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n                    NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n                        NAME callback 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0] [free_call: 1]\n                        NAME h 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                EXPR_RESULT 5 [sourcename: expected0]\n                    CALL 5 [sourcename: expected0]\n                        GETPROP 5 [sourcename: expected0]\n                            NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                            STRING apply 5 [sourcename: expected0]\n                        THIS 5 [sourcename: expected0]\n        FUNCTION h 7 [sourcename: expected0]\n            NAME h 7 [sourcename: expected0]\n            LP 7 [sourcename: expected0]\n                NAME a 7 [sourcename: expected0]\n                NAME b 7 [sourcename: expected0]\n            BLOCK 7 [sourcename: expected0]\n                EXPR_RESULT 8 [sourcename: expected0]\n                    ASSIGN 8 [sourcename: expected0]\n                        GETELEM 8 [sourcename: expected0]\n                            NAME a 8 [sourcename: expected0]\n                            NUMBER 0.0 8 [sourcename: expected0]\n                        NAME b 8 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode] [free_call: 1]\n                        NAME h 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                EXPR_RESULT 5 [sourcename: testcode]\n                    CALL 5 [sourcename: testcode]\n                        GETPROP 5 [sourcename: testcode]\n                            NAME callback 3 [sourcename: testcode]\n                            STRING apply 5 [sourcename: testcode]\n                        THIS 5 [sourcename: testcode]\n        FUNCTION h 7 [sourcename: testcode]\n            NAME h 7 [sourcename: testcode]\n            LP 7 [sourcename: testcode]\n                NAME a 7 [sourcename: testcode]\n                NAME b 7 [sourcename: testcode]\n            BLOCK 7 [sourcename: testcode]\n                EXPR_RESULT 8 [sourcename: testcode]\n                    ASSIGN 8 [sourcename: testcode]\n                        GETELEM 8 [sourcename: testcode]\n                            NAME a 8 [sourcename: testcode]\n                            NUMBER 0.0 8 [sourcename: testcode]\n                        NAME b 8 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n        NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n            NAME callback 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0] [free_call: 1]\n            NAME h 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode] [free_call: 1]\n            NAME h 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        CALL 5 [sourcename: testcode]\n            GETPROP 5 [sourcename: testcode]\n                NAME callback 3 [sourcename: testcode]\n                STRING apply 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments2(InlineVariablesTest.java:946)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments4\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments[0],this);f.apply(this,arguments)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments[0],this);callback.apply(this,arguments)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    CALL 3 [sourcename: expected0] [free_call: 1]\n                        NAME h 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n        FUNCTION h 6 [sourcename: expected0]\n            NAME h 6 [sourcename: expected0]\n            LP 6 [sourcename: expected0]\n                NAME a 6 [sourcename: expected0]\n                NAME b 6 [sourcename: expected0]\n            BLOCK 6 [sourcename: expected0]\n                EXPR_RESULT 7 [sourcename: expected0]\n                    ASSIGN 7 [sourcename: expected0]\n                        GETELEM 7 [sourcename: expected0]\n                            NAME a 7 [sourcename: expected0]\n                            NUMBER 0.0 7 [sourcename: expected0]\n                        NAME b 7 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode] [free_call: 1]\n                        NAME h 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n        FUNCTION h 6 [sourcename: testcode]\n            NAME h 6 [sourcename: testcode]\n            LP 6 [sourcename: testcode]\n                NAME a 6 [sourcename: testcode]\n                NAME b 6 [sourcename: testcode]\n            BLOCK 6 [sourcename: testcode]\n                EXPR_RESULT 7 [sourcename: testcode]\n                    ASSIGN 7 [sourcename: testcode]\n                        GETELEM 7 [sourcename: testcode]\n                            NAME a 7 [sourcename: testcode]\n                            NUMBER 0.0 7 [sourcename: testcode]\n                        NAME b 7 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        CALL 3 [sourcename: expected0] [free_call: 1]\n            NAME h 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        CALL 3 [sourcename: testcode] [free_call: 1]\n            NAME h 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments4(InlineVariablesTest.java:970)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "test(\n",
        "buggy_lines_in_method": [
            25
        ],
        "buggy_statements": [
            "          inlineNonConstants(v, referenceInfo);"
        ],
        "buggy_method_src_endswith_buggy_statement": "private void doInlinesForScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap) {\n\n      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n\n        ReferenceCollection referenceInfo = referenceMap.get(v);\n\n        // referenceInfo will be null if we're in constants-only mode\n        // and the variable is not a constant.\n        if (referenceInfo == null || isVarInlineForbidden(v)) {\n          // Never try to inline exported variables or variables that\n          // were not collected or variables that have already been inlined.\n          continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n          Reference init = referenceInfo.getInitializingReferenceForConstants();\n          Node value = init.getAssignedValue();\n          inlineDeclaredConstant(v, value, referenceInfo.references);\n          staleVars.add(v);\n        } else if (mode == Mode.CONSTANTS_ONLY) {\n          // If we're in constants-only mode, don't run more aggressive\n          // inlining heuristics. See InlineConstantsTest.\n          continue;\n        } else {\n          inlineNonConstants(v, referenceInfo);"
    },
    {
        "buggy_file": "src/com/google/javascript/jscomp/InlineVariables.java",
        "buggy_method": {
            "method_name": "inlineNonConstants",
            "method_body": "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo) {\n      int refCount = referenceInfo.references.size();\n      Reference declaration = referenceInfo.references.get(0);\n      Reference init = referenceInfo.getInitializingReference();\n      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n      if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n          value = init.getAssignedValue();\n        } else {\n          // Create a new node for variable that is never initialized.\n          Node srcLocation = declaration.getNameNode();\n          value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n      } else if (refCount == firstRefAfterInit) {\n        // The variable likely only read once, try some more\n        // complex inlining heuristics.\n        Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);\n        if (canInline(declaration, init, reference)) {\n          inline(v, declaration, init, reference);\n          staleVars.add(v);\n        }\n      } else if (declaration != init && refCount == 2) {\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n          // The only reference is the initialization, remove the assignment and\n          // the variable declaration.\n          Node value = init.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(v, value, referenceInfo.references);\n          staleVars.add(v);\n        }\n      }\n\n      // If this variable was not inlined normally, check if we can\n      // inline an alias of it. (If the variable was inlined, then the\n      // reference data is out of sync. We're better off just waiting for\n      // the next pass.)\n      if (\n          !staleVars.contains(v) && referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime()) {\n        List<Reference> refs = referenceInfo.references;\n        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n          Node nameNode = refs.get(i).getNameNode();\n          if (aliasCandidates.containsKey(nameNode)) {\n            AliasCandidate candidate = aliasCandidates.get(nameNode);\n            if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias)) {\n              Reference aliasInit;\n              aliasInit = candidate.refInfo.getInitializingReference();\n              Node value = aliasInit.getAssignedValue();\n              Preconditions.checkNotNull(value);\n              inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);\n              staleVars.add(candidate.alias);\n            }\n          }\n        }\n      }\n    }",
            "start_line": 229,
            "end_line": 297,
            "buggy_lines": [
                230,
                275
            ]
        },
        "buggy_method_src": "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo) {\n      int refCount = referenceInfo.references.size();\n      Reference declaration = referenceInfo.references.get(0);\n      Reference init = referenceInfo.getInitializingReference();\n      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n      if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n          value = init.getAssignedValue();\n        } else {\n          // Create a new node for variable that is never initialized.\n          Node srcLocation = declaration.getNameNode();\n          value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n      } else if (refCount == firstRefAfterInit) {\n        // The variable likely only read once, try some more\n        // complex inlining heuristics.\n        Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);\n        if (canInline(declaration, init, reference)) {\n          inline(v, declaration, init, reference);\n          staleVars.add(v);\n        }\n      } else if (declaration != init && refCount == 2) {\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n          // The only reference is the initialization, remove the assignment and\n          // the variable declaration.\n          Node value = init.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(v, value, referenceInfo.references);\n          staleVars.add(v);\n        }\n      }\n\n      // If this variable was not inlined normally, check if we can\n      // inline an alias of it. (If the variable was inlined, then the\n      // reference data is out of sync. We're better off just waiting for\n      // the next pass.)\n      if (\n          !staleVars.contains(v) && referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime()) {\n        List<Reference> refs = referenceInfo.references;\n        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n          Node nameNode = refs.get(i).getNameNode();\n          if (aliasCandidates.containsKey(nameNode)) {\n            AliasCandidate candidate = aliasCandidates.get(nameNode);\n            if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias)) {\n              Reference aliasInit;\n              aliasInit = candidate.refInfo.getInitializingReference();\n              Node value = aliasInit.getAssignedValue();\n              Preconditions.checkNotNull(value);\n              inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);\n              staleVars.add(candidate.alias);\n            }\n          }\n        }\n      }\n    }",
        "test_stack": "com.google.javascript.jscomp.InlineVariablesTest::testArgumentsModifiedInInnerFunction\njunit.framework.AssertionFailedError:\nExpected: function g(callback){function inner(callback$$1){var x=callback$$1;arguments[0]=this;x.apply(this)}callback.apply(this,arguments)}\nResult: function g(callback){function inner(callback$$1){arguments[0]=this;callback$$1.apply(this)}callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                FUNCTION inner 3 [sourcename: expected0]\n                    NAME inner 3 [sourcename: expected0]\n                    LP 3 [sourcename: expected0]\n                        NAME callback$$1 3 [sourcename: expected0]\n                    BLOCK 3 [sourcename: expected0]\n                        VAR 3 [sourcename: expected0]\n                            NAME x 3 [sourcename: expected0]\n                                NAME callback$$1 3 [sourcename: expected0]\n                        EXPR_RESULT 4 [sourcename: expected0]\n                            ASSIGN 4 [sourcename: expected0]\n                                GETELEM 4 [sourcename: expected0]\n                                    NAME arguments 4 [sourcename: expected0]\n                                    NUMBER 0.0 4 [sourcename: expected0]\n                                THIS 4 [sourcename: expected0]\n                        EXPR_RESULT 5 [sourcename: expected0]\n                            CALL 5 [sourcename: expected0]\n                                GETPROP 5 [sourcename: expected0]\n                                    NAME x 5 [sourcename: expected0]\n                                    STRING apply 5 [sourcename: expected0]\n                                THIS 5 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    CALL 2 [sourcename: expected0]\n                        GETPROP 2 [sourcename: expected0]\n                            NAME callback 2 [sourcename: expected0]\n                            STRING apply 2 [sourcename: expected0]\n                        THIS 2 [sourcename: expected0]\n                        NAME arguments 2 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                FUNCTION inner 4 [sourcename: testcode]\n                    NAME inner 4 [sourcename: testcode]\n                    LP 4 [sourcename: testcode]\n                        NAME callback$$1 4 [sourcename: testcode]\n                    BLOCK 4 [sourcename: testcode]\n                        EXPR_RESULT 5 [sourcename: testcode]\n                            ASSIGN 5 [sourcename: testcode]\n                                GETELEM 5 [sourcename: testcode]\n                                    NAME arguments 5 [sourcename: testcode]\n                                    NUMBER 0.0 5 [sourcename: testcode]\n                                THIS 5 [sourcename: testcode]\n                        EXPR_RESULT 6 [sourcename: testcode]\n                            CALL 6 [sourcename: testcode]\n                                GETPROP 6 [sourcename: testcode]\n                                    NAME callback$$1 4 [sourcename: testcode]\n                                    STRING apply 6 [sourcename: testcode]\n                                THIS 6 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode]\n                        GETPROP 3 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                        NAME arguments 3 [sourcename: testcode]\n\n\nSubtree1: BLOCK 3 [sourcename: expected0]\n    VAR 3 [sourcename: expected0]\n        NAME x 3 [sourcename: expected0]\n            NAME callback$$1 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        ASSIGN 4 [sourcename: expected0]\n            GETELEM 4 [sourcename: expected0]\n                NAME arguments 4 [sourcename: expected0]\n                NUMBER 0.0 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME x 5 [sourcename: expected0]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        ASSIGN 5 [sourcename: testcode]\n            GETELEM 5 [sourcename: testcode]\n                NAME arguments 5 [sourcename: testcode]\n                NUMBER 0.0 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n    EXPR_RESULT 6 [sourcename: testcode]\n        CALL 6 [sourcename: testcode]\n            GETPROP 6 [sourcename: testcode]\n                NAME callback$$1 4 [sourcename: testcode]\n                STRING apply 6 [sourcename: testcode]\n            THIS 6 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testArgumentsModifiedInInnerFunction(InlineVariablesTest.java:1035)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testArgumentsModifiedInOuterFunction\njunit.framework.AssertionFailedError:\nExpected: function g(callback){function inner(callback$$1){callback$$1.apply(this)}var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){function inner(callback$$1){callback$$1.apply(this)}arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                FUNCTION inner 5 [sourcename: expected0]\n                    NAME inner 5 [sourcename: expected0]\n                    LP 5 [sourcename: expected0]\n                        NAME callback$$1 5 [sourcename: expected0]\n                    BLOCK 5 [sourcename: expected0]\n                        EXPR_RESULT 5 [sourcename: expected0]\n                            CALL 5 [sourcename: expected0]\n                                GETPROP 5 [sourcename: expected0]\n                                    NAME callback$$1 5 [sourcename: expected0]\n                                    STRING apply 5 [sourcename: expected0]\n                                THIS 5 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    ASSIGN 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                FUNCTION inner 5 [sourcename: testcode]\n                    NAME inner 5 [sourcename: testcode]\n                    LP 5 [sourcename: testcode]\n                        NAME callback$$1 5 [sourcename: testcode]\n                    BLOCK 5 [sourcename: testcode]\n                        EXPR_RESULT 6 [sourcename: testcode]\n                            CALL 6 [sourcename: testcode]\n                                GETPROP 6 [sourcename: testcode]\n                                    NAME callback$$1 5 [sourcename: testcode]\n                                    STRING apply 6 [sourcename: testcode]\n                                THIS 6 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    ASSIGN 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    FUNCTION inner 5 [sourcename: expected0]\n        NAME inner 5 [sourcename: expected0]\n        LP 5 [sourcename: expected0]\n            NAME callback$$1 5 [sourcename: expected0]\n        BLOCK 5 [sourcename: expected0]\n            EXPR_RESULT 5 [sourcename: expected0]\n                CALL 5 [sourcename: expected0]\n                    GETPROP 5 [sourcename: expected0]\n                        NAME callback$$1 5 [sourcename: expected0]\n                        STRING apply 5 [sourcename: expected0]\n                    THIS 5 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        ASSIGN 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    FUNCTION inner 5 [sourcename: testcode]\n        NAME inner 5 [sourcename: testcode]\n        LP 5 [sourcename: testcode]\n            NAME callback$$1 5 [sourcename: testcode]\n        BLOCK 5 [sourcename: testcode]\n            EXPR_RESULT 6 [sourcename: testcode]\n                CALL 6 [sourcename: testcode]\n                    GETPROP 6 [sourcename: testcode]\n                        NAME callback$$1 5 [sourcename: testcode]\n                        STRING apply 6 [sourcename: testcode]\n                    THIS 6 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        ASSIGN 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testArgumentsModifiedInOuterFunction(InlineVariablesTest.java:1014)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378ModifiedArguments1\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    ASSIGN 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    ASSIGN 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        ASSIGN 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        ASSIGN 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378ModifiedArguments1(InlineVariablesTest.java:915)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378ModifiedArguments2\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n                    NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n                        NAME callback 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    ASSIGN 4 [sourcename: expected0]\n                        GETELEM 4 [sourcename: expected0]\n                            NAME arguments 4 [sourcename: expected0]\n                            NUMBER 0.0 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                EXPR_RESULT 5 [sourcename: expected0]\n                    CALL 5 [sourcename: expected0]\n                        GETPROP 5 [sourcename: expected0]\n                            NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                            STRING apply 5 [sourcename: expected0]\n                        THIS 5 [sourcename: expected0]\n                        NAME arguments 5 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    ASSIGN 4 [sourcename: testcode]\n                        GETELEM 4 [sourcename: testcode]\n                            NAME arguments 4 [sourcename: testcode]\n                            NUMBER 0.0 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                EXPR_RESULT 5 [sourcename: testcode]\n                    CALL 5 [sourcename: testcode]\n                        GETPROP 5 [sourcename: testcode]\n                            NAME callback 3 [sourcename: testcode]\n                            STRING apply 5 [sourcename: testcode]\n                        THIS 5 [sourcename: testcode]\n                        NAME arguments 5 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n        NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n            NAME callback 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        ASSIGN 4 [sourcename: expected0]\n            GETELEM 4 [sourcename: expected0]\n                NAME arguments 4 [sourcename: expected0]\n                NUMBER 0.0 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n            NAME arguments 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        ASSIGN 4 [sourcename: testcode]\n            GETELEM 4 [sourcename: testcode]\n                NAME arguments 4 [sourcename: testcode]\n                NUMBER 0.0 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        CALL 5 [sourcename: testcode]\n            GETPROP 5 [sourcename: testcode]\n                NAME callback 3 [sourcename: testcode]\n                STRING apply 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n            NAME arguments 5 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378ModifiedArguments2(InlineVariablesTest.java:924)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments1\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments,this);f.apply(this,arguments)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments,this);callback.apply(this,arguments)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    CALL 3 [sourcename: expected0] [free_call: 1]\n                        NAME h 3 [sourcename: expected0]\n                        NAME arguments 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n        FUNCTION h 6 [sourcename: expected0]\n            NAME h 6 [sourcename: expected0]\n            LP 6 [sourcename: expected0]\n                NAME a 6 [sourcename: expected0]\n                NAME b 6 [sourcename: expected0]\n            BLOCK 6 [sourcename: expected0]\n                EXPR_RESULT 7 [sourcename: expected0]\n                    ASSIGN 7 [sourcename: expected0]\n                        GETELEM 7 [sourcename: expected0]\n                            NAME a 7 [sourcename: expected0]\n                            NUMBER 0.0 7 [sourcename: expected0]\n                        NAME b 7 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode] [free_call: 1]\n                        NAME h 3 [sourcename: testcode]\n                        NAME arguments 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n        FUNCTION h 6 [sourcename: testcode]\n            NAME h 6 [sourcename: testcode]\n            LP 6 [sourcename: testcode]\n                NAME a 6 [sourcename: testcode]\n                NAME b 6 [sourcename: testcode]\n            BLOCK 6 [sourcename: testcode]\n                EXPR_RESULT 7 [sourcename: testcode]\n                    ASSIGN 7 [sourcename: testcode]\n                        GETELEM 7 [sourcename: testcode]\n                            NAME a 7 [sourcename: testcode]\n                            NUMBER 0.0 7 [sourcename: testcode]\n                        NAME b 7 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        CALL 3 [sourcename: expected0] [free_call: 1]\n            NAME h 3 [sourcename: expected0]\n            NAME arguments 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        CALL 3 [sourcename: testcode] [free_call: 1]\n            NAME h 3 [sourcename: testcode]\n            NAME arguments 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments1(InlineVariablesTest.java:934)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments2\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments,this);f.apply(this)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments,this);callback.apply(this)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n                    NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n                        NAME callback 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0] [free_call: 1]\n                        NAME h 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                EXPR_RESULT 5 [sourcename: expected0]\n                    CALL 5 [sourcename: expected0]\n                        GETPROP 5 [sourcename: expected0]\n                            NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                            STRING apply 5 [sourcename: expected0]\n                        THIS 5 [sourcename: expected0]\n        FUNCTION h 7 [sourcename: expected0]\n            NAME h 7 [sourcename: expected0]\n            LP 7 [sourcename: expected0]\n                NAME a 7 [sourcename: expected0]\n                NAME b 7 [sourcename: expected0]\n            BLOCK 7 [sourcename: expected0]\n                EXPR_RESULT 8 [sourcename: expected0]\n                    ASSIGN 8 [sourcename: expected0]\n                        GETELEM 8 [sourcename: expected0]\n                            NAME a 8 [sourcename: expected0]\n                            NUMBER 0.0 8 [sourcename: expected0]\n                        NAME b 8 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode] [free_call: 1]\n                        NAME h 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                EXPR_RESULT 5 [sourcename: testcode]\n                    CALL 5 [sourcename: testcode]\n                        GETPROP 5 [sourcename: testcode]\n                            NAME callback 3 [sourcename: testcode]\n                            STRING apply 5 [sourcename: testcode]\n                        THIS 5 [sourcename: testcode]\n        FUNCTION h 7 [sourcename: testcode]\n            NAME h 7 [sourcename: testcode]\n            LP 7 [sourcename: testcode]\n                NAME a 7 [sourcename: testcode]\n                NAME b 7 [sourcename: testcode]\n            BLOCK 7 [sourcename: testcode]\n                EXPR_RESULT 8 [sourcename: testcode]\n                    ASSIGN 8 [sourcename: testcode]\n                        GETELEM 8 [sourcename: testcode]\n                            NAME a 8 [sourcename: testcode]\n                            NUMBER 0.0 8 [sourcename: testcode]\n                        NAME b 8 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n        NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n            NAME callback 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0] [free_call: 1]\n            NAME h 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode] [free_call: 1]\n            NAME h 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        CALL 5 [sourcename: testcode]\n            GETPROP 5 [sourcename: testcode]\n                NAME callback 3 [sourcename: testcode]\n                STRING apply 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments2(InlineVariablesTest.java:946)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments4\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments[0],this);f.apply(this,arguments)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments[0],this);callback.apply(this,arguments)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    CALL 3 [sourcename: expected0] [free_call: 1]\n                        NAME h 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n        FUNCTION h 6 [sourcename: expected0]\n            NAME h 6 [sourcename: expected0]\n            LP 6 [sourcename: expected0]\n                NAME a 6 [sourcename: expected0]\n                NAME b 6 [sourcename: expected0]\n            BLOCK 6 [sourcename: expected0]\n                EXPR_RESULT 7 [sourcename: expected0]\n                    ASSIGN 7 [sourcename: expected0]\n                        GETELEM 7 [sourcename: expected0]\n                            NAME a 7 [sourcename: expected0]\n                            NUMBER 0.0 7 [sourcename: expected0]\n                        NAME b 7 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode] [free_call: 1]\n                        NAME h 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n        FUNCTION h 6 [sourcename: testcode]\n            NAME h 6 [sourcename: testcode]\n            LP 6 [sourcename: testcode]\n                NAME a 6 [sourcename: testcode]\n                NAME b 6 [sourcename: testcode]\n            BLOCK 6 [sourcename: testcode]\n                EXPR_RESULT 7 [sourcename: testcode]\n                    ASSIGN 7 [sourcename: testcode]\n                        GETELEM 7 [sourcename: testcode]\n                            NAME a 7 [sourcename: testcode]\n                            NUMBER 0.0 7 [sourcename: testcode]\n                        NAME b 7 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        CALL 3 [sourcename: expected0] [free_call: 1]\n            NAME h 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        CALL 3 [sourcename: testcode] [free_call: 1]\n            NAME h 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments4(InlineVariablesTest.java:970)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "test(\n",
        "buggy_lines_in_method": [
            2,
            47
        ],
        "buggy_statements": [
            "        Var v, ReferenceCollection referenceInfo) {",
            "      if ("
        ],
        "buggy_method_src_endswith_buggy_statement": "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo) {\n      int refCount = referenceInfo.references.size();\n      Reference declaration = referenceInfo.references.get(0);\n      Reference init = referenceInfo.getInitializingReference();\n      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n      if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n          value = init.getAssignedValue();\n        } else {\n          // Create a new node for variable that is never initialized.\n          Node srcLocation = declaration.getNameNode();\n          value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n      } else if (refCount == firstRefAfterInit) {\n        // The variable likely only read once, try some more\n        // complex inlining heuristics.\n        Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);\n        if (canInline(declaration, init, reference)) {\n          inline(v, declaration, init, reference);\n          staleVars.add(v);\n        }\n      } else if (declaration != init && refCount == 2) {\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n          // The only reference is the initialization, remove the assignment and\n          // the variable declaration.\n          Node value = init.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(v, value, referenceInfo.references);\n          staleVars.add(v);\n        }\n      }\n\n      // If this variable was not inlined normally, check if we can\n      // inline an alias of it. (If the variable was inlined, then the\n      // reference data is out of sync. We're better off just waiting for\n      // the next pass.)\n      if ("
    },
    {
        "buggy_file": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "buggy_method": {
            "method_name": "visit",
            "method_body": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.NAME) {\n      Var v = t.getScope().getVar(n.getString());\n      if (v != null && varFilter.apply(v)) {\n        addReference(t, v,\n            new Reference(n, parent, t, blockStack.peek()));\n      }\n    }\n\n    if (isBlockBoundary(n, parent)) {\n      blockStack.pop();\n    }\n  }",
            "start_line": 121,
            "end_line": 133,
            "buggy_lines": [
                123
            ]
        },
        "buggy_method_src": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.NAME) {\n      Var v = t.getScope().getVar(n.getString());\n      if (v != null && varFilter.apply(v)) {\n        addReference(t, v,\n            new Reference(n, parent, t, blockStack.peek()));\n      }\n    }\n\n    if (isBlockBoundary(n, parent)) {\n      blockStack.pop();\n    }\n  }",
        "test_stack": "com.google.javascript.jscomp.InlineVariablesTest::testArgumentsModifiedInInnerFunction\njunit.framework.AssertionFailedError:\nExpected: function g(callback){function inner(callback$$1){var x=callback$$1;arguments[0]=this;x.apply(this)}callback.apply(this,arguments)}\nResult: function g(callback){function inner(callback$$1){arguments[0]=this;callback$$1.apply(this)}callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                FUNCTION inner 3 [sourcename: expected0]\n                    NAME inner 3 [sourcename: expected0]\n                    LP 3 [sourcename: expected0]\n                        NAME callback$$1 3 [sourcename: expected0]\n                    BLOCK 3 [sourcename: expected0]\n                        VAR 3 [sourcename: expected0]\n                            NAME x 3 [sourcename: expected0]\n                                NAME callback$$1 3 [sourcename: expected0]\n                        EXPR_RESULT 4 [sourcename: expected0]\n                            ASSIGN 4 [sourcename: expected0]\n                                GETELEM 4 [sourcename: expected0]\n                                    NAME arguments 4 [sourcename: expected0]\n                                    NUMBER 0.0 4 [sourcename: expected0]\n                                THIS 4 [sourcename: expected0]\n                        EXPR_RESULT 5 [sourcename: expected0]\n                            CALL 5 [sourcename: expected0]\n                                GETPROP 5 [sourcename: expected0]\n                                    NAME x 5 [sourcename: expected0]\n                                    STRING apply 5 [sourcename: expected0]\n                                THIS 5 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    CALL 2 [sourcename: expected0]\n                        GETPROP 2 [sourcename: expected0]\n                            NAME callback 2 [sourcename: expected0]\n                            STRING apply 2 [sourcename: expected0]\n                        THIS 2 [sourcename: expected0]\n                        NAME arguments 2 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                FUNCTION inner 4 [sourcename: testcode]\n                    NAME inner 4 [sourcename: testcode]\n                    LP 4 [sourcename: testcode]\n                        NAME callback$$1 4 [sourcename: testcode]\n                    BLOCK 4 [sourcename: testcode]\n                        EXPR_RESULT 5 [sourcename: testcode]\n                            ASSIGN 5 [sourcename: testcode]\n                                GETELEM 5 [sourcename: testcode]\n                                    NAME arguments 5 [sourcename: testcode]\n                                    NUMBER 0.0 5 [sourcename: testcode]\n                                THIS 5 [sourcename: testcode]\n                        EXPR_RESULT 6 [sourcename: testcode]\n                            CALL 6 [sourcename: testcode]\n                                GETPROP 6 [sourcename: testcode]\n                                    NAME callback$$1 4 [sourcename: testcode]\n                                    STRING apply 6 [sourcename: testcode]\n                                THIS 6 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode]\n                        GETPROP 3 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                        NAME arguments 3 [sourcename: testcode]\n\n\nSubtree1: BLOCK 3 [sourcename: expected0]\n    VAR 3 [sourcename: expected0]\n        NAME x 3 [sourcename: expected0]\n            NAME callback$$1 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        ASSIGN 4 [sourcename: expected0]\n            GETELEM 4 [sourcename: expected0]\n                NAME arguments 4 [sourcename: expected0]\n                NUMBER 0.0 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME x 5 [sourcename: expected0]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        ASSIGN 5 [sourcename: testcode]\n            GETELEM 5 [sourcename: testcode]\n                NAME arguments 5 [sourcename: testcode]\n                NUMBER 0.0 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n    EXPR_RESULT 6 [sourcename: testcode]\n        CALL 6 [sourcename: testcode]\n            GETPROP 6 [sourcename: testcode]\n                NAME callback$$1 4 [sourcename: testcode]\n                STRING apply 6 [sourcename: testcode]\n            THIS 6 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testArgumentsModifiedInInnerFunction(InlineVariablesTest.java:1035)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testArgumentsModifiedInOuterFunction\njunit.framework.AssertionFailedError:\nExpected: function g(callback){function inner(callback$$1){callback$$1.apply(this)}var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){function inner(callback$$1){callback$$1.apply(this)}arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                FUNCTION inner 5 [sourcename: expected0]\n                    NAME inner 5 [sourcename: expected0]\n                    LP 5 [sourcename: expected0]\n                        NAME callback$$1 5 [sourcename: expected0]\n                    BLOCK 5 [sourcename: expected0]\n                        EXPR_RESULT 5 [sourcename: expected0]\n                            CALL 5 [sourcename: expected0]\n                                GETPROP 5 [sourcename: expected0]\n                                    NAME callback$$1 5 [sourcename: expected0]\n                                    STRING apply 5 [sourcename: expected0]\n                                THIS 5 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    ASSIGN 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                FUNCTION inner 5 [sourcename: testcode]\n                    NAME inner 5 [sourcename: testcode]\n                    LP 5 [sourcename: testcode]\n                        NAME callback$$1 5 [sourcename: testcode]\n                    BLOCK 5 [sourcename: testcode]\n                        EXPR_RESULT 6 [sourcename: testcode]\n                            CALL 6 [sourcename: testcode]\n                                GETPROP 6 [sourcename: testcode]\n                                    NAME callback$$1 5 [sourcename: testcode]\n                                    STRING apply 6 [sourcename: testcode]\n                                THIS 6 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    ASSIGN 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    FUNCTION inner 5 [sourcename: expected0]\n        NAME inner 5 [sourcename: expected0]\n        LP 5 [sourcename: expected0]\n            NAME callback$$1 5 [sourcename: expected0]\n        BLOCK 5 [sourcename: expected0]\n            EXPR_RESULT 5 [sourcename: expected0]\n                CALL 5 [sourcename: expected0]\n                    GETPROP 5 [sourcename: expected0]\n                        NAME callback$$1 5 [sourcename: expected0]\n                        STRING apply 5 [sourcename: expected0]\n                    THIS 5 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        ASSIGN 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    FUNCTION inner 5 [sourcename: testcode]\n        NAME inner 5 [sourcename: testcode]\n        LP 5 [sourcename: testcode]\n            NAME callback$$1 5 [sourcename: testcode]\n        BLOCK 5 [sourcename: testcode]\n            EXPR_RESULT 6 [sourcename: testcode]\n                CALL 6 [sourcename: testcode]\n                    GETPROP 6 [sourcename: testcode]\n                        NAME callback$$1 5 [sourcename: testcode]\n                        STRING apply 6 [sourcename: testcode]\n                    THIS 6 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        ASSIGN 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testArgumentsModifiedInOuterFunction(InlineVariablesTest.java:1014)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378ModifiedArguments1\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    ASSIGN 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    ASSIGN 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        ASSIGN 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        ASSIGN 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378ModifiedArguments1(InlineVariablesTest.java:915)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378ModifiedArguments2\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;arguments[0]=this;f.apply(this,arguments)}\nResult: function g(callback){arguments[0]=this;callback.apply(this,arguments)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n                    NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n                        NAME callback 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    ASSIGN 4 [sourcename: expected0]\n                        GETELEM 4 [sourcename: expected0]\n                            NAME arguments 4 [sourcename: expected0]\n                            NUMBER 0.0 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                EXPR_RESULT 5 [sourcename: expected0]\n                    CALL 5 [sourcename: expected0]\n                        GETPROP 5 [sourcename: expected0]\n                            NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                            STRING apply 5 [sourcename: expected0]\n                        THIS 5 [sourcename: expected0]\n                        NAME arguments 5 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    ASSIGN 4 [sourcename: testcode]\n                        GETELEM 4 [sourcename: testcode]\n                            NAME arguments 4 [sourcename: testcode]\n                            NUMBER 0.0 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                EXPR_RESULT 5 [sourcename: testcode]\n                    CALL 5 [sourcename: testcode]\n                        GETPROP 5 [sourcename: testcode]\n                            NAME callback 3 [sourcename: testcode]\n                            STRING apply 5 [sourcename: testcode]\n                        THIS 5 [sourcename: testcode]\n                        NAME arguments 5 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n        NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n            NAME callback 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        ASSIGN 4 [sourcename: expected0]\n            GETELEM 4 [sourcename: expected0]\n                NAME arguments 4 [sourcename: expected0]\n                NUMBER 0.0 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n            NAME arguments 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        ASSIGN 4 [sourcename: testcode]\n            GETELEM 4 [sourcename: testcode]\n                NAME arguments 4 [sourcename: testcode]\n                NUMBER 0.0 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        CALL 5 [sourcename: testcode]\n            GETPROP 5 [sourcename: testcode]\n                NAME callback 3 [sourcename: testcode]\n                STRING apply 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n            NAME arguments 5 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378ModifiedArguments2(InlineVariablesTest.java:924)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments1\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments,this);f.apply(this,arguments)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments,this);callback.apply(this,arguments)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    CALL 3 [sourcename: expected0] [free_call: 1]\n                        NAME h 3 [sourcename: expected0]\n                        NAME arguments 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n        FUNCTION h 6 [sourcename: expected0]\n            NAME h 6 [sourcename: expected0]\n            LP 6 [sourcename: expected0]\n                NAME a 6 [sourcename: expected0]\n                NAME b 6 [sourcename: expected0]\n            BLOCK 6 [sourcename: expected0]\n                EXPR_RESULT 7 [sourcename: expected0]\n                    ASSIGN 7 [sourcename: expected0]\n                        GETELEM 7 [sourcename: expected0]\n                            NAME a 7 [sourcename: expected0]\n                            NUMBER 0.0 7 [sourcename: expected0]\n                        NAME b 7 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode] [free_call: 1]\n                        NAME h 3 [sourcename: testcode]\n                        NAME arguments 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n        FUNCTION h 6 [sourcename: testcode]\n            NAME h 6 [sourcename: testcode]\n            LP 6 [sourcename: testcode]\n                NAME a 6 [sourcename: testcode]\n                NAME b 6 [sourcename: testcode]\n            BLOCK 6 [sourcename: testcode]\n                EXPR_RESULT 7 [sourcename: testcode]\n                    ASSIGN 7 [sourcename: testcode]\n                        GETELEM 7 [sourcename: testcode]\n                            NAME a 7 [sourcename: testcode]\n                            NUMBER 0.0 7 [sourcename: testcode]\n                        NAME b 7 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        CALL 3 [sourcename: expected0] [free_call: 1]\n            NAME h 3 [sourcename: expected0]\n            NAME arguments 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        CALL 3 [sourcename: testcode] [free_call: 1]\n            NAME h 3 [sourcename: testcode]\n            NAME arguments 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments1(InlineVariablesTest.java:934)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments2\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments,this);f.apply(this)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments,this);callback.apply(this)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n                    NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n                        NAME callback 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0] [free_call: 1]\n                        NAME h 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                EXPR_RESULT 5 [sourcename: expected0]\n                    CALL 5 [sourcename: expected0]\n                        GETPROP 5 [sourcename: expected0]\n                            NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                            STRING apply 5 [sourcename: expected0]\n                        THIS 5 [sourcename: expected0]\n        FUNCTION h 7 [sourcename: expected0]\n            NAME h 7 [sourcename: expected0]\n            LP 7 [sourcename: expected0]\n                NAME a 7 [sourcename: expected0]\n                NAME b 7 [sourcename: expected0]\n            BLOCK 7 [sourcename: expected0]\n                EXPR_RESULT 8 [sourcename: expected0]\n                    ASSIGN 8 [sourcename: expected0]\n                        GETELEM 8 [sourcename: expected0]\n                            NAME a 8 [sourcename: expected0]\n                            NUMBER 0.0 8 [sourcename: expected0]\n                        NAME b 8 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode] [free_call: 1]\n                        NAME h 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                EXPR_RESULT 5 [sourcename: testcode]\n                    CALL 5 [sourcename: testcode]\n                        GETPROP 5 [sourcename: testcode]\n                            NAME callback 3 [sourcename: testcode]\n                            STRING apply 5 [sourcename: testcode]\n                        THIS 5 [sourcename: testcode]\n        FUNCTION h 7 [sourcename: testcode]\n            NAME h 7 [sourcename: testcode]\n            LP 7 [sourcename: testcode]\n                NAME a 7 [sourcename: testcode]\n                NAME b 7 [sourcename: testcode]\n            BLOCK 7 [sourcename: testcode]\n                EXPR_RESULT 8 [sourcename: testcode]\n                    ASSIGN 8 [sourcename: testcode]\n                        GETELEM 8 [sourcename: testcode]\n                            NAME a 8 [sourcename: testcode]\n                            NUMBER 0.0 8 [sourcename: testcode]\n                        NAME b 8 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 3 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n        NAME f 3 [sourcename: expected0] [is_constant_name: 1]\n            NAME callback 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0] [free_call: 1]\n            NAME h 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n    EXPR_RESULT 5 [sourcename: expected0]\n        CALL 5 [sourcename: expected0]\n            GETPROP 5 [sourcename: expected0]\n                NAME f 5 [sourcename: expected0] [is_constant_name: 1]\n                STRING apply 5 [sourcename: expected0]\n            THIS 5 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode] [free_call: 1]\n            NAME h 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n    EXPR_RESULT 5 [sourcename: testcode]\n        CALL 5 [sourcename: testcode]\n            GETPROP 5 [sourcename: testcode]\n                NAME callback 3 [sourcename: testcode]\n                STRING apply 5 [sourcename: testcode]\n            THIS 5 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments2(InlineVariablesTest.java:946)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments4\njunit.framework.AssertionFailedError:\nExpected: function g(callback){var f=callback;h(arguments[0],this);f.apply(this,arguments)}function h(a,b){a[0]=b}\nResult: function g(callback){h(arguments[0],this);callback.apply(this,arguments)}function h(a,b){a[0]=b}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION g 1 [sourcename: expected0]\n            NAME g 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME callback 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 2 [sourcename: expected0]\n                    NAME f 2 [sourcename: expected0]\n                        NAME callback 2 [sourcename: expected0]\n                EXPR_RESULT 3 [sourcename: expected0]\n                    CALL 3 [sourcename: expected0] [free_call: 1]\n                        NAME h 3 [sourcename: expected0]\n                        GETELEM 3 [sourcename: expected0]\n                            NAME arguments 3 [sourcename: expected0]\n                            NUMBER 0.0 3 [sourcename: expected0]\n                        THIS 3 [sourcename: expected0]\n                EXPR_RESULT 4 [sourcename: expected0]\n                    CALL 4 [sourcename: expected0]\n                        GETPROP 4 [sourcename: expected0]\n                            NAME f 4 [sourcename: expected0]\n                            STRING apply 4 [sourcename: expected0]\n                        THIS 4 [sourcename: expected0]\n                        NAME arguments 4 [sourcename: expected0]\n        FUNCTION h 6 [sourcename: expected0]\n            NAME h 6 [sourcename: expected0]\n            LP 6 [sourcename: expected0]\n                NAME a 6 [sourcename: expected0]\n                NAME b 6 [sourcename: expected0]\n            BLOCK 6 [sourcename: expected0]\n                EXPR_RESULT 7 [sourcename: expected0]\n                    ASSIGN 7 [sourcename: expected0]\n                        GETELEM 7 [sourcename: expected0]\n                            NAME a 7 [sourcename: expected0]\n                            NUMBER 0.0 7 [sourcename: expected0]\n                        NAME b 7 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION g 1 [sourcename: testcode]\n            NAME g 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME callback 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                EXPR_RESULT 3 [sourcename: testcode]\n                    CALL 3 [sourcename: testcode] [free_call: 1]\n                        NAME h 3 [sourcename: testcode]\n                        GETELEM 3 [sourcename: testcode]\n                            NAME arguments 3 [sourcename: testcode]\n                            NUMBER 0.0 3 [sourcename: testcode]\n                        THIS 3 [sourcename: testcode]\n                EXPR_RESULT 4 [sourcename: testcode]\n                    CALL 4 [sourcename: testcode]\n                        GETPROP 4 [sourcename: testcode]\n                            NAME callback 2 [sourcename: testcode]\n                            STRING apply 4 [sourcename: testcode]\n                        THIS 4 [sourcename: testcode]\n                        NAME arguments 4 [sourcename: testcode]\n        FUNCTION h 6 [sourcename: testcode]\n            NAME h 6 [sourcename: testcode]\n            LP 6 [sourcename: testcode]\n                NAME a 6 [sourcename: testcode]\n                NAME b 6 [sourcename: testcode]\n            BLOCK 6 [sourcename: testcode]\n                EXPR_RESULT 7 [sourcename: testcode]\n                    ASSIGN 7 [sourcename: testcode]\n                        GETELEM 7 [sourcename: testcode]\n                            NAME a 7 [sourcename: testcode]\n                            NUMBER 0.0 7 [sourcename: testcode]\n                        NAME b 7 [sourcename: testcode]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0]\n    VAR 2 [sourcename: expected0]\n        NAME f 2 [sourcename: expected0]\n            NAME callback 2 [sourcename: expected0]\n    EXPR_RESULT 3 [sourcename: expected0]\n        CALL 3 [sourcename: expected0] [free_call: 1]\n            NAME h 3 [sourcename: expected0]\n            GETELEM 3 [sourcename: expected0]\n                NAME arguments 3 [sourcename: expected0]\n                NUMBER 0.0 3 [sourcename: expected0]\n            THIS 3 [sourcename: expected0]\n    EXPR_RESULT 4 [sourcename: expected0]\n        CALL 4 [sourcename: expected0]\n            GETPROP 4 [sourcename: expected0]\n                NAME f 4 [sourcename: expected0]\n                STRING apply 4 [sourcename: expected0]\n            THIS 4 [sourcename: expected0]\n            NAME arguments 4 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode]\n    EXPR_RESULT 3 [sourcename: testcode]\n        CALL 3 [sourcename: testcode] [free_call: 1]\n            NAME h 3 [sourcename: testcode]\n            GETELEM 3 [sourcename: testcode]\n                NAME arguments 3 [sourcename: testcode]\n                NUMBER 0.0 3 [sourcename: testcode]\n            THIS 3 [sourcename: testcode]\n    EXPR_RESULT 4 [sourcename: testcode]\n        CALL 4 [sourcename: testcode]\n            GETPROP 4 [sourcename: testcode]\n                NAME callback 2 [sourcename: testcode]\n                STRING apply 4 [sourcename: testcode]\n            THIS 4 [sourcename: testcode]\n            NAME arguments 4 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.InlineVariablesTest.testIssue378EscapedArguments4(InlineVariablesTest.java:970)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "test(\n",
        "buggy_lines_in_method": [
            3
        ],
        "buggy_statements": [
            "      Var v = t.getScope().getVar(n.getString());"
        ],
        "buggy_method_src_endswith_buggy_statement": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.NAME) {\n      Var v = t.getScope().getVar(n.getString());"
    }
]