
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'solve', 'method_body': 'static void solve() {\n        int m = in.nextInt();\n        int n = in.nextInt();\n        int k = in.nextInt();\n        int sx = in.nextInt() - 1, sy = in.nextInt() - 1;\n        long[][] grid = new long[m][n];\n        for (int i = 0; i < m; i++) {\n            grid[i] = in.nextLongArray(n);\n        }\n        long ans = 0;\n        queue.offer(new Node(sx, sy, 0, 0));\n        while (!queue.isEmpty()) {\n            Node node = queue.poll();\n            int x = node.x, y = node.y;\n            for (int[] d : dirs) {\n                int nx = x + d[0], ny = y + d[1];\n                if (node.k == k) {\n                    continue;\n                }\n                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {\n                    long cur = node.s + grid[nx][ny] * (k - node.k);\n                    if (cur > dp[nx][ny]) {\n                        dp[nx][ny] = cur;\n                        ans = Math.max(ans, cur);\n                        queue.offer(new Node(nx, ny, node.k + 1, node.s + grid[nx][ny]));\n                    }\n                }\n            }\n        }\n\n        out.println(ans);\n    }', 'start_line': 28, 'end_line': 59}
================== buggy_method_src ==================
static void solve() {
        int m = in.nextInt();
        int n = in.nextInt();
        int k = in.nextInt();
        int sx = in.nextInt() - 1, sy = in.nextInt() - 1;
        long[][] grid = new long[m][n];
        for (int i = 0; i < m; i++) {
            grid[i] = in.nextLongArray(n);
        }
        long ans = 0;
        queue.offer(new Node(sx, sy, 0, 0));
        while (!queue.isEmpty()) {
            Node node = queue.poll();
            int x = node.x, y = node.y;
            for (int[] d : dirs) {
                int nx = x + d[0], ny = y + d[1];
                if (node.k == k) {
                    continue;
                }
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    long cur = node.s + grid[nx][ny] * (k - node.k);
                    if (cur > dp[nx][ny]) {
                        dp[nx][ny] = cur;
                        ans = Math.max(ans, cur);
                        queue.offer(new Node(nx, ny, node.k + 1, node.s + grid[nx][ny]));
                    }
                }
            }
        }

        out.println(ans);
    }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[10]
================== buggy_statements ==================
['        long ans = 0;']
================== buggy_method_src_endswith_buggy_statement ==================
static void solve() {
        int m = in.nextInt();
        int n = in.nextInt();
        int k = in.nextInt();
        int sx = in.nextInt() - 1, sy = in.nextInt() - 1;
        long[][] grid = new long[m][n];
        for (int i = 0; i < m; i++) {
            grid[i] = in.nextLongArray(n);
        }
        long ans = 0;