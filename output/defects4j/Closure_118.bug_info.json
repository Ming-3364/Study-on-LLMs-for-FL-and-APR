[
    {
        "buggy_file": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "buggy_method": {
            "method_name": "handleObjectLit",
            "method_body": "private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
            "start_line": 490,
            "end_line": 513,
            "buggy_lines": [
                497
            ]
        },
        "buggy_method_src": "private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
        "test_stack": "com.google.javascript.jscomp.DisambiguatePropertiesTest::testOneType4\njunit.framework.ComparisonFailure: expected:<{[]}> but was:<{[a=[[Foo.prototype]]]}>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(DisambiguatePropertiesTest.java:1372)\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testOneType4(DisambiguatePropertiesTest.java:128)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.DisambiguatePropertiesTest::testTwoTypes4\njunit.framework.AssertionFailedError:\nExpected: function Foo(){}Foo.prototype={a:0};var F=new Foo;F.a=0;function Bar(){}Bar.prototype={\"a\":0};var B=new Bar;B[\"a\"]=0\nResult: function Foo(){}Foo.prototype={Foo_prototype$a:0};var F=new Foo;F.Foo_prototype$a=0;function Bar(){}Bar.prototype={\"Bar_prototype$a\":0};var B=new Bar;B[\"a\"]=0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION Foo 1 [source_file: expected0]\n            NAME Foo 1 [source_file: expected0]\n            PARAM_LIST 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME Foo 1 [source_file: expected0]\n                    STRING prototype 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n                    STRING_KEY a 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME F 1 [source_file: expected0]\n                NEW 1 [source_file: expected0]\n                    NAME Foo 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME F 1 [source_file: expected0]\n                    STRING a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION Bar 1 [source_file: expected0]\n            NAME Bar 1 [source_file: expected0]\n            PARAM_LIST 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME Bar 1 [source_file: expected0]\n                    STRING prototype 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n                    STRING_KEY a 1 [quoted: 1] [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME B 1 [source_file: expected0]\n                NEW 1 [source_file: expected0]\n                    NAME Bar 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETELEM 1 [source_file: expected0]\n                    NAME B 1 [source_file: expected0]\n                    STRING a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1] : global this\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION Foo 1 [jsdoc_info: JSDocInfo] [source_file: testcode] : function (new:Foo): undefined\n            NAME Foo 1 [source_file: testcode] : function (new:Foo): undefined\n            PARAM_LIST 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n        EXPR_RESULT 2 [source_file: testcode]\n            ASSIGN 2 [source_file: testcode] : Foo.prototype\n                GETPROP 2 [source_file: testcode] : Foo.prototype\n                    NAME Foo 2 [source_file: testcode] : function (new:Foo): undefined\n                    STRING prototype 2 [source_file: testcode] : string\n                OBJECTLIT 2 [source_file: testcode] : Foo.prototype\n                    STRING_KEY Foo_prototype$a 2 [source_file: testcode] : number\n                        NUMBER 0.0 2 [source_file: testcode] : number\n        VAR 3 [jsdoc_info: JSDocInfo] [source_file: testcode]\n            NAME F 3 [source_file: testcode] : Foo\n                NEW 3 [source_file: testcode] : Foo\n                    NAME Foo 3 [source_file: testcode] : function (new:Foo): undefined\n        EXPR_RESULT 4 [source_file: testcode]\n            ASSIGN 4 [source_file: testcode] : number\n                GETPROP 4 [source_file: testcode] : number\n                    NAME F 4 [source_file: testcode] : (Foo|null)\n                    STRING Foo_prototype$a 4 [source_file: testcode] : string\n                NUMBER 0.0 4 [source_file: testcode] : number\n        FUNCTION Bar 4 [jsdoc_info: JSDocInfo] [source_file: testcode] : function (new:Bar): undefined\n            NAME Bar 4 [source_file: testcode] : function (new:Bar): undefined\n            PARAM_LIST 4 [source_file: testcode]\n            BLOCK 4 [source_file: testcode]\n        EXPR_RESULT 5 [source_file: testcode]\n            ASSIGN 5 [source_file: testcode] : Bar.prototype\n                GETPROP 5 [source_file: testcode] : Bar.prototype\n                    NAME Bar 5 [source_file: testcode] : function (new:Bar): undefined\n                    STRING prototype 5 [source_file: testcode] : string\n                OBJECTLIT 5 [source_file: testcode] : Bar.prototype\n                    STRING_KEY Bar_prototype$a 5 [quoted: 1] [source_file: testcode] : number\n                        NUMBER 0.0 5 [source_file: testcode] : number\n        VAR 6 [jsdoc_info: JSDocInfo] [source_file: testcode]\n            NAME B 6 [source_file: testcode] : Bar\n                NEW 6 [source_file: testcode] : Bar\n                    NAME Bar 6 [source_file: testcode] : function (new:Bar): undefined\n        EXPR_RESULT 7 [source_file: testcode]\n            ASSIGN 7 [source_file: testcode] : number\n                GETELEM 7 [source_file: testcode] : ?\n                    NAME B 7 [source_file: testcode] : (Bar|null)\n                    STRING a 7 [source_file: testcode] : string\n                NUMBER 0.0 7 [source_file: testcode] : number\n\n\nSubtree1: STRING_KEY a 1 [source_file: expected0]\n    NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: STRING_KEY Foo_prototype$a 2 [source_file: testcode] : number\n    NUMBER 0.0 2 [source_file: testcode] : number\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:957)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(DisambiguatePropertiesTest.java:1371)\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoTypes4(DisambiguatePropertiesTest.java:258)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "testSets(false, js, js, expected);\n",
        "buggy_lines_in_method": [
            8
        ],
        "buggy_statements": [
            "        String name = child.getString();"
        ],
        "buggy_method_src_endswith_buggy_statement": "private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();"
    }
]