
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'public static void main(String[] args) throws Exception {\n\t\t/* --- Input --- */\n\t\tvar br = new BufferedReader(new InputStreamReader(System.in));\n\t\tvar sa = br.readLine().split(" ");\n\t\tvar N = Integer.parseInt(sa[0]);\n\t\tvar T = Long.parseLong(sa[1]);\n\t\tvar S = br.readLine().toCharArray();\n\t\tsa = br.readLine().split(" ");\n\t\tvar X = new long[N];\n\t\tfor (var i = 0; i < N; i++) X[i] = Long.parseLong(sa[i]);\n\t\tbr.close();\n\t\t/* --- Process --- */\n\t\t// 負の方向を向いているアリの初期位置\n\t\tvar X0 = new ArrayList<Long>();\n\t\tfor(var i=0; i<N; i++) if (S[i] == \'0\') X0.add(X[i]);\n\t\tCollections.sort(X0);\n\t\t// 正の方向を向いているアリについて、負の方向を向いているアリのうち自分の位置〜2*Tの範囲にいるアリの数を数える\n\t\tvar ans = 0;\n\t\tfor (var i = 0; i < N; i++) {\n\t\t\tif (S[i] == \'0\') continue;\n\t\t\t// 正の方向で一番近いアリのインデックス\n\t\t\tvar l = ~Collections.binarySearch(X0, X[i], (a, b) -> (a.compareTo(b) > 0) ? 1 : -1);\n\t\t\t// 正の方向で2*Tの範囲内で一番遠いアリのインデックス\n\t\t\tvar r = ~Collections.binarySearch(X0, X[i] + T * 2, (a, b) -> (a.compareTo(b) > 0) ? 1 : -1)-1;\n\t\t\tans += r - l + 1;\n\t\t}\n\t\t/* --- Output --- */\n\t\tSystem.out.println(ans);\n\t\tSystem.out.flush();\n\t}\n}\n', 'start_line': 9, 'end_line': 38}
================== buggy_method_src ==================
public static void main(String[] args) throws Exception {
		/* --- Input --- */
		var br = new BufferedReader(new InputStreamReader(System.in));
		var sa = br.readLine().split(" ");
		var N = Integer.parseInt(sa[0]);
		var T = Long.parseLong(sa[1]);
		var S = br.readLine().toCharArray();
		sa = br.readLine().split(" ");
		var X = new long[N];
		for (var i = 0; i < N; i++) X[i] = Long.parseLong(sa[i]);
		br.close();
		/* --- Process --- */
		// 負の方向を向いているアリの初期位置
		var X0 = new ArrayList<Long>();
		for(var i=0; i<N; i++) if (S[i] == '0') X0.add(X[i]);
		Collections.sort(X0);
		// 正の方向を向いているアリについて、負の方向を向いているアリのうち自分の位置〜2*Tの範囲にいるアリの数を数える
		var ans = 0;
		for (var i = 0; i < N; i++) {
			if (S[i] == '0') continue;
			// 正の方向で一番近いアリのインデックス
			var l = ~Collections.binarySearch(X0, X[i], (a, b) -> (a.compareTo(b) > 0) ? 1 : -1);
			// 正の方向で2*Tの範囲内で一番遠いアリのインデックス
			var r = ~Collections.binarySearch(X0, X[i] + T * 2, (a, b) -> (a.compareTo(b) > 0) ? 1 : -1)-1;
			ans += r - l + 1;
		}
		/* --- Output --- */
		System.out.println(ans);
		System.out.flush();
	}
}

================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[18]
================== buggy_statements ==================
['\t\tvar ans = 0;']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] args) throws Exception {
		/* --- Input --- */
		var br = new BufferedReader(new InputStreamReader(System.in));
		var sa = br.readLine().split(" ");
		var N = Integer.parseInt(sa[0]);
		var T = Long.parseLong(sa[1]);
		var S = br.readLine().toCharArray();
		sa = br.readLine().split(" ");
		var X = new long[N];
		for (var i = 0; i < N; i++) X[i] = Long.parseLong(sa[i]);
		br.close();
		/* --- Process --- */
		// 負の方向を向いているアリの初期位置
		var X0 = new ArrayList<Long>();
		for(var i=0; i<N; i++) if (S[i] == '0') X0.add(X[i]);
		Collections.sort(X0);
		// 正の方向を向いているアリについて、負の方向を向いているアリのうち自分の位置〜2*Tの範囲にいるアリの数を数える
		var ans = 0;