[
    {
        "buggy_file": "src/com/google/javascript/jscomp/RenameLabels.java",
        "buggy_method": {
            "method_name": "visitLabel",
            "method_body": "private void visitLabel(Node node, Node parent) {\n      Node nameNode = node.getFirstChild();\n      Preconditions.checkState(nameNode != null);\n      String name = nameNode.getString();\n      LabelInfo li = getLabelInfo(name);\n      // This is a label...\n      if (li.referenced) {\n        String newName = getNameForId(li.id);\n        if (!name.equals(newName)) {\n          // ... and it is used, give it the short name.\n          nameNode.setString(newName);\n          compiler.reportCodeChange();\n        }\n      } else {\n        // ... and it is not referenced, just remove it.\n        Node newChild = node.getLastChild();\n        node.removeChild(newChild);\n        parent.replaceChild(node, newChild);\n        if (newChild.getType() == Token.BLOCK) {\n          NodeUtil.tryMergeBlock(newChild);\n        }\n        compiler.reportCodeChange();\n      }\n\n      // Remove the label from the current stack of labels.\n      namespaceStack.peek().renameMap.remove(name);\n    }",
            "start_line": 209,
            "end_line": 235,
            "buggy_lines": [
                215
            ]
        },
        "buggy_method_src": "private void visitLabel(Node node, Node parent) {\n      Node nameNode = node.getFirstChild();\n      Preconditions.checkState(nameNode != null);\n      String name = nameNode.getString();\n      LabelInfo li = getLabelInfo(name);\n      // This is a label...\n      if (li.referenced) {\n        String newName = getNameForId(li.id);\n        if (!name.equals(newName)) {\n          // ... and it is used, give it the short name.\n          nameNode.setString(newName);\n          compiler.reportCodeChange();\n        }\n      } else {\n        // ... and it is not referenced, just remove it.\n        Node newChild = node.getLastChild();\n        node.removeChild(newChild);\n        parent.replaceChild(node, newChild);\n        if (newChild.getType() == Token.BLOCK) {\n          NodeUtil.tryMergeBlock(newChild);\n        }\n        compiler.reportCodeChange();\n      }\n\n      // Remove the label from the current stack of labels.\n      namespaceStack.peek().renameMap.remove(name);\n    }",
        "test_stack": "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions31\njunit.framework.AssertionFailedError:\nExpected: lab:JSCompiler_inline_label_0:4\nResult: lab:lab:4\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        LABEL 1 [sourcename: expected0]\n            LABEL_NAME lab 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    LABEL 1 [sourcename: expected0]\n                        LABEL_NAME JSCompiler_inline_label_0 1 [sourcename: expected0]\n                        BLOCK 1 [sourcename: expected0]\n                            EXPR_RESULT 1 [sourcename: expected0]\n                                NUMBER 4.0 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        LABEL 1 [sourcename: testcode]\n            LABEL_NAME lab 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    LABEL 1 [sourcename: testcode]\n                        LABEL_NAME lab 1 [sourcename: testcode]\n                        BLOCK 1 [sourcename: testcode]\n                            EXPR_RESULT 1 [sourcename: testcode]\n                                NUMBER 4.0 1 [sourcename: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_0 1 [sourcename: expected0]\n\n\nSubtree2: LABEL_NAME lab 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions31(InlineFunctionsTest.java:388)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "test(\"function foo(){ lab:{4;} }\" +\n",
        "buggy_lines_in_method": [
            7
        ],
        "buggy_statements": [
            "      if (li.referenced) {"
        ],
        "buggy_method_src_endswith_buggy_statement": "private void visitLabel(Node node, Node parent) {\n      Node nameNode = node.getFirstChild();\n      Preconditions.checkState(nameNode != null);\n      String name = nameNode.getString();\n      LabelInfo li = getLabelInfo(name);\n      // This is a label...\n      if (li.referenced) {"
    }
]