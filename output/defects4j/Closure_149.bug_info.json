[
    {
        "buggy_file": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "buggy_method": {
            "method_name": "doRun",
            "method_body": "protected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n\n    compiler = createCompiler();\n    B options = createOptions();\n\n    JSModule[] modules = null;\n    Result result;\n\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n      options.outputCharset = Charsets.US_ASCII;\n    } else {\n      options.outputCharset = inputCharset;\n    }\n\n    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n      out = toWriter(options.jsOutputFile, inputCharset.name());\n    }\n\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n      modules = createJsModules(moduleSpecs, jsFiles);\n      result = compiler.compile(externs, modules, options);\n    } else {\n      List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n      JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n      inputList.toArray(inputs);\n      result = compiler.compile(externs, inputs, options);\n    }\n\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n      ((Writer)out).close();\n    }\n    return errCode;\n  }",
            "start_line": 504,
            "end_line": 547,
            "buggy_lines": [
                518,
                519,
                520,
                521,
                522
            ]
        },
        "buggy_method_src": "protected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n\n    compiler = createCompiler();\n    B options = createOptions();\n\n    JSModule[] modules = null;\n    Result result;\n\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n      options.outputCharset = Charsets.US_ASCII;\n    } else {\n      options.outputCharset = inputCharset;\n    }\n\n    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n      out = toWriter(options.jsOutputFile, inputCharset.name());\n    }\n\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n      modules = createJsModules(moduleSpecs, jsFiles);\n      result = compiler.compile(externs, modules, options);\n    } else {\n      List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n      JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n      inputList.toArray(inputs);\n      result = compiler.compile(externs, inputs, options);\n    }\n\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n      ((Writer)out).close();\n    }\n    return errCode;\n  }",
        "test_stack": "com.google.javascript.jscomp.CommandLineRunnerTest::testCharSetExpansion\njunit.framework.AssertionFailedError: expected:<US-ASCII> but was:<null>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion(CommandLineRunnerTest.java:385)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n",
        "buggy_lines_in_method": [
            15,
            16,
            17,
            18,
            19
        ],
        "buggy_statements": [
            "    if (inputCharset == Charsets.UTF_8) {",
            "      options.outputCharset = Charsets.US_ASCII;",
            "    } else {",
            "      options.outputCharset = inputCharset;",
            "    }"
        ],
        "buggy_method_src_endswith_buggy_statement": "protected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n\n    compiler = createCompiler();\n    B options = createOptions();\n\n    JSModule[] modules = null;\n    Result result;\n\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n      options.outputCharset = Charsets.US_ASCII;\n    } else {\n      options.outputCharset = inputCharset;\n    }"
    },
    {
        "buggy_file": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "buggy_method": {
            "method_name": "createOptions",
            "method_body": "@Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.process_closure_primitives;\n    initOptionsFromFlags(options);\n    return options;\n  }",
            "start_line": 454,
            "end_line": 473,
            "buggy_lines": [
                471
            ]
        },
        "buggy_method_src": "@Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.process_closure_primitives;\n    initOptionsFromFlags(options);\n    return options;\n  }",
        "test_stack": "com.google.javascript.jscomp.CommandLineRunnerTest::testCharSetExpansion\njunit.framework.AssertionFailedError: expected:<US-ASCII> but was:<null>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion(CommandLineRunnerTest.java:385)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n",
        "buggy_lines_in_method": [
            18
        ],
        "buggy_statements": [
            "    initOptionsFromFlags(options);"
        ],
        "buggy_method_src_endswith_buggy_statement": "@Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.process_closure_primitives;\n    initOptionsFromFlags(options);"
    },
    {
        "buggy_file": "src/com/google/javascript/jscomp/Compiler.java",
        "buggy_method": {
            "method_name": "toSource",
            "method_body": "private String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n\n    Charset charset = options.outputCharset;\n    builder.setOutputCharset(charset);\n\n    return builder.build();\n  }",
            "start_line": 1355,
            "end_line": 1366,
            "buggy_lines": [
                1362
            ]
        },
        "buggy_method_src": "private String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n\n    Charset charset = options.outputCharset;\n    builder.setOutputCharset(charset);\n\n    return builder.build();\n  }",
        "test_stack": "com.google.javascript.jscomp.CommandLineRunnerTest::testCharSetExpansion\njunit.framework.AssertionFailedError: expected:<US-ASCII> but was:<null>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion(CommandLineRunnerTest.java:385)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n",
        "buggy_lines_in_method": [
            8
        ],
        "buggy_statements": [
            "    Charset charset = options.outputCharset;"
        ],
        "buggy_method_src_endswith_buggy_statement": "private String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n\n    Charset charset = options.outputCharset;"
    }
]