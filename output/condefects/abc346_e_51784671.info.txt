
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'public static void main(String[] args) throws IOException {\n\t\tint h = in.nextInt();\n\t\tint w = in.nextInt();\n\t\tboolean[] hs = new boolean[h + 1];\n\t\tboolean[] ws = new boolean[w + 1];\n\t\tint m = in.nextInt();\n\t\tint[] ts = new int[m];\n\t\tint[] as = new int[m];\n\t\tint[] xs = new int[m];\n\t\tint i = 0;\n\t\twhile (m-- > 0) {\n\t\t\tint t = in.nextInt();\n\t\t\tint a = in.nextInt();\n\t\t\tint x = in.nextInt();\n\t\t\tts[i] = t;\n\t\t\tas[i] = a;\n\t\t\txs[i] = x;\n\t\t\ti++;\n\t\t}\n\t\tlong[] cnt = new long[200001];\n\t\tfor (int j = ts.length - 1; j >= 0; j--) {\n\t\t\tif (ts[j] == 1) {\n\t\t\t\tif (!hs[as[j]]) {\n\t\t\t\t\tcnt[xs[j]] += (long) w;\n\t\t\t\t\th--;\n\t\t\t\t\ths[as[j]] = true;\t\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!ws[as[j]]) {\n\t\t\t\t\tcnt[xs[j]] += (long) h;\n\t\t\t\t\tw--;\n\t\t\t\t\tws[as[j]] = true;\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcnt[0] += (long) h * w;\n\t\tMap<Integer, Long> map = new HashMap<>();\n\t\tfor (int j = 0; j <= 200000; j++) {\n\t\t\tif (cnt[j] > 0) {\n\t\t\t\tmap.put(j, cnt[j]);\n\t\t\t}\n\t\t}\n\t\tout.println(map.size());\n\t\tMap<Integer, Long> map2 = map.entrySet().stream()\n\t\t\t\t.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n\t\t\t\t.collect(Collectors.toMap(\n\t\t\t\t\t\tMap.Entry::getKey, \n\t\t\t\t\t\tMap.Entry::getValue, \n\t\t\t\t\t\t(o, n) -> o,\n\t\t\t\t\t\tLinkedHashMap::new));\n\t\tfor (Entry<Integer, Long> e : map2.entrySet()) {\n\t\t\tout.println(e.getKey() + " " + e.getValue());\n\t\t}\n\t\tout.flush();\n\t}', 'start_line': 13, 'end_line': 67}
================== buggy_method_src ==================
public static void main(String[] args) throws IOException {
		int h = in.nextInt();
		int w = in.nextInt();
		boolean[] hs = new boolean[h + 1];
		boolean[] ws = new boolean[w + 1];
		int m = in.nextInt();
		int[] ts = new int[m];
		int[] as = new int[m];
		int[] xs = new int[m];
		int i = 0;
		while (m-- > 0) {
			int t = in.nextInt();
			int a = in.nextInt();
			int x = in.nextInt();
			ts[i] = t;
			as[i] = a;
			xs[i] = x;
			i++;
		}
		long[] cnt = new long[200001];
		for (int j = ts.length - 1; j >= 0; j--) {
			if (ts[j] == 1) {
				if (!hs[as[j]]) {
					cnt[xs[j]] += (long) w;
					h--;
					hs[as[j]] = true;	
				}
			} else {
				if (!ws[as[j]]) {
					cnt[xs[j]] += (long) h;
					w--;
					ws[as[j]] = true;	
				}
			}
		}
		cnt[0] += (long) h * w;
		Map<Integer, Long> map = new HashMap<>();
		for (int j = 0; j <= 200000; j++) {
			if (cnt[j] > 0) {
				map.put(j, cnt[j]);
			}
		}
		out.println(map.size());
		Map<Integer, Long> map2 = map.entrySet().stream()
				.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
				.collect(Collectors.toMap(
						Map.Entry::getKey, 
						Map.Entry::getValue, 
						(o, n) -> o,
						LinkedHashMap::new));
		for (Entry<Integer, Long> e : map2.entrySet()) {
			out.println(e.getKey() + " " + e.getValue());
		}
		out.flush();
	}
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[45]
================== buggy_statements ==================
['\t\t\t\t.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] args) throws IOException {
		int h = in.nextInt();
		int w = in.nextInt();
		boolean[] hs = new boolean[h + 1];
		boolean[] ws = new boolean[w + 1];
		int m = in.nextInt();
		int[] ts = new int[m];
		int[] as = new int[m];
		int[] xs = new int[m];
		int i = 0;
		while (m-- > 0) {
			int t = in.nextInt();
			int a = in.nextInt();
			int x = in.nextInt();
			ts[i] = t;
			as[i] = a;
			xs[i] = x;
			i++;
		}
		long[] cnt = new long[200001];
		for (int j = ts.length - 1; j >= 0; j--) {
			if (ts[j] == 1) {
				if (!hs[as[j]]) {
					cnt[xs[j]] += (long) w;
					h--;
					hs[as[j]] = true;	
				}
			} else {
				if (!ws[as[j]]) {
					cnt[xs[j]] += (long) h;
					w--;
					ws[as[j]] = true;	
				}
			}
		}
		cnt[0] += (long) h * w;
		Map<Integer, Long> map = new HashMap<>();
		for (int j = 0; j <= 200000; j++) {
			if (cnt[j] > 0) {
				map.put(j, cnt[j]);
			}
		}
		out.println(map.size());
		Map<Integer, Long> map2 = map.entrySet().stream()
				.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))