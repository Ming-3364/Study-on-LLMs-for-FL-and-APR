
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'public static void main(String[] args) throws Exception {\n        // Your code here!\n        \n        Scanner sc = new Scanner(System.in);\n        \n        int N = sc.nextInt();\n        int C = sc.nextInt();\n        \n        long[] Array = new long[N];\n        \n        long frag = 1;\n        if (C < 0) frag *= -1;\n        \n        for (int i = 0; i < N; i++) {\n            Array[i] = sc.nextInt() * frag;\n        }\n        \n        // 累積和の配列\n        long[] sumArray = new long[N+1];\n        // indexまでの累積和の最小値を記録する配列\n        long[] sumMinArray = new long[N+1];\n        // 累積和の計算\n        for (int i = 1; i < N+1; i++) {\n            // 累積和の計算\n            sumArray[i] = sumArray[i-1] + Array[i-1];\n            // iまでの累積和の最小値\n            sumMinArray[i] = Math.min(sumArray[i], sumMinArray[i-1]);\n        }\n        \n        long partSum = sumArray[N];\n        \n        for (int i = 1; i < N+1; i++) {\n            long sub = sumArray[i] - sumMinArray[i];\n            partSum = Math.max(partSum, sub);\n        }\n        \n        \n        \n        System.out.println((partSum * (C-1) + sumArray[N]) * frag);\n        \n        // // 尺取り法\n        // for (int l = 0; l < N+1; l++) {\n        //     for (int r = 0; r < N+1; r++) {\n                \n        //     }\n        // }\n    }\n}', 'start_line': 4, 'end_line': 50}
================== buggy_method_src ==================
public static void main(String[] args) throws Exception {
        // Your code here!
        
        Scanner sc = new Scanner(System.in);
        
        int N = sc.nextInt();
        int C = sc.nextInt();
        
        long[] Array = new long[N];
        
        long frag = 1;
        if (C < 0) frag *= -1;
        
        for (int i = 0; i < N; i++) {
            Array[i] = sc.nextInt() * frag;
        }
        
        // 累積和の配列
        long[] sumArray = new long[N+1];
        // indexまでの累積和の最小値を記録する配列
        long[] sumMinArray = new long[N+1];
        // 累積和の計算
        for (int i = 1; i < N+1; i++) {
            // 累積和の計算
            sumArray[i] = sumArray[i-1] + Array[i-1];
            // iまでの累積和の最小値
            sumMinArray[i] = Math.min(sumArray[i], sumMinArray[i-1]);
        }
        
        long partSum = sumArray[N];
        
        for (int i = 1; i < N+1; i++) {
            long sub = sumArray[i] - sumMinArray[i];
            partSum = Math.max(partSum, sub);
        }
        
        
        
        System.out.println((partSum * (C-1) + sumArray[N]) * frag);
        
        // // 尺取り法
        // for (int l = 0; l < N+1; l++) {
        //     for (int r = 0; r < N+1; r++) {
                
        //     }
        // }
    }
}
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[12]
================== buggy_statements ==================
['        if (C < 0) frag *= -1;']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] args) throws Exception {
        // Your code here!
        
        Scanner sc = new Scanner(System.in);
        
        int N = sc.nextInt();
        int C = sc.nextInt();
        
        long[] Array = new long[N];
        
        long frag = 1;
        if (C < 0) frag *= -1;