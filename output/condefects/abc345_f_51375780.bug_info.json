[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "solve",
            "method_body": "static void solve()\n\t{\n\t\tint n = ni(), m = ni(), K = ni();\n\t\tif(K % 2 != 0){\n\t\t\tout.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\tout.println(\"Yes\");\n\t\tint[] from = new int[m];\n\t\tint[] to = new int[m];\n\t\tDJSet ds = new DJSet(n);\n\t\tfor(int i = 0;i < m;i++){\n\t\t\tfrom[i] = ni()-1;\n\t\t\tto[i] = ni()-1;\n\t\t\tds.unite(from[i], to[i]);\n\t\t}\n\n\t\tint[] f = new int[n];\n\t\tint rem = K;\n\t\tfor(int i = 0;i < n;i++){\n\t\t\tif(ds.upper[i] < 0){\n\t\t\t\tf[i] = Math.min(rem, (-ds.upper[i])/2*2);\n\t\t\t\trem -= f[i];\n\t\t\t}\n\t\t}\n\t\tif(rem > 0){\n\t\t\tout.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\tboolean[] hit = new boolean[n+1];\n\t\tfor(int i = 0;i < n;i++){\n\t\t\tif(f[ds.root(i)] > 0){\n\t\t\t\thit[i] = true;\n\t\t\t\tf[ds.root(i)]--;\n\t\t\t}\n\t\t}\n\n\t\tint[][] g = packU(n, from, to);\n\t\tint[] par = spanningTreeX(g);\n\t\tg = parentToG(par);\n//\t\ttr(g);\n\t\tint[][] pars = parents(g, 0);\n\t\tint[] ord = pars[1];\n\t\tSet<Long> set = new HashSet<>();\n\t\tboolean[] dp = new boolean[n+1];\n\t\tfor(int i = n;i >= 1;i--){\n\t\t\tint cur = ord[i];\n\t\t\tfor(int e : g[cur]){\n\t\t\t\tif(e != par[cur]){\n\t\t\t\t\tdp[cur] ^= dp[e];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(hit[cur]){\n\t\t\t\tdp[cur] ^= true;\n\t\t\t}\n\t\t\tif(dp[cur]){\n\t\t\t\tset.add((long)cur<<32|par[cur]);\n\t\t\t\tset.add((long)par[cur]<<32|cur);\n\t\t\t}\n\t\t}\n\t\tout.println(set.size() / 2);\n\t\tfor(int i = 0;i < m;i++){\n\t\t\tlong code = (long)from[i]<<32|to[i];\n\t\t\tif(set.contains(code)) {\n\t\t\t\tout.print(i + 1 + \" \");\n\t\t\t}\n\t\t}\n\t\tout.println();\n\t}",
            "start_line": 17,
            "end_line": 85
        },
        "buggy_method_src": "static void solve()\n\t{\n\t\tint n = ni(), m = ni(), K = ni();\n\t\tif(K % 2 != 0){\n\t\t\tout.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\tout.println(\"Yes\");\n\t\tint[] from = new int[m];\n\t\tint[] to = new int[m];\n\t\tDJSet ds = new DJSet(n);\n\t\tfor(int i = 0;i < m;i++){\n\t\t\tfrom[i] = ni()-1;\n\t\t\tto[i] = ni()-1;\n\t\t\tds.unite(from[i], to[i]);\n\t\t}\n\n\t\tint[] f = new int[n];\n\t\tint rem = K;\n\t\tfor(int i = 0;i < n;i++){\n\t\t\tif(ds.upper[i] < 0){\n\t\t\t\tf[i] = Math.min(rem, (-ds.upper[i])/2*2);\n\t\t\t\trem -= f[i];\n\t\t\t}\n\t\t}\n\t\tif(rem > 0){\n\t\t\tout.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\tboolean[] hit = new boolean[n+1];\n\t\tfor(int i = 0;i < n;i++){\n\t\t\tif(f[ds.root(i)] > 0){\n\t\t\t\thit[i] = true;\n\t\t\t\tf[ds.root(i)]--;\n\t\t\t}\n\t\t}\n\n\t\tint[][] g = packU(n, from, to);\n\t\tint[] par = spanningTreeX(g);\n\t\tg = parentToG(par);\n//\t\ttr(g);\n\t\tint[][] pars = parents(g, 0);\n\t\tint[] ord = pars[1];\n\t\tSet<Long> set = new HashSet<>();\n\t\tboolean[] dp = new boolean[n+1];\n\t\tfor(int i = n;i >= 1;i--){\n\t\t\tint cur = ord[i];\n\t\t\tfor(int e : g[cur]){\n\t\t\t\tif(e != par[cur]){\n\t\t\t\t\tdp[cur] ^= dp[e];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(hit[cur]){\n\t\t\t\tdp[cur] ^= true;\n\t\t\t}\n\t\t\tif(dp[cur]){\n\t\t\t\tset.add((long)cur<<32|par[cur]);\n\t\t\t\tset.add((long)par[cur]<<32|cur);\n\t\t\t}\n\t\t}\n\t\tout.println(set.size() / 2);\n\t\tfor(int i = 0;i < m;i++){\n\t\t\tlong code = (long)from[i]<<32|to[i];\n\t\t\tif(set.contains(code)) {\n\t\t\t\tout.print(i + 1 + \" \");\n\t\t\t}\n\t\t}\n\t\tout.println();\n\t}",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            30
        ],
        "buggy_statements": [
            "\t\tboolean[] hit = new boolean[n+1];"
        ],
        "buggy_method_src_endswith_buggy_statement": "static void solve()\n\t{\n\t\tint n = ni(), m = ni(), K = ni();\n\t\tif(K % 2 != 0){\n\t\t\tout.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\tout.println(\"Yes\");\n\t\tint[] from = new int[m];\n\t\tint[] to = new int[m];\n\t\tDJSet ds = new DJSet(n);\n\t\tfor(int i = 0;i < m;i++){\n\t\t\tfrom[i] = ni()-1;\n\t\t\tto[i] = ni()-1;\n\t\t\tds.unite(from[i], to[i]);\n\t\t}\n\n\t\tint[] f = new int[n];\n\t\tint rem = K;\n\t\tfor(int i = 0;i < n;i++){\n\t\t\tif(ds.upper[i] < 0){\n\t\t\t\tf[i] = Math.min(rem, (-ds.upper[i])/2*2);\n\t\t\t\trem -= f[i];\n\t\t\t}\n\t\t}\n\t\tif(rem > 0){\n\t\t\tout.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\tboolean[] hit = new boolean[n+1];"
    }
]