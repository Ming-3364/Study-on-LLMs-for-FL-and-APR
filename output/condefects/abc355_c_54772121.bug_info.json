[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "public static void main(String[] args) {\n\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint N = scanner.nextInt();\n\t\tint T = scanner.nextInt();\n\t\tint sum=0;\n\t\tboolean v = false;\n\t\tint columncount[]=new int [N];\n\t\tint rowcount[]=new int [N];\n\t\tfor(int i=0;i<N;i++) {\n\t\t\tcolumncount[i]=0;\n\t\t\trowcount[i]=0;\n\t\t}\n\t\tint diagnolcount[]=new int [2];\n\t\tdiagnolcount[0]=0;\n\t\tdiagnolcount[1]=1;\n\t\t\n\t\tHashSet<Integer> Bingo = new HashSet<>();\n\t\tfor(int i=0;i<T;i++) {\n\t\t\tint num = scanner.nextInt()-1;\n\t\t\tsum+=1;\n\t\t\tif(!Bingo.contains(num)) {\n\t\t\t\tBingo.add(num);\n\t\t\t\t\n\t\t\t\trowcount[num/N]++;\n\t\t\t\tif(rowcount[num/N]==N) {\n\t\t\t\t\tv =true;\n\t\t\t\t\t//System.out.println(\"a\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcolumncount[num%N]++;\n\t\t\t\tif(columncount[num%N]==N) {\n\t\t\t\t\tv =true;\n\t\t\t\t\t//System.out.println(\"b\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\n\t\t\t\tif(num/N==num%N) {\n\t\t\t\t\tdiagnolcount[0]++;\n\t\t\t\t\tif(\tdiagnolcount[0]==N) {\n\t\t\t\t\tv =true;\n\t\t\t\t\t//System.out.println(\"c\");\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(N-1-num/N==num%N) {\n\t\t\t\t\tdiagnolcount[1]++;\n\t\t\t\t\tif(\tdiagnolcount[1]==N) {\n\t\t\t\t\tv =true;\n\t\t\t\t\t//System.out.println(\"d\");\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(v) {\n\t\t\tSystem.out.println(sum);\n\t\t}else {\n\t\t\tSystem.out.println(-1);\n\t\t}\n\t\t\n\t\t\n\t\tscanner.close();\n\t\t\n\t\n\t}",
            "start_line": 5,
            "end_line": 76
        },
        "buggy_method_src": "public static void main(String[] args) {\n\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint N = scanner.nextInt();\n\t\tint T = scanner.nextInt();\n\t\tint sum=0;\n\t\tboolean v = false;\n\t\tint columncount[]=new int [N];\n\t\tint rowcount[]=new int [N];\n\t\tfor(int i=0;i<N;i++) {\n\t\t\tcolumncount[i]=0;\n\t\t\trowcount[i]=0;\n\t\t}\n\t\tint diagnolcount[]=new int [2];\n\t\tdiagnolcount[0]=0;\n\t\tdiagnolcount[1]=1;\n\t\t\n\t\tHashSet<Integer> Bingo = new HashSet<>();\n\t\tfor(int i=0;i<T;i++) {\n\t\t\tint num = scanner.nextInt()-1;\n\t\t\tsum+=1;\n\t\t\tif(!Bingo.contains(num)) {\n\t\t\t\tBingo.add(num);\n\t\t\t\t\n\t\t\t\trowcount[num/N]++;\n\t\t\t\tif(rowcount[num/N]==N) {\n\t\t\t\t\tv =true;\n\t\t\t\t\t//System.out.println(\"a\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcolumncount[num%N]++;\n\t\t\t\tif(columncount[num%N]==N) {\n\t\t\t\t\tv =true;\n\t\t\t\t\t//System.out.println(\"b\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\n\t\t\t\tif(num/N==num%N) {\n\t\t\t\t\tdiagnolcount[0]++;\n\t\t\t\t\tif(\tdiagnolcount[0]==N) {\n\t\t\t\t\tv =true;\n\t\t\t\t\t//System.out.println(\"c\");\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(N-1-num/N==num%N) {\n\t\t\t\t\tdiagnolcount[1]++;\n\t\t\t\t\tif(\tdiagnolcount[1]==N) {\n\t\t\t\t\tv =true;\n\t\t\t\t\t//System.out.println(\"d\");\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(v) {\n\t\t\tSystem.out.println(sum);\n\t\t}else {\n\t\t\tSystem.out.println(-1);\n\t\t}\n\t\t\n\t\t\n\t\tscanner.close();\n\t\t\n\t\n\t}",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            16
        ],
        "buggy_statements": [
            "\t\tdiagnolcount[1]=1;"
        ],
        "buggy_method_src_endswith_buggy_statement": "public static void main(String[] args) {\n\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint N = scanner.nextInt();\n\t\tint T = scanner.nextInt();\n\t\tint sum=0;\n\t\tboolean v = false;\n\t\tint columncount[]=new int [N];\n\t\tint rowcount[]=new int [N];\n\t\tfor(int i=0;i<N;i++) {\n\t\t\tcolumncount[i]=0;\n\t\t\trowcount[i]=0;\n\t\t}\n\t\tint diagnolcount[]=new int [2];\n\t\tdiagnolcount[0]=0;\n\t\tdiagnolcount[1]=1;"
    }
]