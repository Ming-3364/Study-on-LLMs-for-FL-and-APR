[
    {
        "buggy_file": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "buggy_method": {
            "method_name": "replace",
            "method_body": "void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          int indexOfDot = namespace.indexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode);\n            parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);\n          }\n        }\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }",
            "start_line": 747,
            "end_line": 809,
            "buggy_lines": [
                789
            ]
        },
        "buggy_method_src": "void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          int indexOfDot = namespace.indexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode);\n            parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);\n          }\n        }\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }",
        "test_stack": "com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4\njunit.framework.AssertionFailedError:\nExpected: var apps={};apps.foo={};apps.foo.bar={};apps.foo.bar.B={};apps.foo.bar.C={}\nResult: var apps={};apps.foo.bar={};apps.foo={};apps.foo.bar.B={};apps.foo.bar.C={}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME apps 1 [sourcename: expected0]\n                OBJECTLIT 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME apps 1 [sourcename: expected0]\n                    STRING foo 1 [sourcename: expected0]\n                OBJECTLIT 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    GETPROP 1 [sourcename: expected0]\n                        NAME apps 1 [sourcename: expected0]\n                        STRING foo 1 [sourcename: expected0]\n                    STRING bar 1 [sourcename: expected0]\n                OBJECTLIT 1 [sourcename: expected0]\n    SCRIPT 1 [sourcename: expected1] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: expected1]\n            ASSIGN 1 [sourcename: expected1]\n                GETPROP 1 [sourcename: expected1]\n                    GETPROP 1 [sourcename: expected1]\n                        GETPROP 1 [sourcename: expected1]\n                            NAME apps 1 [sourcename: expected1]\n                            STRING foo 1 [sourcename: expected1]\n                        STRING bar 1 [sourcename: expected1]\n                    STRING B 1 [sourcename: expected1] [is_constant_name: 1]\n                OBJECTLIT 1 [sourcename: expected1]\n    SCRIPT 1 [sourcename: expected2] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: expected2]\n            ASSIGN 1 [sourcename: expected2]\n                GETPROP 1 [sourcename: expected2]\n                    GETPROP 1 [sourcename: expected2]\n                        GETPROP 1 [sourcename: expected2]\n                            NAME apps 1 [sourcename: expected2]\n                            STRING foo 1 [sourcename: expected2]\n                        STRING bar 1 [sourcename: expected2]\n                    STRING C 1 [sourcename: expected2] [is_constant_name: 1]\n                OBJECTLIT 1 [sourcename: expected2]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: i0] [synthetic: 1]\n        VAR 1 [sourcename: i0] [is_namespace: 1]\n            NAME apps 1 [sourcename: i0]\n                OBJECTLIT 1 [sourcename: i0] : {}\n        EXPR_RESULT 1 [sourcename: i1] [is_namespace: 1]\n            ASSIGN 1 [sourcename: i1]\n                GETPROP 1 [sourcename: i1] [originalname: apps.foo.bar]\n                    GETPROP 1 [sourcename: i1]\n                        NAME apps 1 [sourcename: i1]\n                        STRING foo 1 [sourcename: i1]\n                    STRING bar 1 [sourcename: i1]\n                OBJECTLIT 1 [sourcename: i1] : {}\n        EXPR_RESULT 1 [sourcename: i1] [is_namespace: 1]\n            ASSIGN 1 [sourcename: i1]\n                GETPROP 1 [sourcename: i1] [originalname: apps.foo]\n                    NAME apps 1 [sourcename: i1]\n                    STRING foo 1 [sourcename: i1]\n                OBJECTLIT 1 [sourcename: i1] : {}\n    SCRIPT 1 [sourcename: i1] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: i1] [is_namespace: 1]\n            ASSIGN 1 [sourcename: i1]\n                GETPROP 1 [sourcename: i1] [originalname: apps.foo.bar.B]\n                    GETPROP 1 [sourcename: i1]\n                        GETPROP 1 [sourcename: i1]\n                            NAME apps 1 [sourcename: i1]\n                            STRING foo 1 [sourcename: i1]\n                        STRING bar 1 [sourcename: i1]\n                    STRING B 1 [sourcename: i1]\n                OBJECTLIT 1 [sourcename: i1] : {}\n    SCRIPT 1 [sourcename: i2] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: i2] [is_namespace: 1]\n            ASSIGN 1 [sourcename: i2]\n                GETPROP 1 [sourcename: i2] [originalname: apps.foo.bar.C]\n                    GETPROP 1 [sourcename: i2]\n                        GETPROP 1 [sourcename: i2]\n                            NAME apps 1 [sourcename: i2]\n                            STRING foo 1 [sourcename: i2]\n                        STRING bar 1 [sourcename: i2]\n                    STRING C 1 [sourcename: i2]\n                OBJECTLIT 1 [sourcename: i2] : {}\n\n\nSubtree1: NAME apps 1 [sourcename: expected0]\n\n\nSubtree2: GETPROP 1 [sourcename: i1]\n    NAME apps 1 [sourcename: i1]\n    STRING foo 1 [sourcename: i1]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:645)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:482)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:463)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)\n\tat com.google.javascript.jscomp.ProcessClosurePrimitivesTest.testProvideInIndependentModules4(ProcessClosurePrimitivesTest.java:777)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "test(\n",
        "buggy_lines_in_method": [
            43
        ],
        "buggy_statements": [
            "          int indexOfDot = namespace.indexOf('.');"
        ],
        "buggy_method_src_endswith_buggy_statement": "void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          int indexOfDot = namespace.indexOf('.');"
    }
]