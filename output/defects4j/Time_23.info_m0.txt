
================== buggy_file ==================
src/main/java/org/joda/time/DateTimeZone.java
================== buggy_method ==================
{'method_name': 'getConvertedId', 'method_body': 'private static synchronized String getConvertedId(String id) {\n        Map<String, String> map = cZoneIdConversion;\n        if (map == null) {\n            // Backwards compatibility with TimeZone.\n            map = new HashMap<String, String>();\n            map.put("GMT", "UTC");\n            map.put("MIT", "Pacific/Apia");\n            map.put("HST", "Pacific/Honolulu");  // JDK 1.1 compatible\n            map.put("AST", "America/Anchorage");\n            map.put("PST", "America/Los_Angeles");\n            map.put("MST", "America/Denver");  // JDK 1.1 compatible\n            map.put("PNT", "America/Phoenix");\n            map.put("CST", "America/Chicago");\n            map.put("EST", "America/New_York");  // JDK 1.1 compatible\n            map.put("IET", "America/Indianapolis");\n            map.put("PRT", "America/Puerto_Rico");\n            map.put("CNT", "America/St_Johns");\n            map.put("AGT", "America/Buenos_Aires");\n            map.put("BET", "America/Sao_Paulo");\n            map.put("WET", "Europe/London");\n            map.put("ECT", "Europe/Paris");\n            map.put("ART", "Africa/Cairo");\n            map.put("CAT", "Africa/Harare");\n            map.put("EET", "Europe/Bucharest");\n            map.put("EAT", "Africa/Addis_Ababa");\n            map.put("MET", "Asia/Tehran");\n            map.put("NET", "Asia/Yerevan");\n            map.put("PLT", "Asia/Karachi");\n            map.put("IST", "Asia/Calcutta");\n            map.put("BST", "Asia/Dhaka");\n            map.put("VST", "Asia/Saigon");\n            map.put("CTT", "Asia/Shanghai");\n            map.put("JST", "Asia/Tokyo");\n            map.put("ACT", "Australia/Darwin");\n            map.put("AET", "Australia/Sydney");\n            map.put("SST", "Pacific/Guadalcanal");\n            map.put("NST", "Pacific/Auckland");\n            cZoneIdConversion = map;\n        }\n        return map.get(id);\n    }', 'start_line': 558, 'end_line': 598, 'buggy_lines': [572, 575, 577, 578, 581, 583, 586, 588]}
================== buggy_method_src ==================
private static synchronized String getConvertedId(String id) {
        Map<String, String> map = cZoneIdConversion;
        if (map == null) {
            // Backwards compatibility with TimeZone.
            map = new HashMap<String, String>();
            map.put("GMT", "UTC");
            map.put("MIT", "Pacific/Apia");
            map.put("HST", "Pacific/Honolulu");  // JDK 1.1 compatible
            map.put("AST", "America/Anchorage");
            map.put("PST", "America/Los_Angeles");
            map.put("MST", "America/Denver");  // JDK 1.1 compatible
            map.put("PNT", "America/Phoenix");
            map.put("CST", "America/Chicago");
            map.put("EST", "America/New_York");  // JDK 1.1 compatible
            map.put("IET", "America/Indianapolis");
            map.put("PRT", "America/Puerto_Rico");
            map.put("CNT", "America/St_Johns");
            map.put("AGT", "America/Buenos_Aires");
            map.put("BET", "America/Sao_Paulo");
            map.put("WET", "Europe/London");
            map.put("ECT", "Europe/Paris");
            map.put("ART", "Africa/Cairo");
            map.put("CAT", "Africa/Harare");
            map.put("EET", "Europe/Bucharest");
            map.put("EAT", "Africa/Addis_Ababa");
            map.put("MET", "Asia/Tehran");
            map.put("NET", "Asia/Yerevan");
            map.put("PLT", "Asia/Karachi");
            map.put("IST", "Asia/Calcutta");
            map.put("BST", "Asia/Dhaka");
            map.put("VST", "Asia/Saigon");
            map.put("CTT", "Asia/Shanghai");
            map.put("JST", "Asia/Tokyo");
            map.put("ACT", "Australia/Darwin");
            map.put("AET", "Australia/Sydney");
            map.put("SST", "Pacific/Guadalcanal");
            map.put("NST", "Pacific/Auckland");
            cZoneIdConversion = map;
        }
        return map.get(id);
    }
================== test_stack ==================
org.joda.time.TestDateTimeZone::testForID_String_old
junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/London]>
	at junit.framework.Assert.assertEquals(Assert.java:100)
	at junit.framework.Assert.assertEquals(Assert.java:107)
	at junit.framework.TestCase.assertEquals(TestCase.java:269)
	at org.joda.time.TestDateTimeZone.testForID_String_old(TestDateTimeZone.java:282)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

================== test_assert ==================
assertEquals(value, zone.getID());

================== buggy_lines_in_method ==================
[15, 18, 20, 21, 24, 26, 29, 31]
================== buggy_statements ==================
['            map.put("IET", "America/Indianapolis");', '            map.put("AGT", "America/Buenos_Aires");', '            map.put("WET", "Europe/London");', '            map.put("ECT", "Europe/Paris");', '            map.put("EET", "Europe/Bucharest");', '            map.put("MET", "Asia/Tehran");', '            map.put("IST", "Asia/Calcutta");', '            map.put("VST", "Asia/Saigon");']
================== buggy_method_src_endswith_buggy_statement ==================
private static synchronized String getConvertedId(String id) {
        Map<String, String> map = cZoneIdConversion;
        if (map == null) {
            // Backwards compatibility with TimeZone.
            map = new HashMap<String, String>();
            map.put("GMT", "UTC");
            map.put("MIT", "Pacific/Apia");
            map.put("HST", "Pacific/Honolulu");  // JDK 1.1 compatible
            map.put("AST", "America/Anchorage");
            map.put("PST", "America/Los_Angeles");
            map.put("MST", "America/Denver");  // JDK 1.1 compatible
            map.put("PNT", "America/Phoenix");
            map.put("CST", "America/Chicago");
            map.put("EST", "America/New_York");  // JDK 1.1 compatible
            map.put("IET", "America/Indianapolis");
            map.put("PRT", "America/Puerto_Rico");
            map.put("CNT", "America/St_Johns");
            map.put("AGT", "America/Buenos_Aires");
            map.put("BET", "America/Sao_Paulo");
            map.put("WET", "Europe/London");
            map.put("ECT", "Europe/Paris");
            map.put("ART", "Africa/Cairo");
            map.put("CAT", "Africa/Harare");
            map.put("EET", "Europe/Bucharest");
            map.put("EAT", "Africa/Addis_Ababa");
            map.put("MET", "Asia/Tehran");
            map.put("NET", "Asia/Yerevan");
            map.put("PLT", "Asia/Karachi");
            map.put("IST", "Asia/Calcutta");
            map.put("BST", "Asia/Dhaka");
            map.put("VST", "Asia/Saigon");