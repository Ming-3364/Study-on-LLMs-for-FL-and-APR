
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': "public static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint row = Integer.parseInt(sc.next());\n\t\tint column = Integer.parseInt(sc.next());\n\n\t\tList<String> s = new ArrayList<>();\n\t\tfor (int i = 0; i < row; i++) {\n\t\t\ts.add(sc.next());\n\t\t}\n\n\t\tList<Character> c = new ArrayList<>();\n\t\tfor (int i = 0; i < row; i++) {\n\t\t\tfor (int j = 0; j < column; j++) {\n\t\t\t\tc.add(s.get(i).charAt(j));\n\t\t\t}\n\t\t}\n\n\t\tint vertex = row * column;\n\n\t\tList<List<Integer>> graph = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tgraph.add(new ArrayList<>());\n\t\t}\n\n\t\tList<Boolean> magneticInfluence = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tmagneticInfluence.add(i, false);\n\t\t}\n\n\t\tif (row > 1 && column > 1) {\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + column, true);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == (row - 1) * column) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i == row * column - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - column, true);\n\t\t\t\t\t} else if ((row - 1) * column < i && i < row * column - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i % column == 0) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + column, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - column, true);\n\t\t\t\t\t} else if (i % column == column - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + column, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - column, true);\n\t\t\t\t\t} else if (0 < i % column && i % column < column - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + column, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - column, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (row == 1 && column == 1) {\n\t\t\tif (c.get(0) == '#') {\n\t\t\t\tmagneticInfluence.set(0, true);\n\t\t\t}\n\t\t} else if (row == 1) {\n\t\t\tfor (int i = 0; i < column; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + 1, true);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - 1, true);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + 1, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - 1, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (column == 1) {\n\t\t\tfor (int i = 0; i < row; i++) {\n\t\t\t\tif (c.get(i) == '#') {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + column, true);\n\t\t\t\t\t} else if (i == row - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - column, true);\n\t\t\t\t\t} else if (0 < i && i < row - 1) {\n\t\t\t\t\t\tmagneticInfluence.set(i, true);\n\t\t\t\t\t\tmagneticInfluence.set(i + column, true);\n\t\t\t\t\t\tmagneticInfluence.set(i - column, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (row > 1 && column > 1) {\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tif (magneticInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (i == (row - 1) * column) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i == row * column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if ((row - 1) * column < i && i < row * column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i % column == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (i % column == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (0 < i % column && i % column < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (row == 1 && column == 1) {\n\t\t} else if (row == 1) {\n\t\t\tfor (int i = 0; i < column; i++) {\n\t\t\t\tif (magneticInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t} else if (i == column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t} else if (0 < i && i < column - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + 1);\n\t\t\t\t\t\tgraph.get(i).add(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (column == 1) {\n\t\t\tfor (int i = 0; i < row; i++) {\n\t\t\t\tif (magneticInfluence.get(i) == false) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t} else if (i == row - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t} else if (0 < i && i < row - 1) {\n\t\t\t\t\t\tgraph.get(i).add(i + column);\n\t\t\t\t\t\tgraph.get(i).add(i - column);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<Boolean> visited = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tvisited.add(i, false);\n\t\t}\n\n\t\tList<Integer> lastTravel = new ArrayList<>();\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tlastTravel.add(0);\n\t\t}\n\n\t\tint timeOfTravel = 0;\n\t\tint answer = 1;\n\n\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\tif (magneticInfluence.get(i) == false) {\n\t\t\t\tif (visited.get(i) == true) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttimeOfTravel++;\n\n\t\t\t\tint cnt = 0;\n\n\t\t\t\tQueue<Integer> queue = new LinkedList<>();\n\t\t\t\tqueue.add(i);\n\t\t\t\tvisited.set(i, true);\n\n\t\t\t\twhile (!queue.isEmpty()) {\n\t\t\t\t\tint currentPosition = queue.remove();\n\t\t\t\t\tcnt++;\n\n\t\t\t\t\tfor (int j = 0; j < graph.get(currentPosition).size(); j++) {\n\t\t\t\t\t\tint nextPosition = graph.get(currentPosition).get(j);\n\n\t\t\t\t\t\tif (visited.get(nextPosition) == true) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (magneticInfluence.get(i) == true) {\n\t\t\t\t\t\t\tif (lastTravel.get(nextPosition) != timeOfTravel) {\n\t\t\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\t\t\tlastTravel.set(nextPosition, timeOfTravel);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqueue.add(nextPosition);\n\t\t\t\t\t\tvisited.set(nextPosition, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tanswer = Math.max(answer, cnt);\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(answer);\n\t}", 'start_line': 4, 'end_line': 241}
================== buggy_method_src ==================
public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int row = Integer.parseInt(sc.next());
		int column = Integer.parseInt(sc.next());

		List<String> s = new ArrayList<>();
		for (int i = 0; i < row; i++) {
			s.add(sc.next());
		}

		List<Character> c = new ArrayList<>();
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < column; j++) {
				c.add(s.get(i).charAt(j));
			}
		}

		int vertex = row * column;

		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			graph.add(new ArrayList<>());
		}

		List<Boolean> magneticInfluence = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			magneticInfluence.add(i, false);
		}

		if (row > 1 && column > 1) {
			for (int i = 0; i < vertex; i++) {
				if (c.get(i) == '#') {
					if (i == 0) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i + column, true);
					} else if (i == column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i + column, true);
					} else if (0 < i && i < column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i + column, true);
					} else if (i == (row - 1) * column) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - column, true);
					} else if (i == row * column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i - column, true);
					} else if ((row - 1) * column < i && i < row * column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i - column, true);
					} else if (i % column == 0) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i + column, true);
						magneticInfluence.set(i - column, true);
					} else if (i % column == column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i + column, true);
						magneticInfluence.set(i - column, true);
					} else if (0 < i % column && i % column < column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i + column, true);
						magneticInfluence.set(i - column, true);
					}
				}
			}
		} else if (row == 1 && column == 1) {
			if (c.get(0) == '#') {
				magneticInfluence.set(0, true);
			}
		} else if (row == 1) {
			for (int i = 0; i < column; i++) {
				if (c.get(i) == '#') {
					if (i == 0) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
					} else if (i == column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - 1, true);
					} else if (0 < i && i < column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - 1, true);
					}
				}
			}
		} else if (column == 1) {
			for (int i = 0; i < row; i++) {
				if (c.get(i) == '#') {
					if (i == 0) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + column, true);
					} else if (i == row - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - column, true);
					} else if (0 < i && i < row - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + column, true);
						magneticInfluence.set(i - column, true);
					}
				}
			}
		}

		if (row > 1 && column > 1) {
			for (int i = 0; i < vertex; i++) {
				if (magneticInfluence.get(i) == false) {
					if (i == 0) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i + column);
					} else if (i == column - 1) {
						graph.get(i).add(i - 1);
						graph.get(i).add(i + column);
					} else if (0 < i && i < column - 1) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - 1);
						graph.get(i).add(i + column);
					} else if (i == (row - 1) * column) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - column);
					} else if (i == row * column - 1) {
						graph.get(i).add(i - 1);
						graph.get(i).add(i - column);
					} else if ((row - 1) * column < i && i < row * column - 1) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - 1);
						graph.get(i).add(i - column);
					} else if (i % column == 0) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i + column);
						graph.get(i).add(i - column);
					} else if (i % column == column - 1) {
						graph.get(i).add(i - 1);
						graph.get(i).add(i + column);
						graph.get(i).add(i - column);
					} else if (0 < i % column && i % column < column - 1) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - 1);
						graph.get(i).add(i + column);
						graph.get(i).add(i - column);
					}
				}
			}
		} else if (row == 1 && column == 1) {
		} else if (row == 1) {
			for (int i = 0; i < column; i++) {
				if (magneticInfluence.get(i) == false) {
					if (i == 0) {
						graph.get(i).add(i + 1);
					} else if (i == column - 1) {
						graph.get(i).add(i - 1);
					} else if (0 < i && i < column - 1) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - 1);
					}
				}
			}
		} else if (column == 1) {
			for (int i = 0; i < row; i++) {
				if (magneticInfluence.get(i) == false) {
					if (i == 0) {
						graph.get(i).add(i + column);
					} else if (i == row - 1) {
						graph.get(i).add(i - column);
					} else if (0 < i && i < row - 1) {
						graph.get(i).add(i + column);
						graph.get(i).add(i - column);
					}
				}
			}
		}

		List<Boolean> visited = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			visited.add(i, false);
		}

		List<Integer> lastTravel = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			lastTravel.add(0);
		}

		int timeOfTravel = 0;
		int answer = 1;

		for (int i = 0; i < vertex; i++) {
			if (magneticInfluence.get(i) == false) {
				if (visited.get(i) == true) {
					continue;
				}
				timeOfTravel++;

				int cnt = 0;

				Queue<Integer> queue = new LinkedList<>();
				queue.add(i);
				visited.set(i, true);

				while (!queue.isEmpty()) {
					int currentPosition = queue.remove();
					cnt++;

					for (int j = 0; j < graph.get(currentPosition).size(); j++) {
						int nextPosition = graph.get(currentPosition).get(j);

						if (visited.get(nextPosition) == true) {
							continue;
						}

						if (magneticInfluence.get(i) == true) {
							if (lastTravel.get(nextPosition) != timeOfTravel) {
								cnt++;
								lastTravel.set(nextPosition, timeOfTravel);
							}
							continue;
						}
						queue.add(nextPosition);
						visited.set(nextPosition, true);
					}
				}
				
				answer = Math.max(answer, cnt);
			}
		}
		
		System.out.println(answer);
	}
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[221]
================== buggy_statements ==================
['\t\t\t\t\t\tif (magneticInfluence.get(i) == true) {']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int row = Integer.parseInt(sc.next());
		int column = Integer.parseInt(sc.next());

		List<String> s = new ArrayList<>();
		for (int i = 0; i < row; i++) {
			s.add(sc.next());
		}

		List<Character> c = new ArrayList<>();
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < column; j++) {
				c.add(s.get(i).charAt(j));
			}
		}

		int vertex = row * column;

		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			graph.add(new ArrayList<>());
		}

		List<Boolean> magneticInfluence = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			magneticInfluence.add(i, false);
		}

		if (row > 1 && column > 1) {
			for (int i = 0; i < vertex; i++) {
				if (c.get(i) == '#') {
					if (i == 0) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i + column, true);
					} else if (i == column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i + column, true);
					} else if (0 < i && i < column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i + column, true);
					} else if (i == (row - 1) * column) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - column, true);
					} else if (i == row * column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i - column, true);
					} else if ((row - 1) * column < i && i < row * column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i - column, true);
					} else if (i % column == 0) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i + column, true);
						magneticInfluence.set(i - column, true);
					} else if (i % column == column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i + column, true);
						magneticInfluence.set(i - column, true);
					} else if (0 < i % column && i % column < column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - 1, true);
						magneticInfluence.set(i + column, true);
						magneticInfluence.set(i - column, true);
					}
				}
			}
		} else if (row == 1 && column == 1) {
			if (c.get(0) == '#') {
				magneticInfluence.set(0, true);
			}
		} else if (row == 1) {
			for (int i = 0; i < column; i++) {
				if (c.get(i) == '#') {
					if (i == 0) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
					} else if (i == column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - 1, true);
					} else if (0 < i && i < column - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + 1, true);
						magneticInfluence.set(i - 1, true);
					}
				}
			}
		} else if (column == 1) {
			for (int i = 0; i < row; i++) {
				if (c.get(i) == '#') {
					if (i == 0) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + column, true);
					} else if (i == row - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i - column, true);
					} else if (0 < i && i < row - 1) {
						magneticInfluence.set(i, true);
						magneticInfluence.set(i + column, true);
						magneticInfluence.set(i - column, true);
					}
				}
			}
		}

		if (row > 1 && column > 1) {
			for (int i = 0; i < vertex; i++) {
				if (magneticInfluence.get(i) == false) {
					if (i == 0) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i + column);
					} else if (i == column - 1) {
						graph.get(i).add(i - 1);
						graph.get(i).add(i + column);
					} else if (0 < i && i < column - 1) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - 1);
						graph.get(i).add(i + column);
					} else if (i == (row - 1) * column) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - column);
					} else if (i == row * column - 1) {
						graph.get(i).add(i - 1);
						graph.get(i).add(i - column);
					} else if ((row - 1) * column < i && i < row * column - 1) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - 1);
						graph.get(i).add(i - column);
					} else if (i % column == 0) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i + column);
						graph.get(i).add(i - column);
					} else if (i % column == column - 1) {
						graph.get(i).add(i - 1);
						graph.get(i).add(i + column);
						graph.get(i).add(i - column);
					} else if (0 < i % column && i % column < column - 1) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - 1);
						graph.get(i).add(i + column);
						graph.get(i).add(i - column);
					}
				}
			}
		} else if (row == 1 && column == 1) {
		} else if (row == 1) {
			for (int i = 0; i < column; i++) {
				if (magneticInfluence.get(i) == false) {
					if (i == 0) {
						graph.get(i).add(i + 1);
					} else if (i == column - 1) {
						graph.get(i).add(i - 1);
					} else if (0 < i && i < column - 1) {
						graph.get(i).add(i + 1);
						graph.get(i).add(i - 1);
					}
				}
			}
		} else if (column == 1) {
			for (int i = 0; i < row; i++) {
				if (magneticInfluence.get(i) == false) {
					if (i == 0) {
						graph.get(i).add(i + column);
					} else if (i == row - 1) {
						graph.get(i).add(i - column);
					} else if (0 < i && i < row - 1) {
						graph.get(i).add(i + column);
						graph.get(i).add(i - column);
					}
				}
			}
		}

		List<Boolean> visited = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			visited.add(i, false);
		}

		List<Integer> lastTravel = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			lastTravel.add(0);
		}

		int timeOfTravel = 0;
		int answer = 1;

		for (int i = 0; i < vertex; i++) {
			if (magneticInfluence.get(i) == false) {
				if (visited.get(i) == true) {
					continue;
				}
				timeOfTravel++;

				int cnt = 0;

				Queue<Integer> queue = new LinkedList<>();
				queue.add(i);
				visited.set(i, true);

				while (!queue.isEmpty()) {
					int currentPosition = queue.remove();
					cnt++;

					for (int j = 0; j < graph.get(currentPosition).size(); j++) {
						int nextPosition = graph.get(currentPosition).get(j);

						if (visited.get(nextPosition) == true) {
							continue;
						}

						if (magneticInfluence.get(i) == true) {