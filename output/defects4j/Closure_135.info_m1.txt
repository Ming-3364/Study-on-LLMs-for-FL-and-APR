
================== buggy_file ==================
src/com/google/javascript/rhino/jstype/FunctionType.java
================== buggy_method ==================
{'method_name': 'getPropertyType', 'method_body': '@Override\n  public JSType getPropertyType(String name) {\n    if ("prototype".equals(name)) {\n      return getPrototype();\n    } else {\n      if (!hasOwnProperty(name)) {\n        if ("call".equals(name)) {\n          // Define the "call" function lazily.\n          Node params = getParametersNode();\n          if (params == null) {\n            // If there\'s no params array, don\'t do any type-checking\n            // in this CALL function.\n            defineDeclaredProperty(name,\n                new FunctionType(registry, null, null,\n                    null, getReturnType()),\n                false);\n          } else {\n            params = params.cloneTree();\n            Node thisTypeNode = Node.newString(Token.NAME, "thisType");\n            thisTypeNode.setJSType(\n                registry.createOptionalNullableType(getTypeOfThis()));\n            params.addChildToFront(thisTypeNode);\n            thisTypeNode.setOptionalArg(true);\n\n            defineDeclaredProperty(name,\n                new FunctionType(registry, null, null,\n                    params, getReturnType()),\n                false);\n          }\n        } else if ("apply".equals(name)) {\n          // Define the "apply" function lazily.\n          FunctionParamBuilder builder = new FunctionParamBuilder(registry);\n\n          // Ecma-262 says that apply\'s second argument must be an Array\n          // or an arguments object. We don\'t model the arguments object,\n          // so let\'s just be forgiving for now.\n          // TODO(nicksantos): Model the Arguments object.\n          builder.addOptionalParams(\n              registry.createNullableType(getTypeOfThis()),\n              registry.createNullableType(\n                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n\n          defineDeclaredProperty(name,\n              new FunctionType(registry, null, null,\n                  builder.build(), getReturnType()),\n              false);\n        }\n      }\n\n      return super.getPropertyType(name);\n    }\n  }', 'start_line': 413, 'end_line': 464, 'buggy_lines': [415]}
================== buggy_method_src ==================
@Override
  public JSType getPropertyType(String name) {
    if ("prototype".equals(name)) {
      return getPrototype();
    } else {
      if (!hasOwnProperty(name)) {
        if ("call".equals(name)) {
          // Define the "call" function lazily.
          Node params = getParametersNode();
          if (params == null) {
            // If there's no params array, don't do any type-checking
            // in this CALL function.
            defineDeclaredProperty(name,
                new FunctionType(registry, null, null,
                    null, getReturnType()),
                false);
          } else {
            params = params.cloneTree();
            Node thisTypeNode = Node.newString(Token.NAME, "thisType");
            thisTypeNode.setJSType(
                registry.createOptionalNullableType(getTypeOfThis()));
            params.addChildToFront(thisTypeNode);
            thisTypeNode.setOptionalArg(true);

            defineDeclaredProperty(name,
                new FunctionType(registry, null, null,
                    params, getReturnType()),
                false);
          }
        } else if ("apply".equals(name)) {
          // Define the "apply" function lazily.
          FunctionParamBuilder builder = new FunctionParamBuilder(registry);

          // Ecma-262 says that apply's second argument must be an Array
          // or an arguments object. We don't model the arguments object,
          // so let's just be forgiving for now.
          // TODO(nicksantos): Model the Arguments object.
          builder.addOptionalParams(
              registry.createNullableType(getTypeOfThis()),
              registry.createNullableType(
                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));

          defineDeclaredProperty(name,
              new FunctionType(registry, null, null,
                  builder.build(), getReturnType()),
              false);
        }
      }

      return super.getPropertyType(name);
    }
  }
================== test_stack ==================
com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2
junit.framework.AssertionFailedError: expected:<[FUNCTION a = function (this:a): ?, NAME JSCompiler_StaticMethods_foo$self = a, FUNCTION JSCompiler_StaticMethods_foo = function (a): number, NAME JSCompiler_StaticMethods_bar$self = a, FUNCTION JSCompiler_StaticMethods_bar = function (a, number): number, FUNCTION JSCompiler_StaticMethods_baz = function (a): ?, NEW a = a, CALL JSCompiler_StaticMethods_foo = number, CALL JSCompiler_StaticMethods_bar = number, CALL JSCompiler_StaticMethods_baz = ?]> but was:<[FUNCTION a = function (this:a): ?, NAME JSCompiler_StaticMethods_foo$self = null, FUNCTION JSCompiler_StaticMethods_foo = function (a): number, NAME JSCompiler_StaticMethods_bar$self = null, FUNCTION JSCompiler_StaticMethods_bar = function (a, number): number, FUNCTION JSCompiler_StaticMethods_baz = function (a): ?, NEW a = a, CALL JSCompiler_StaticMethods_foo = number, CALL JSCompiler_StaticMethods_bar = number, CALL JSCompiler_StaticMethods_baz = ?]>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:78)
	at junit.framework.Assert.assertEquals(Assert.java:86)
	at junit.framework.TestCase.assertEquals(TestCase.java:253)
	at com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest.checkTypes(DevirtualizePrototypeMethodsTest.java:545)
	at com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest.testRewritePrototypeMethods2(DevirtualizePrototypeMethodsTest.java:144)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)
com.google.javascript.jscomp.TypeCheckTest::testGoodExtends9
junit.framework.AssertionFailedError: unexpected warnings(s):
JSC_UNKNOWN_OVERRIDE. property foo not defined on any superclass of Sub at  [testcode]  line 2
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.TestCase.fail(TestCase.java:227)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:6872)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:6846)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:6799)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:6795)
	at com.google.javascript.jscomp.TypeCheckTest.testGoodExtends9(TypeCheckTest.java:2636)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

================== test_assert ==================
checkTypes(RewritePrototypeMethodTestInput.INPUT,

================== buggy_lines_in_method ==================
[3]
================== buggy_statements ==================
['    if ("prototype".equals(name)) {']
================== buggy_method_src_endswith_buggy_statement ==================
@Override
  public JSType getPropertyType(String name) {
    if ("prototype".equals(name)) {