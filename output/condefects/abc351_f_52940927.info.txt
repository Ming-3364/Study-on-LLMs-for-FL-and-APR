
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'public static void main(String[] arg) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = scanner.nextInt();\n        }\n\n        AVLTree tree = new AVLTree();\n\n        long s = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            tree.add(a[i]);\n            int  ti = tree.total_right(a[i]); // a[i]より大きい要素の個数\n            long si = tree.sum_right(a[i]);   // a[i]より大きい要素の総和\n            s += si - a[i] * ti;\n        }\n        System.out.println(s);\n    }\n}\n\nclass AVLTree {\n    class Node {\n   ', 'start_line': 8, 'end_line': 26}
================== buggy_method_src ==================
public static void main(String[] arg) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        AVLTree tree = new AVLTree();

        long s = 0;
        for (int i = n - 1; i >= 0; i--) {
            tree.add(a[i]);
            int  ti = tree.total_right(a[i]); // a[i]より大きい要素の個数
            long si = tree.sum_right(a[i]);   // a[i]より大きい要素の総和
            s += si - a[i] * ti;
        }
        System.out.println(s);
    }
}

class AVLTree {
    class Node {
   
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[16]
================== buggy_statements ==================
['            s += si - a[i] * ti;']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] arg) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        AVLTree tree = new AVLTree();

        long s = 0;
        for (int i = n - 1; i >= 0; i--) {
            tree.add(a[i]);
            int  ti = tree.total_right(a[i]); // a[i]より大きい要素の個数
            long si = tree.sum_right(a[i]);   // a[i]より大きい要素の総和
            s += si - a[i] * ti;