[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "public static void main(String[] args) {\n\t\tFastScanner fs=new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        // int T = fs.nextInt();\n        // for (int tt=0; tt<T; tt++) {\n            \n        // }\n\t\tint n = fs.nextInt();\n\t\tint m = fs.nextInt();\n\t\tint k = fs.nextInt();\n\n\t\tint[] result = new int[m];\n\t\tint[][] test = new int[m][n];\n\t\tfor(int i=0; i<m; i++) {\n\t\t\tint c = fs.nextInt();\n\t\t\tfor(int j=0; j<c; j++) {\n\t\t\t\tint x = fs.nextInt();\n\t\t\t\ttest[i][x-1] = 1;\n\t\t\t}\n\t\t\tString res = fs.next();\n\t\t\tif (res.equals(\"o\")) {\n\t\t\t\tresult[i] = 1;\n\t\t\t} else {\n\t\t\t\tresult[i] = 0;\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i=0; i<(1<<n); i++) {\n\t\t\tint[] currentPerm = new int[n];\n\t\t\tfor(int j=0; j<n; j++) {\n\t\t\t\tif ((i & (1<<j)) > 0) {\n\t\t\t\t\tcurrentPerm[j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean flag = true;\n\t\t\tfor(int j=0; j<m; j++) {\n\t\t\t\tint goodKeys = 0;\n\t\t\t\tfor(int l=0; l<n; l++) {\n\t\t\t\t\tif (currentPerm[l] == test[j][l]) {\n\t\t\t\t\t\tgoodKeys++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(goodKeys>=k && result[j]==0) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(goodKeys<k && result[j]==1) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tout.println(ans);\n\n        out.close();\n\t}",
            "start_line": 7,
            "end_line": 65
        },
        "buggy_method_src": "public static void main(String[] args) {\n\t\tFastScanner fs=new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        // int T = fs.nextInt();\n        // for (int tt=0; tt<T; tt++) {\n            \n        // }\n\t\tint n = fs.nextInt();\n\t\tint m = fs.nextInt();\n\t\tint k = fs.nextInt();\n\n\t\tint[] result = new int[m];\n\t\tint[][] test = new int[m][n];\n\t\tfor(int i=0; i<m; i++) {\n\t\t\tint c = fs.nextInt();\n\t\t\tfor(int j=0; j<c; j++) {\n\t\t\t\tint x = fs.nextInt();\n\t\t\t\ttest[i][x-1] = 1;\n\t\t\t}\n\t\t\tString res = fs.next();\n\t\t\tif (res.equals(\"o\")) {\n\t\t\t\tresult[i] = 1;\n\t\t\t} else {\n\t\t\t\tresult[i] = 0;\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i=0; i<(1<<n); i++) {\n\t\t\tint[] currentPerm = new int[n];\n\t\t\tfor(int j=0; j<n; j++) {\n\t\t\t\tif ((i & (1<<j)) > 0) {\n\t\t\t\t\tcurrentPerm[j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean flag = true;\n\t\t\tfor(int j=0; j<m; j++) {\n\t\t\t\tint goodKeys = 0;\n\t\t\t\tfor(int l=0; l<n; l++) {\n\t\t\t\t\tif (currentPerm[l] == test[j][l]) {\n\t\t\t\t\t\tgoodKeys++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(goodKeys>=k && result[j]==0) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(goodKeys<k && result[j]==1) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tout.println(ans);\n\n        out.close();\n\t}",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            39
        ],
        "buggy_statements": [
            "\t\t\t\t\tif (currentPerm[l] == test[j][l]) {"
        ],
        "buggy_method_src_endswith_buggy_statement": "public static void main(String[] args) {\n\t\tFastScanner fs=new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        // int T = fs.nextInt();\n        // for (int tt=0; tt<T; tt++) {\n            \n        // }\n\t\tint n = fs.nextInt();\n\t\tint m = fs.nextInt();\n\t\tint k = fs.nextInt();\n\n\t\tint[] result = new int[m];\n\t\tint[][] test = new int[m][n];\n\t\tfor(int i=0; i<m; i++) {\n\t\t\tint c = fs.nextInt();\n\t\t\tfor(int j=0; j<c; j++) {\n\t\t\t\tint x = fs.nextInt();\n\t\t\t\ttest[i][x-1] = 1;\n\t\t\t}\n\t\t\tString res = fs.next();\n\t\t\tif (res.equals(\"o\")) {\n\t\t\t\tresult[i] = 1;\n\t\t\t} else {\n\t\t\t\tresult[i] = 0;\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i=0; i<(1<<n); i++) {\n\t\t\tint[] currentPerm = new int[n];\n\t\t\tfor(int j=0; j<n; j++) {\n\t\t\t\tif ((i & (1<<j)) > 0) {\n\t\t\t\t\tcurrentPerm[j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean flag = true;\n\t\t\tfor(int j=0; j<m; j++) {\n\t\t\t\tint goodKeys = 0;\n\t\t\t\tfor(int l=0; l<n; l++) {\n\t\t\t\t\tif (currentPerm[l] == test[j][l]) {"
    }
]