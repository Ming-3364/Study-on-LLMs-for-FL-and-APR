[
    {
        "buggy_file": "src/java/org/apache/commons/cli2/option/ArgumentImpl.java",
        "buggy_method": {
            "method_name": "processValues",
            "method_body": "public void processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)\n        throws OptionException {\n        // count of arguments processed for this option.\n        int argumentCount = 0;\n\n        while (arguments.hasNext() && (argumentCount < maximum)) {\n            final String allValuesQuoted = (String) arguments.next();\n            final String allValues = stripBoundaryQuotes(allValuesQuoted);\n\n            // should we ignore things that look like options?\n            if (allValuesQuoted.equals(consumeRemaining)) {\n                while (arguments.hasNext() && (argumentCount < maximum)) {\n                    ++argumentCount;\n                    commandLine.addValue(option, arguments.next());\n                }\n            }\n            // does it look like an option?\n            else if (commandLine.looksLikeOption(allValuesQuoted)) {\n                arguments.previous();\n\n                break;\n            }\n            // should we split the string up?\n            else if (subsequentSplit) {\n                final StringTokenizer values =\n                    new StringTokenizer(allValues, String.valueOf(subsequentSeparator));\n\n                arguments.remove();\n\n                while (values.hasMoreTokens() && (argumentCount < maximum)) {\n                    ++argumentCount;\n\n                    final String token = values.nextToken();\n                    commandLine.addValue(option, token);\n                    arguments.add(token);\n                }\n\n                if (values.hasMoreTokens()) {\n                    throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,\n                                              values.nextToken());\n                }\n            }\n            // it must be a value as it is\n            else {\n                ++argumentCount;\n                commandLine.addValue(option, allValues);\n            }\n        }\n    }",
            "start_line": 139,
            "end_line": 189,
            "buggy_lines": [
                144
            ]
        },
        "buggy_method_src": "public void processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)\n        throws OptionException {\n        // count of arguments processed for this option.\n        int argumentCount = 0;\n\n        while (arguments.hasNext() && (argumentCount < maximum)) {\n            final String allValuesQuoted = (String) arguments.next();\n            final String allValues = stripBoundaryQuotes(allValuesQuoted);\n\n            // should we ignore things that look like options?\n            if (allValuesQuoted.equals(consumeRemaining)) {\n                while (arguments.hasNext() && (argumentCount < maximum)) {\n                    ++argumentCount;\n                    commandLine.addValue(option, arguments.next());\n                }\n            }\n            // does it look like an option?\n            else if (commandLine.looksLikeOption(allValuesQuoted)) {\n                arguments.previous();\n\n                break;\n            }\n            // should we split the string up?\n            else if (subsequentSplit) {\n                final StringTokenizer values =\n                    new StringTokenizer(allValues, String.valueOf(subsequentSeparator));\n\n                arguments.remove();\n\n                while (values.hasMoreTokens() && (argumentCount < maximum)) {\n                    ++argumentCount;\n\n                    final String token = values.nextToken();\n                    commandLine.addValue(option, token);\n                    arguments.add(token);\n                }\n\n                if (values.hasMoreTokens()) {\n                    throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,\n                                              values.nextToken());\n                }\n            }\n            // it must be a value as it is\n            else {\n                ++argumentCount;\n                commandLine.addValue(option, allValues);\n            }\n        }\n    }",
        "test_stack": "org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest::testLoopingOptionLookAlike2\njunit.framework.ComparisonFailure: expected:<Unexpected [testfile.txt while processing ]> but was:<Unexpected [value \"testfile.txt\" found while processing  input]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2(BugLoopingOptionLookAlikeTest.java:76)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n",
        "buggy_lines_in_method": [
            6
        ],
        "buggy_statements": [
            "        int argumentCount = 0;"
        ],
        "buggy_method_src_endswith_buggy_statement": "public void processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)\n        throws OptionException {\n        // count of arguments processed for this option.\n        int argumentCount = 0;"
    }
]