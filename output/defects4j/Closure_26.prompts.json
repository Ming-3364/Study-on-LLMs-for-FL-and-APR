[
    {
        "prompt_fl_1": "\nsource code:\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nThere is a bug in the above code, please help me locate it.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_2": "\nsource code:\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_3": "\nsource code:\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nfailure assertion code:\ntest(\"define({foo: 1})\",\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace information and failure assertion code.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_4": "\nsource code:\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nThere is a bug in the above code, please help me locate it.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_fl_5": "\nsource code:\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_fl_6": "\nsource code:\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nfailure assertion code:\ntest(\"define({foo: 1})\",\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace information and failure assertion code.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_1": "\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nThere is a bug in line [0] of the code, please help me fix it.\n\nPlease return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_2": "\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nThere is a bug in ['    }'] , please help me fix it. \n\nPlease return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_3": "\n\n\nThere is a bug in the last statement, please help me fix it.\n\nReturn the code **only from the method declaration to the fixed statement**, without completing or adding additional code. Do not modify anything beyond fixing the bug, and do not complete the `if` statement or other unfinished parts. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_4": "\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nThere is a bug in line [0] of the code, please help me fix it.\n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n",
        "prompt_apr_5": "\n@Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n\nThere is a bug in ['    }'] , please help me fix it. \n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n",
        "prompt_apr_6": "\n\n\nThere is a bug in the last statement, please help me fix it.\n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n"
    },
    {
        "prompt_fl_1": "\nsource code:\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nThere is a bug in the above code, please help me locate it.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_2": "\nsource code:\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_3": "\nsource code:\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nfailure assertion code:\ntest(\"define({foo: 1})\",\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace information and failure assertion code.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_4": "\nsource code:\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nThere is a bug in the above code, please help me locate it.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_fl_5": "\nsource code:\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_fl_6": "\nsource code:\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nfailure assertion code:\ntest(\"define({foo: 1})\",\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace information and failure assertion code.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_1": "\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nThere is a bug in line [6] of the code, please help me fix it.\n\nPlease return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_2": "\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nThere is a bug in ['      script.addChildToBack(IR.ifNode('] , please help me fix it. \n\nPlease return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_3": "\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n\nThere is a bug in the last statement, please help me fix it.\n\nReturn the code **only from the method declaration to the fixed statement**, without completing or adding additional code. Do not modify anything beyond fixing the bug, and do not complete the `if` statement or other unfinished parts. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_4": "\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nThere is a bug in line [6] of the code, please help me fix it.\n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n",
        "prompt_apr_5": "\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n\nThere is a bug in ['      script.addChildToBack(IR.ifNode('] , please help me fix it. \n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n",
        "prompt_apr_6": "\nprivate void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n\nThere is a bug in the last statement, please help me fix it.\n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n"
    },
    {
        "prompt_fl_1": "\nsource code:\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nThere is a bug in the above code, please help me locate it.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_2": "\nsource code:\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_3": "\nsource code:\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nfailure assertion code:\ntest(\"define({foo: 1})\",\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace information and failure assertion code.\n\nPlease output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.\n",
        "prompt_fl_4": "\nsource code:\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nThere is a bug in the above code, please help me locate it.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_fl_5": "\nsource code:\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_fl_6": "\nsource code:\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nstack trace:\ncom.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={},module$foo$bar={foo:1}\nResult: var module$foo$bar={},module$foo$bar={foo:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY foo 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [originalname: exports] [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY foo 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS(CommandLineRunnerTest.java:1057)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS\njunit.framework.AssertionFailedError:\nExpected: var module$foo$bar={test:1}\nResult: var module$foo$bar={test:1};module$foo$bar.module$exports&&(module$foo$bar=module$foo$bar.module$exports)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n        VAR 1 [source_file: foo/bar.js]\n            NAME module$foo$bar 1 [source_file: foo/bar.js]\n                OBJECTLIT 1 [source_file: foo/bar.js]\n                    STRING_KEY test 1 [source_file: foo/bar.js]\n                        NUMBER 1.0 1 [source_file: foo/bar.js]\n        EXPR_RESULT 1 [source_file: foo/bar.js]\n            AND 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n                ASSIGN 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    GETPROP 1 [source_file: foo/bar.js]\n                        NAME module$foo$bar 1 [source_file: foo/bar.js]\n                        STRING module$exports 1 [source_file: foo/bar.js]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar.js] [input_id: InputId: foo/bar.js]\n    VAR 1 [source_file: foo/bar.js]\n        NAME module$foo$bar 1 [source_file: foo/bar.js]\n            OBJECTLIT 1 [source_file: foo/bar.js]\n                STRING_KEY test 1 [source_file: foo/bar.js]\n                    NUMBER 1.0 1 [source_file: foo/bar.js]\n    EXPR_RESULT 1 [source_file: foo/bar.js]\n        AND 1 [source_file: foo/bar.js]\n            GETPROP 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                STRING module$exports 1 [source_file: foo/bar.js]\n            ASSIGN 1 [source_file: foo/bar.js]\n                NAME module$foo$bar 1 [source_file: foo/bar.js]\n                GETPROP 1 [source_file: foo/bar.js]\n                    NAME module$foo$bar 1 [source_file: foo/bar.js]\n                    STRING module$exports 1 [source_file: foo/bar.js]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1109)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1080)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:1072)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS(CommandLineRunnerTest.java:1048)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;module$test.foo=1;if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            ASSIGN 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME module$test 1 [originalname: exports] [source_file: test]\n                    STRING foo 1 [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        ASSIGN 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [originalname: exports] [source_file: test]\n                STRING foo 1 [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports(ProcessCommonJSModulesTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name\nResult: goog.provide(\"module$foo$bar\");var module$foo$bar={};goog.require(\"module$name\");var name$$module$foo$bar=module$name;if(module$foo$bar.module$exports)module$foo$bar=module$foo$bar.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$foo$bar 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$foo$bar 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$foo$bar 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING provide 1 [source_file: foo/bar]\n                STRING module$foo$bar 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n                OBJECTLIT 1 [source_file: foo/bar]\n        EXPR_RESULT 1 [source_file: foo/bar]\n            CALL 1 [source_file: foo/bar]\n                GETPROP 1 [source_file: foo/bar]\n                    NAME goog 1 [source_file: foo/bar]\n                    STRING require 1 [source_file: foo/bar]\n                STRING module$name 1 [source_file: foo/bar]\n        VAR 1 [source_file: foo/bar]\n            NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n                NAME module$name 1 [source_file: foo/bar]\n        IF 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME module$foo$bar 1 [source_file: foo/bar]\n                STRING module$exports 1 [source_file: foo/bar]\n            BLOCK 1 [source_file: foo/bar]\n                EXPR_RESULT 1 [source_file: foo/bar]\n                    ASSIGN 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        GETPROP 1 [source_file: foo/bar]\n                            NAME module$foo$bar 1 [source_file: foo/bar]\n                            STRING module$exports 1 [source_file: foo/bar]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$foo$bar 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$foo$bar 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$foo$bar 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: foo/bar] [input_id: InputId: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING provide 1 [source_file: foo/bar]\n            STRING module$foo$bar 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME module$foo$bar 1 [source_file: foo/bar]\n            OBJECTLIT 1 [source_file: foo/bar]\n    EXPR_RESULT 1 [source_file: foo/bar]\n        CALL 1 [source_file: foo/bar]\n            GETPROP 1 [source_file: foo/bar]\n                NAME goog 1 [source_file: foo/bar]\n                STRING require 1 [source_file: foo/bar]\n            STRING module$name 1 [source_file: foo/bar]\n    VAR 1 [source_file: foo/bar]\n        NAME name$$module$foo$bar 1 [originalname: name] [source_file: foo/bar]\n            NAME module$name 1 [source_file: foo/bar]\n    IF 1 [source_file: foo/bar]\n        GETPROP 1 [source_file: foo/bar]\n            NAME module$foo$bar 1 [source_file: foo/bar]\n            STRING module$exports 1 [source_file: foo/bar]\n        BLOCK 1 [source_file: foo/bar]\n            EXPR_RESULT 1 [source_file: foo/bar]\n                ASSIGN 1 [source_file: foo/bar]\n                    NAME module$foo$bar 1 [source_file: foo/bar]\n                    GETPROP 1 [source_file: foo/bar]\n                        NAME module$foo$bar 1 [source_file: foo/bar]\n                        STRING module$exports 1 [source_file: foo/bar]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName(ProcessCommonJSModulesTest.java:114)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1\nResult: goog.provide(\"module$test_test\");var module$test_test={};goog.require(\"module$name\");var name$$module$test_test=module$name;module$test_test.foo=1;if(module$test_test.module$exports)module$test_test=module$test_test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test_test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test_test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test_test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME module$test_test 1 [source_file: expected0]\n                    STRING foo 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING provide 1 [source_file: test-test]\n                STRING module$test_test 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n                OBJECTLIT 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            CALL 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME goog 1 [source_file: test-test]\n                    STRING require 1 [source_file: test-test]\n                STRING module$name 1 [source_file: test-test]\n        VAR 1 [source_file: test-test]\n            NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n                NAME module$name 1 [source_file: test-test]\n        EXPR_RESULT 1 [source_file: test-test]\n            ASSIGN 1 [source_file: test-test]\n                GETPROP 1 [source_file: test-test]\n                    NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                    STRING foo 1 [source_file: test-test]\n                NUMBER 1.0 1 [source_file: test-test]\n        IF 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [source_file: test-test]\n                STRING module$exports 1 [source_file: test-test]\n            BLOCK 1 [source_file: test-test]\n                EXPR_RESULT 1 [source_file: test-test]\n                    ASSIGN 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        GETPROP 1 [source_file: test-test]\n                            NAME module$test_test 1 [source_file: test-test]\n                            STRING module$exports 1 [source_file: test-test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test_test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test_test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test_test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME module$test_test 1 [source_file: expected0]\n                STRING foo 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test-test] [input_id: InputId: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING provide 1 [source_file: test-test]\n            STRING module$test_test 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME module$test_test 1 [source_file: test-test]\n            OBJECTLIT 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        CALL 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME goog 1 [source_file: test-test]\n                STRING require 1 [source_file: test-test]\n            STRING module$name 1 [source_file: test-test]\n    VAR 1 [source_file: test-test]\n        NAME name$$module$test_test 1 [originalname: name] [source_file: test-test]\n            NAME module$name 1 [source_file: test-test]\n    EXPR_RESULT 1 [source_file: test-test]\n        ASSIGN 1 [source_file: test-test]\n            GETPROP 1 [source_file: test-test]\n                NAME module$test_test 1 [originalname: exports] [source_file: test-test]\n                STRING foo 1 [source_file: test-test]\n            NUMBER 1.0 1 [source_file: test-test]\n    IF 1 [source_file: test-test]\n        GETPROP 1 [source_file: test-test]\n            NAME module$test_test 1 [source_file: test-test]\n            STRING module$exports 1 [source_file: test-test]\n        BLOCK 1 [source_file: test-test]\n            EXPR_RESULT 1 [source_file: test-test]\n                ASSIGN 1 [source_file: test-test]\n                    NAME module$test_test 1 [source_file: test-test]\n                    GETPROP 1 [source_file: test-test]\n                        NAME module$test_test 1 [source_file: test-test]\n                        STRING module$exports 1 [source_file: test-test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash(ProcessCommonJSModulesTest.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})()\nResult: goog.provide(\"module$test\");var module$test={};var a$$module$test=1,b$$module$test=2;(function(){var a;b$$module$test=4})();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a$$module$test 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n            NAME b$$module$test 1 [source_file: expected0]\n                NUMBER 2.0 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    PARAM_LIST 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME b$$module$test 1 [source_file: expected0]\n                                NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME a$$module$test 1 [originalname: a] [source_file: test]\n                NUMBER 1.0 1 [source_file: test]\n            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                NUMBER 2.0 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                FUNCTION  1 [parenthesized: true] [source_file: test]\n                    NAME  1 [source_file: test]\n                    PARAM_LIST 1 [source_file: test]\n                    BLOCK 1 [source_file: test]\n                        VAR 1 [source_file: test]\n                            NAME a 1 [source_file: test]\n                        EXPR_RESULT 1 [source_file: test]\n                            ASSIGN 1 [source_file: test]\n                                NAME b$$module$test 1 [originalname: b] [source_file: test]\n                                NUMBER 4.0 1 [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a$$module$test 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NAME b$$module$test 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                NAME  1 [source_file: expected0]\n                PARAM_LIST 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME b$$module$test 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME a$$module$test 1 [originalname: a] [source_file: test]\n            NUMBER 1.0 1 [source_file: test]\n        NAME b$$module$test 1 [originalname: b] [source_file: test]\n            NUMBER 2.0 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            FUNCTION  1 [parenthesized: true] [source_file: test]\n                NAME  1 [source_file: test]\n                PARAM_LIST 1 [source_file: test]\n                BLOCK 1 [source_file: test]\n                    VAR 1 [source_file: test]\n                        NAME a 1 [source_file: test]\n                    EXPR_RESULT 1 [source_file: test]\n                        ASSIGN 1 [source_file: test]\n                            NAME b$$module$test 1 [originalname: b] [source_file: test]\n                            NUMBER 4.0 1 [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming(ProcessCommonJSModulesTest.java:82)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\ncom.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports\njunit.framework.AssertionFailedError:\nExpected: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test()\nResult: goog.provide(\"module$test\");var module$test={};goog.require(\"module$name\");var name$$module$test=module$name;name$$module$test();if(module$test.module$exports)module$test=module$test.module$exports\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING provide 1 [source_file: expected0]\n                STRING module$test 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME module$test 1 [source_file: expected0]\n                OBJECTLIT 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    NAME goog 1 [source_file: expected0]\n                    STRING require 1 [source_file: expected0]\n                STRING module$name 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n                NAME module$name 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME name$$module$test 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING provide 1 [source_file: test]\n                STRING module$test 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n                OBJECTLIT 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [source_file: test]\n                GETPROP 1 [source_file: test]\n                    NAME goog 1 [source_file: test]\n                    STRING require 1 [source_file: test]\n                STRING module$name 1 [source_file: test]\n        VAR 1 [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n                NAME module$name 1 [source_file: test]\n        EXPR_RESULT 1 [source_file: test]\n            CALL 1 [free_call: 1] [source_file: test]\n                NAME name$$module$test 1 [originalname: name] [source_file: test]\n        IF 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME module$test 1 [source_file: test]\n                STRING module$exports 1 [source_file: test]\n            BLOCK 1 [source_file: test]\n                EXPR_RESULT 1 [source_file: test]\n                    ASSIGN 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        GETPROP 1 [source_file: test]\n                            NAME module$test 1 [source_file: test]\n                            STRING module$exports 1 [source_file: test]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING provide 1 [source_file: expected0]\n            STRING module$test 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME module$test 1 [source_file: expected0]\n            OBJECTLIT 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [source_file: expected0]\n            GETPROP 1 [source_file: expected0]\n                NAME goog 1 [source_file: expected0]\n                STRING require 1 [source_file: expected0]\n            STRING module$name 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME name$$module$test 1 [source_file: expected0]\n            NAME module$name 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        CALL 1 [free_call: 1] [source_file: expected0]\n            NAME name$$module$test 1 [source_file: expected0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: test] [input_id: InputId: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING provide 1 [source_file: test]\n            STRING module$test 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME module$test 1 [source_file: test]\n            OBJECTLIT 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [source_file: test]\n            GETPROP 1 [source_file: test]\n                NAME goog 1 [source_file: test]\n                STRING require 1 [source_file: test]\n            STRING module$name 1 [source_file: test]\n    VAR 1 [source_file: test]\n        NAME name$$module$test 1 [originalname: name] [source_file: test]\n            NAME module$name 1 [source_file: test]\n    EXPR_RESULT 1 [source_file: test]\n        CALL 1 [free_call: 1] [source_file: test]\n            NAME name$$module$test 1 [originalname: name] [source_file: test]\n    IF 1 [source_file: test]\n        GETPROP 1 [source_file: test]\n            NAME module$test 1 [source_file: test]\n            STRING module$exports 1 [source_file: test]\n        BLOCK 1 [source_file: test]\n            EXPR_RESULT 1 [source_file: test]\n                ASSIGN 1 [source_file: test]\n                    NAME module$test 1 [source_file: test]\n                    GETPROP 1 [source_file: test]\n                        NAME module$test 1 [source_file: test]\n                        STRING module$exports 1 [source_file: test]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports(ProcessCommonJSModulesTest.java:39)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\n\nfailure assertion code:\ntest(\"define({foo: 1})\",\n\n\nThere is a bug in the above code, please help me locate it by considering the stack trace information and failure assertion code.\n\nOutput **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_1": "\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nThere is a bug in line [0] of the code, please help me fix it.\n\nPlease return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_2": "\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nThere is a bug in ['    }'] , please help me fix it. \n\nPlease return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_3": "\n\n\nThere is a bug in the last statement, please help me fix it.\n\nReturn the code **only from the method declaration to the fixed statement**, without completing or adding additional code. Do not modify anything beyond fixing the bug, and do not complete the `if` statement or other unfinished parts. Do not include ```java or ``` markers in the response.\n",
        "prompt_apr_4": "\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nThere is a bug in line [0] of the code, please help me fix it.\n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n",
        "prompt_apr_5": "\nprivate Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n\nThere is a bug in ['    }'] , please help me fix it. \n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n",
        "prompt_apr_6": "\n\n\nThere is a bug in the last statement, please help me fix it.\n\nPlease return the results in a strict JSON format as described below. Please follow these instructions carefully:\n1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).\n2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:\n   - `\"line_number\"`: The line number of the buggy code that was repaired (integer).\n   - `\"fixed_statement\"`: The repaired statement for that specific line (string).\n\n3. The result must strictly follow this format:\n[\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    },\n    {\n        \"line_number\": int,\n        \"fixed_statement\": \"string\"\n    }\n]\n4. The repaired statement in \"fixed_statement\" must replace the corresponding line in the buggy code.\n5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.\n"
    }
]