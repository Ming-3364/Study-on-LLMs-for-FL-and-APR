{
    "overall_status": {
        "prompt_apr_1": {
            "ernie-3.5-128k": "Compile failed",
            "qwen-turbo": "Compile failed",
            "doubao-pro-4k": "Fail some tests",
            "gpt-4o-mini": "Fail some tests",
            "deepseek-chat": "Compile failed"
        },
        "prompt_apr_2": {
            "ernie-3.5-128k": "Compile failed",
            "qwen-turbo": "Compile failed",
            "doubao-pro-4k": "Fail some tests",
            "gpt-4o-mini": "Fail some tests",
            "deepseek-chat": "Compile failed"
        },
        "prompt_apr_3": {
            "ernie-3.5-128k": "Compile failed",
            "qwen-turbo": "Compile failed",
            "doubao-pro-4k": "Fail some tests",
            "gpt-4o-mini": "Compile failed",
            "deepseek-chat": "Compile failed"
        },
        "prompt_apr_4": {
            "ernie-3.5-128k": "Fail some tests",
            "qwen-turbo": "Fail some tests",
            "doubao-pro-4k": "Compile failed",
            "gpt-4o-mini": "Compile failed",
            "deepseek-chat": "Compile failed"
        },
        "prompt_apr_5": {
            "ernie-3.5-128k": "Compile failed",
            "qwen-turbo": "Compile failed",
            "doubao-pro-4k": "Compile failed",
            "gpt-4o-mini": "Compile failed",
            "deepseek-chat": "Compile failed"
        },
        "prompt_apr_6": {
            "ernie-3.5-128k": "Compile failed",
            "qwen-turbo": "Compile failed",
            "doubao-pro-4k": "Compile failed",
            "gpt-4o-mini": "Compile failed",
            "deepseek-chat": "Compile failed"
        }
    },
    "check_results_list": {
        "prompt_apr_1": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:39: error: as of release 8, 'this' is allowed as the parameter name for the receiver type only\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n   ^\n  which has to be the first parameter, and cannot be a lambda parameter\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n       ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                              ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                        ^\nMain.java:39: error: <identifier> expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                             ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                 ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                   ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                            ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                              ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                      ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                             ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                          ^\nMain.java:39: error: unclosed character literal\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                 ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                            ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                    ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                        ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                              ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                     ^\nMain.java:39: error: <identifier> expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                           ^\nMain.java:39: error: <identifier> expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                 ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                               ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                   ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                     ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                           ^\nMain.java:39: error: illegal character: '`'\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                             ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                                      ^\nMain.java:39: error: <identifier> expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                                           ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                                                 ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                                                              ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                                                                   ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                                                                            ^\nMain.java:39: error: ';' expected\nIn this corrected version, the issue was that if `L` equals `R` at the end of the loop, it wouldn't be added to the `ans` list. The additional check `if (L == R)` ensures that if `L` and `R` are the same, they are included as a range in the output.}\n                                                                                                                                                                                                                                                       ^\n33 errors\n"
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:6: error: <identifier> expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n         ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                    ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                            ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                       ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                 ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                     ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                       ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                  ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                              ^\nMain.java:6: error: <identifier> expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                ^\nMain.java:6: error: <identifier> expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                           ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                            ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                         ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                        ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                  ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                              ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                     ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                              ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                           ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                               ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                         ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                                 ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                                                   ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                                                          ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                                                                           ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                                                                               ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                                                                                 ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                                                                                             ^\nMain.java:6: error: ';' expected\nCertainly! The issue on line 15 is that the value of `L` should be updated to `L + (1L << i)` instead of `L += (1L << i)`. This is because the current implementation is using the compound assignment operator which can lead to incorrect results due to the modification of `L` within the loop condition.\n                                                                                                                                                                                                                                                                                                            ^\nMain.java:8: error: ';' expected\nHere is the corrected complete method:\n       ^\nMain.java:8: error: ';' expected\nHere is the corrected complete method:\n                     ^\nMain.java:8: error: ';' expected\nHere is the corrected complete method:\n                                     ^\nMain.java:10: error: illegal character: '`'\n```java\n^\nMain.java:10: error: illegal character: '`'\n```java\n ^\nMain.java:10: error: illegal character: '`'\n```java\n  ^\nMain.java:10: error: <identifier> expected\n```java\n       ^\nMain.java:11: error: <identifier> expected\nimport java.util.ArrayList;\n                          ^\nMain.java:12: error: illegal start of type\nimport java.util.List;\n^\nMain.java:12: error: <identifier> expected\nimport java.util.List;\n                     ^\nMain.java:13: error: illegal start of type\nimport java.util.Scanner;\n^\nMain.java:13: error: <identifier> expected\nimport java.util.Scanner;\n                        ^\nMain.java:42: error: illegal character: '`'\n```\n^\nMain.java:42: error: illegal character: '`'\n```\n ^\nMain.java:42: error: illegal character: '`'\n```\n  ^\nMain.java:44: error: ';' expected\nThis change ensures that `L` is correctly updated without affecting the loop condition prematurely.}\n                   ^\nMain.java:44: error: illegal character: '`'\nThis change ensures that `L` is correctly updated without affecting the loop condition prematurely.}\n                         ^\nMain.java:44: error: illegal character: '`'\nThis change ensures that `L` is correctly updated without affecting the loop condition prematurely.}\n                           ^\nMain.java:44: error: ';' expected\nThis change ensures that `L` is correctly updated without affecting the loop condition prematurely.}\n                                         ^\nMain.java:44: error: ';' expected\nThis change ensures that `L` is correctly updated without affecting the loop condition prematurely.}\n                                                         ^\nMain.java:44: error: ';' expected\nThis change ensures that `L` is correctly updated without affecting the loop condition prematurely.}\n                                                                       ^\nMain.java:44: error: ';' expected\nThis change ensures that `L` is correctly updated without affecting the loop condition prematurely.}\n                                                                                      ^\nMain.java:44: error: <identifier> expected\nThis change ensures that `L` is correctly updated without affecting the loop condition prematurely.}\n                                                                                                   ^\n52 errors\n"
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": 0,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_test_11",
                            "returncode": 0,
                            "stdout": "55\n893124445952679748 893124445952679751\n893124445952679752 893124445952679759\n893124445952679760 893124445952679775\n893124445952679776 893124445952679807\n893124445952679808 893124445952679935\n893124445952679936 893124445952688127\n893124445952688128 893124445952704511\n893124445952704512 893124445952737279\n893124445952737280 893124445952802815\n893124445952802816 893124445953064959\n893124445953064960 893124445957259263\n893124445957259264 893124445965647871\n893124445965647872 893124445999202303\n893124445999202304 893124446536073215\n893124446536073216 893124447609815039\n893124447609815040 893124464789684223\n893124464789684224 893124499149422591\n893124499149422592 893128897195933695\n893128897195933696 893137693288955903\n893137693288955904 893155285475000319\n893155285475000320 893190469847089151\n893190469847089152 893260838591266815\n893260838591266816 893401576079622143\n893401576079622144 893964526033043455\n893964526033043456 896216325846728703\n896216325846728704 900719925474099199\n900719925474099200 936748722493063167\n936748722493063168 1008806316530991103\n1008806316530991104 1026820715040473087\n1026820715040473088 1035827914295214079\n1035827914295214080 1038079714108899327\n1038079714108899328 1039205614015741951\n1039205614015741952 1039768563969163263\n1039768563969163264 1039803748341252095\n1039803748341252096 1039821340527296511\n1039821340527296512 1039830136620318719\n1039830136620318720 1039834534666829823\n1039834534666829824 1039836733690085375\n1039836733690085376 1039837833201713151\n1039837833201713152 1039838382957527039\n1039838382957527040 1039838417317265407\n1039838417317265408 1039838425907199999\n1039838425907200000 1039838426980941823\n1039838426980941824 1039838427517812735\n1039838427517812736 1039838427534589951\n1039838427534589952 1039838427542978559\n1039838427542978560 1039838427545075711\n1039838427545075712 1039838427545092095\n1039838427545092096 1039838427545096191\n1039838427545096192 1039838427545097215\n1039838427545097216 1039838427545097727\n1039838427545097728 1039838427545097983\n1039838427545097984 1039838427545098111\n1039838427545098112 1039838427545098127\n1039838427545098128 1039838427545098128\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_27",
                            "returncode": 0,
                            "stdout": "1\n0 0\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_09",
                            "returncode": 0,
                            "stdout": "98\n505529333062828545 505529333062828545\n505529333062828546 505529333062828547\n505529333062828548 505529333062828551\n505529333062828552 505529333062828559\n505529333062828560 505529333062828575\n505529333062828576 505529333062828607\n505529333062828608 505529333062828671\n505529333062828672 505529333062828799\n505529333062828800 505529333062829055\n505529333062829056 505529333062830079\n505529333062830080 505529333062832127\n505529333062832128 505529333062836223\n505529333062836224 505529333062844415\n505529333062844416 505529333062860799\n505529333062860800 505529333062893567\n505529333062893568 505529333062959103\n505529333062959104 505529333063090175\n505529333063090176 505529333063352319\n505529333063352320 505529333063876607\n505529333063876608 505529333064925183\n505529333064925184 505529333067022335\n505529333067022336 505529333083799551\n505529333083799552 505529333117353983\n505529333117353984 505529333184462847\n505529333184462848 505529333318680575\n505529333318680576 505529333587116031\n505529333587116032 505529334123986943\n505529334123986944 505529335197728767\n505529335197728768 505529337345212415\n505529337345212416 505529341640179711\n505529341640179712 505529350230114303\n505529350230114304 505529367409983487\n505529367409983488 505529401769721855\n505529401769721856 505529470489198591\n505529470489198592 505529607928152063\n505529607928152064 505530157683965951\n505530157683965952 505531257195593727\n505531257195593728 505533456218849279\n505533456218849280 505537854265360383\n505537854265360384 505546650358382591\n505546650358382592 505564242544427007\n505564242544427008 505599426916515839\n505599426916515840 505669795660693503\n505669795660693504 505810533149048831\n505810533149048832 506092008125759487\n506092008125759488 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575616327373291519\n575616327373291520 575757064861646847\n575757064861646848 575827433605824511\n575827433605824512 575862617977913343\n575862617977913344 575880210163957759\n575880210163957760 575889006256979967\n575889006256979968 575893404303491071\n575893404303491072 575895603326746623\n575895603326746624 575896702838374399\n575896702838374400 575897252594188287\n575897252594188288 575897527472095231\n575897527472095232 575897664911048703\n575897664911048704 575897733630525439\n575897733630525440 575897767990263807\n575897767990263808 575897785170132991\n575897785170132992 575897793760067583\n575897793760067584 575897795907551231\n575897795907551232 575897796981293055\n575897796981293056 575897797518163967\n575897797518163968 575897797786599423\n575897797786599424 575897797920817151\n575897797920817152 575897797987926015\n575897797987926016 575897798021480447\n575897798021480448 575897798038257663\n575897798038257664 575897798046646271\n575897798046646272 575897798050840575\n575897798050840576 575897798052937727\n575897798052937728 575897798053986303\n575897798053986304 575897798054510591\n575897798054510592 575897798054772735\n575897798054772736 575897798054903807\n575897798054903808 575897798054936575\n575897798054936576 575897798054952959\n575897798054952960 575897798054953983\n575897798054953984 575897798054954495\n575897798054954496 575897798054954751\n575897798054954752 575897798054954879\n575897798054954880 575897798054954943\n575897798054954944 575897798054954975\n575897798054954976 575897798054954991\n575897798054954992 575897798054954995\n575897798054954996 575897798054954997\n575897798054954998 575897798054954998\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_20",
                            "returncode": 0,
                            "stdout": "61\n181262195287766621 181262195287766621\n181262195287766622 181262195287766623\n181262195287766624 181262195287766655\n181262195287766656 181262195287766783\n181262195287766784 181262195287767039\n181262195287767040 181262195287769087\n181262195287769088 181262195287785471\n181262195287785472 181262195287916543\n181262195287916544 181262195288440831\n181262195288440832 181262195290537983\n181262195290537984 181262195298926591\n181262195298926592 181262195332481023\n181262195332481024 181262195399589887\n181262195399589888 181262195936460799\n181262195936460800 181262197010202623\n181262197010202624 181262205600137215\n181262205600137216 181262222780006399\n181262222780006400 181262257139744767\n181262257139744768 181262325859221503\n181262325859221504 181262463298174975\n181262463298174976 181262738176081919\n181262738176081920 181263287931895807\n181263287931895808 181265486955151359\n181265486955151360 181269885001662463\n181269885001662464 182395784908505087\n182395784908505088 184647584722190335\n184647584722190336 189151184349560831\n189151184349560832 198158383604301823\n198158383604301824 216172782113783807\n216172782113783808 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 756604737398243327\n756604737398243328 774619135907725311\n774619135907725312 776870935721410559\n776870935721410560 777996835628253183\n777996835628253184 778559785581674495\n778559785581674496 778841260558385151\n778841260558385152 778981998046740479\n778981998046740480 778990794139762687\n778990794139762688 778991893651390463\n778991893651390464 778992443407204351\n778992443407204352 778992718285111295\n778992718285111296 778992726875045887\n778992726875045888 778992729022529535\n778992729022529536 778992730096271359\n778992730096271360 778992730364706815\n778992730364706816 778992730381484031\n778992730381484032 778992730385678335\n778992730385678336 778992730387775487\n778992730387775488 778992730388037631\n778992730388037632 778992730388168703\n778992730388168704 778992730388234239\n778992730388234240 778992730388267007\n778992730388267008 778992730388283391\n778992730388283392 778992730388287487\n778992730388287488 778992730388288511\n778992730388288512 778992730388288767\n778992730388288768 778992730388288799\n778992730388288800 778992730388288815\n778992730388288816 778992730388288823\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_25",
                            "returncode": 0,
                            "stdout": "2\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_17",
                            "returncode": 0,
                            "stdout": "59\n366943872216607560 366943872216607567\n366943872216607568 366943872216607583\n366943872216607584 366943872216607615\n366943872216607616 366943872216607743\n366943872216607744 366943872216608767\n366943872216608768 366943872216612863\n366943872216612864 366943872216629247\n366943872216629248 366943872216662015\n366943872216662016 366943872216727551\n366943872216727552 366943872216989695\n366943872216989696 366943872284098559\n366943872284098560 366943872418316287\n366943872418316288 366943881008250879\n366943881008250880 366943898188120063\n366943898188120064 366943932547858431\n366943932547858432 366944001267335167\n366944001267335168 366944138706288639\n366944138706288640 366944413584195583\n366944413584195584 366946612607451135\n366946612607451136 366955408700473343\n366955408700473344 366973000886517759\n366973000886517760 367043369630695423\n367043369630695424 369295169444380671\n369295169444380672 378302368699121663\n378302368699121664 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1081004648057274367\n1081004648057274368 1081039832429363199\n1081039832429363200 1081057424615407615\n1081057424615407616 1081066220708429823\n1081066220708429824 1081068419731685375\n1081068419731685376 1081069519243313151\n1081069519243313152 1081070068999127039\n1081070068999127040 1081070343877033983\n1081070343877033984 1081070412596510719\n1081070412596510720 1081070446956249087\n1081070446956249088 1081070455546183679\n1081070455546183680 1081070457693667327\n1081070457693667328 1081070458767409151\n1081070458767409152 1081070459304280063\n1081070459304280064 1081070459371388927\n1081070459371388928 1081070459388166143\n1081070459388166144 1081070459390263295\n1081070459390263296 1081070459391311871\n1081070459391311872 1081070459391574015\n1081070459391574016 1081070459391705087\n1081070459391705088 1081070459391707135\n1081070459391707136 1081070459391708159\n1081070459391708160 1081070459391708415\n1081070459391708416 1081070459391708543\n1081070459391708544 1081070459391708607\n1081070459391708608 1081070459391708639\n1081070459391708640 1081070459391708655\n1081070459391708656 1081070459391708659\n1081070459391708660 1081070459391708660\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_13",
                            "returncode": 0,
                            "stdout": "52\n813135255471707232 813135255471707263\n813135255471707264 813135255471707391\n813135255471707392 813135255471707647\n813135255471707648 813135255471708159\n813135255471708160 813135255471710207\n813135255471710208 813135255471718399\n813135255471718400 813135255471783935\n813135255471783936 813135255471915007\n813135255471915008 813135255476109311\n813135255476109312 813135255492886527\n813135255492886528 813135255526440959\n813135255526440960 813135255593549823\n813135255593549824 813135255861985279\n813135255861985280 813135260156952575\n813135260156952576 813135268746887167\n813135268746887168 813135303106625535\n813135303106625536 813135577984532479\n813135577984532480 813136127740346367\n813136127740346368 813137227251974143\n813137227251974144 813146023344996351\n813146023344996352 813181207717085183\n813181207717085184 813462682693795839\n813462682693795840 814025632647217151\n814025632647217152 815151532554059775\n815151532554059776 819655132181430271\n819655132181430272 828662331436171263\n828662331436171264 846676729945653247\n846676729945653248 847802629852495871\n847802629852495872 848084104829206527\n848084104829206528 848154473573384191\n848154473573384192 848172065759428607\n848172065759428608 848174264782684159\n848174264782684160 848174539660591103\n848174539660591104 848174677099544575\n848174677099544576 848174745819021311\n848174745819021312 848174780178759679\n848174780178759680 848174788768694271\n848174788768694272 848174793063661567\n848174793063661568 848174794137403391\n848174794137403392 848174794405838847\n848174794405838848 848174794472947711\n848174794472947712 848174794506502143\n848174794506502144 848174794508599295\n848174794508599296 848174794509647871\n848174794509647872 848174794509713407\n848174794509713408 848174794509729791\n848174794509729792 848174794509733887\n848174794509733888 848174794509734911\n848174794509734912 848174794509735423\n848174794509735424 848174794509735679\n848174794509735680 848174794509735807\n848174794509735808 848174794509735811\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_10",
                            "returncode": 0,
                            "stdout": "110\n504403158265495553 504403158265495553\n504403158265495554 504403158265495555\n504403158265495556 504403158265495559\n504403158265495560 504403158265495567\n504403158265495568 504403158265495583\n504403158265495584 504403158265495615\n504403158265495616 504403158265495679\n504403158265495680 504403158265495807\n504403158265495808 504403158265496063\n504403158265496064 504403158265496575\n504403158265496576 504403158265497599\n504403158265497600 504403158265499647\n504403158265499648 504403158265503743\n504403158265503744 504403158265511935\n504403158265511936 504403158265528319\n504403158265528320 504403158265561087\n504403158265561088 504403158265626623\n504403158265626624 504403158265757695\n504403158265757696 504403158266019839\n504403158266019840 504403158266544127\n504403158266544128 504403158267592703\n504403158267592704 504403158269689855\n504403158269689856 504403158273884159\n504403158273884160 504403158282272767\n504403158282272768 504403158299049983\n504403158299049984 504403158332604415\n504403158332604416 504403158399713279\n504403158399713280 504403158533931007\n504403158533931008 504403158802366463\n504403158802366464 504403159339237375\n504403159339237376 504403160412979199\n504403160412979200 504403162560462847\n504403162560462848 504403166855430143\n504403166855430144 504403175445364735\n504403175445364736 504403192625233919\n504403192625233920 504403226984972287\n504403226984972288 504403295704449023\n504403295704449024 504403433143402495\n504403433143402496 504403708021309439\n504403708021309440 504404257777123327\n504404257777123328 504405357288751103\n504405357288751104 504407556312006655\n504407556312006656 504411954358517759\n504411954358517760 504420750451539967\n504420750451539968 504438342637584383\n504438342637584384 504473527009673215\n504473527009673216 504543895753850879\n504543895753850880 504684633242206207\n504684633242206208 504966108218916863\n504966108218916864 505529058172338175\n505529058172338176 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575897802350002175\n575897802350002176 576179277326712831\n576179277326712832 576320014815068159\n576320014815068160 576390383559245823\n576390383559245824 576425567931334655\n576425567931334656 576443160117379071\n576443160117379072 576451956210401279\n576451956210401280 576456354256912383\n576456354256912384 576458553280167935\n576458553280167936 576459652791795711\n576459652791795712 576460202547609599\n576460202547609600 576460477425516543\n576460477425516544 576460614864470015\n576460614864470016 576460683583946751\n576460683583946752 576460717943685119\n576460717943685120 576460735123554303\n576460735123554304 576460743713488895\n576460743713488896 576460748008456191\n576460748008456192 576460750155939839\n576460750155939840 576460751229681663\n576460751229681664 576460751766552575\n576460751766552576 576460752034988031\n576460752034988032 576460752169205759\n576460752169205760 576460752236314623\n576460752236314624 576460752269869055\n576460752269869056 576460752286646271\n576460752286646272 576460752295034879\n576460752295034880 576460752299229183\n576460752299229184 576460752301326335\n576460752301326336 576460752302374911\n576460752302374912 576460752302899199\n576460752302899200 576460752303161343\n576460752303161344 576460752303292415\n576460752303292416 576460752303357951\n576460752303357952 576460752303390719\n576460752303390720 576460752303407103\n576460752303407104 576460752303415295\n576460752303415296 576460752303419391\n576460752303419392 576460752303421439\n576460752303421440 576460752303422463\n576460752303422464 576460752303422975\n576460752303422976 576460752303423231\n576460752303423232 576460752303423359\n576460752303423360 576460752303423423\n576460752303423424 576460752303423455\n576460752303423456 576460752303423471\n576460752303423472 576460752303423479\n576460752303423480 576460752303423483\n576460752303423484 576460752303423485\n576460752303423486 576460752303423486\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_02",
                            "returncode": 0,
                            "stdout": "25\n432344644764301224 432344644764301231\n432344644764301232 432344644764301247\n432344644764301248 432344644764301311\n432344644764301312 432344644764303359\n432344644764303360 432344644764827647\n432344644764827648 432344644769021951\n432344644769021952 432344644836130815\n432344644836130816 432344645104566271\n432344645104566272 432344653694500863\n432344653694500864 432344670874370047\n432344670874370048 432344739593846783\n432344739593846784 432345014471753727\n432345014471753728 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 558448552817197055\n558448552817197056 558448827695103999\n558448827695104000 558448896414580735\n558448896414580736 558448896683016191\n558448896683016192 558448896716570623\n558448896716570624 558448896716832767\n558448896716832768 558448896716849151\n558448896716849152 558448896716853247\n558448896716853248 558448896716855295\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": 0,
                            "stdout": "5\n3 3\n4 7\n8 15\n16 17\n18 18\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_23",
                            "returncode": 0,
                            "stdout": "60\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_29",
                            "returncode": 0,
                            "stdout": "2\n1 1\n2 2\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_24",
                            "returncode": 0,
                            "stdout": "118\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_28",
                            "returncode": 0,
                            "stdout": "1\n1 1\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_26",
                            "returncode": 0,
                            "stdout": "1\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_22",
                            "returncode": 0,
                            "stdout": "60\n0 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_08",
                            "returncode": 0,
                            "stdout": "87\n432486315808860234 432486315808860235\n432486315808860236 432486315808860239\n432486315808860240 432486315808860255\n432486315808860256 432486315808860287\n432486315808860288 432486315808860415\n432486315808860416 432486315808860671\n432486315808860672 432486315808861183\n432486315808861184 432486315808862207\n432486315808862208 432486315808866303\n432486315808866304 432486315808882687\n432486315808882688 432486315808915455\n432486315808915456 432486315809046527\n432486315809046528 432486315809308671\n432486315809308672 432486315809832959\n432486315809832960 432486315810881535\n432486315810881536 432486315812978687\n432486315812978688 432486315817172991\n432486315817172992 432486315825561599\n432486315825561600 432486315842338815\n432486315842338816 432486315875893247\n432486315875893248 432486315943002111\n432486315943002112 432486316211437567\n432486316211437568 432486316748308479\n432486316748308480 432486318895792127\n432486318895792128 432486336075661311\n432486336075661312 432486370435399679\n432486370435399680 432486439154876415\n432486439154876416 432486576593829887\n432486576593829888 432486851471736831\n432486851471736832 432487401227550719\n432487401227550720 432488500739178495\n432488500739178496 432490699762434047\n432490699762434048 432495097808945151\n432495097808945152 432503893901967359\n432503893901967360 432521486088011775\n432521486088011776 432556670460100607\n432556670460100608 432627039204278271\n432627039204278272 432908514180988927\n432908514180988928 433471464134410239\n433471464134410240 434597364041252863\n434597364041252864 436849163854938111\n436849163854938112 441352763482308607\n441352763482308608 450359962737049599\n450359962737049600 468374361246531583\n468374361246531584 504403158265495551\n504403158265495552 522417556774977535\n522417556774977536 526921156402348031\n526921156402348032 529172956216033279\n529172956216033280 530298856122875903\n530298856122875904 530861806076297215\n530861806076297216 531143281053007871\n531143281053007872 531284018541363199\n531284018541363200 531354387285540863\n531354387285540864 531389571657629695\n531389571657629696 531407163843674111\n531407163843674112 531415959936696319\n531415959936696320 531420357983207423\n531420357983207424 531422557006462975\n531422557006462976 531423106762276863\n531423106762276864 531423381640183807\n531423381640183808 531423450359660543\n531423450359660544 531423467539529727\n531423467539529728 531423469687013375\n531423469687013376 531423470760755199\n531423470760755200 531423471297626111\n531423471297626112 531423471431843839\n531423471431843840 531423471498952703\n531423471498952704 531423471532507135\n531423471532507136 531423471549284351\n531423471549284352 531423471557672959\n531423471557672960 531423471561867263\n531423471561867264 531423471563964415\n531423471563964416 531423471564226559\n531423471564226560 531423471564357631\n531423471564357632 531423471564390399\n531423471564390400 531423471564398591\n531423471564398592 531423471564400639\n531423471564400640 531423471564401663\n531423471564401664 531423471564402175\n531423471564402176 531423471564402431\n531423471564402432 531423471564402559\n531423471564402560 531423471564402623\n531423471564402624 531423471564402655\n531423471564402656 531423471564402663\n531423471564402664 531423471564402667\n531423471564402668 531423471564402669\n531423471564402670 531423471564402670\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_06",
                            "returncode": 0,
                            "stdout": "63\n11801128058619141 11801128058619141\n11801128058619142 11801128058619143\n11801128058619144 11801128058619151\n11801128058619152 11801128058619167\n11801128058619168 11801128058619199\n11801128058619200 11801128058619263\n11801128058619264 11801128058619391\n11801128058619392 11801128058619903\n11801128058619904 11801128058621951\n11801128058621952 11801128058626047\n11801128058626048 11801128058634239\n11801128058634240 11801128058650623\n11801128058650624 11801128058683391\n11801128058683392 11801128058748927\n11801128058748928 11801128059011071\n11801128059011072 11801128059535359\n11801128059535360 11801128060583935\n11801128060583936 11801128094138367\n11801128094138368 11801129167880191\n11801129167880192 11801131315363839\n11801131315363840 11801135610331135\n11801135610331136 11801144200265727\n11801144200265728 11801161380134911\n11801161380134912 11801195739873279\n11801195739873280 11801333178826751\n11801333178826752 11801608056733695\n11801608056733696 11802157812547583\n11802157812547584 11804356835803135\n11804356835803136 11821949021847551\n11821949021847552 12384898975268863\n12384898975268864 13510798882111487\n13510798882111488 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 477381560501272575\n477381560501272576 481885160128643071\n481885160128643072 484136959942328319\n484136959942328320 484418434919038975\n484418434919038976 484488803663216639\n484488803663216640 484491002686472191\n484491002686472192 484492102198099967\n484492102198099968 484492651953913855\n484492651953913856 484492789392867327\n484492789392867328 484492858112344063\n484492858112344064 484492892472082431\n484492892472082432 484492909651951615\n484492909651951616 484492910725693439\n484492910725693440 484492910859911167\n484492910859911168 484492910927020031\n484492910927020032 484492910960574463\n484492910960574464 484492910964768767\n484492910964768768 484492910965817343\n484492910965817344 484492910965818367\n484492910965818368 484492910965818623\n484492910965818624 484492910965818687\n484492910965818688 484492910965818719\n484492910965818720 484492910965818727\n484492910965818728 484492910965818729\n484492910965818730 484492910965818730\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_07",
                            "returncode": 0,
                            "stdout": "85\n282183781417523 282183781417523\n282183781417524 282183781417527\n282183781417528 282183781417535\n282183781417536 282183781417599\n282183781417600 282183781417727\n282183781417728 282183781417983\n282183781417984 282183781419007\n282183781419008 282183781421055\n282183781421056 282183781425151\n282183781425152 282183781433343\n282183781433344 282183781449727\n282183781449728 282183781580799\n282183781580800 282183782629375\n282183782629376 282183784726527\n282183784726528 282183788920831\n282183788920832 282183797309439\n282183797309440 282183814086655\n282183814086656 282183847641087\n282183847641088 282183914749951\n282183914749952 282184183185407\n282184183185408 282184720056319\n282184720056320 282185793798143\n282185793798144 282187941281791\n282187941281792 282196531216383\n282196531216384 282230890954751\n282230890954752 282299610431487\n282299610431488 282574488338431\n282574488338432 283673999966207\n283673999966208 285873023221759\n285873023221760 290271069732863\n290271069732864 299067162755071\n299067162755072 316659348799487\n316659348799488 351843720888319\n351843720888320 422212465065983\n422212465065984 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 270215977642229759\n270215977642229760 279223176896970751\n279223176896970752 283726776524341247\n283726776524341248 285978576338026495\n285978576338026496 286541526291447807\n286541526291447808 286611895035625471\n286611895035625472 286647079407714303\n286647079407714304 286664671593758719\n286664671593758720 286673467686780927\n286673467686780928 286677865733292031\n286677865733292032 286680064756547583\n286680064756547584 286681164268175359\n286681164268175360 286681714023989247\n286681714023989248 286681988901896191\n286681988901896192 286682126340849663\n286682126340849664 286682195060326399\n286682195060326400 286682229420064767\n286682229420064768 286682246599933951\n286682246599933952 286682250894901247\n286682250894901248 286682251968643071\n286682251968643072 286682252505513983\n286682252505513984 286682252773949439\n286682252773949440 286682252908167167\n286682252908167168 286682252975276031\n286682252975276032 286682253008830463\n286682253008830464 286682253017219071\n286682253017219072 286682253019316223\n286682253019316224 286682253020364799\n286682253020364800 286682253020889087\n286682253020889088 286682253020954623\n286682253020954624 286682253020987391\n286682253020987392 286682253021003775\n286682253021003776 286682253021011967\n286682253021011968 286682253021016063\n286682253021016064 286682253021018111\n286682253021018112 286682253021019135\n286682253021019136 286682253021019647\n286682253021019648 286682253021019775\n286682253021019776 286682253021019779\n286682253021019780 286682253021019780\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_03",
                            "returncode": 0,
                            "stdout": "28\n144106357446602451 144106357446602451\n144106357446602452 144106357446602455\n144106357446602456 144106357446602463\n144106357446602464 144106357446602495\n144106357446602496 144106357446602751\n144106357446602752 144106357446606847\n144106357446606848 144106357446672383\n144106357446672384 144106357446934527\n144106357446934528 144106357455323135\n144106357455323136 144106357488877567\n144106357488877568 144106357623095295\n144106357623095296 144106391982833663\n144106391982833664 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 261208778387488767\n261208778387488768 261771728340910079\n261771728340910080 261789320526954495\n261789320526954496 261791519550210047\n261791519550210048 261791588269686783\n261791588269686784 261791622629425151\n261791622629425152 261791639809294335\n261791639809294336 261791641956777983\n261791641956777984 261791642225213439\n261791642225213440 261791642225344511\n261791642225344512 261791642225410047\n261791642225410048 261791642225414143\n261791642225414144 261791642225414175\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_21",
                            "returncode": 0,
                            "stdout": "1\n0 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_04",
                            "returncode": 0,
                            "stdout": "41\n360198504640541332 360198504640541335\n360198504640541336 360198504640541343\n360198504640541344 360198504640541375\n360198504640541376 360198504640541439\n360198504640541440 360198504640541695\n360198504640541696 360198504640542719\n360198504640542720 360198504640544767\n360198504640544768 360198504640675839\n360198504640675840 360198504640937983\n360198504640937984 360198504645132287\n360198504645132288 360198504678686719\n360198504678686720 360198504947122175\n360198504947122176 360198506020863999\n360198506020864000 360198514610798591\n360198514610798592 360198531790667775\n360198531790667776 360198566150406143\n360198566150406144 360198634869882879\n360198634869882880 360198909747789823\n360198909747789824 360200009259417599\n360200009259417600 360217601445462015\n360217601445462016 360287970189639679\n360287970189639680 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 504966108218916863\n504966108218916864 505247583195627519\n505247583195627520 505256379288649727\n505256379288649728 505257478800277503\n505257478800277504 505258028556091391\n505258028556091392 505258032851058687\n505258032851058688 505258033387929599\n505258033387929600 505258033455038463\n505258033455038464 505258033488592895\n505258033488592896 505258033496981503\n505258033496981504 505258033499078655\n505258033499078656 505258033500127231\n505258033500127232 505258033500651519\n505258033500651520 505258033500667903\n505258033500667904 505258033500676095\n505258033500676096 505258033500676607\n505258033500676608 505258033500676863\n505258033500676864 505258033500676865\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_05",
                            "returncode": 0,
                            "stdout": "55\n170125114320639076 170125114320639079\n170125114320639080 170125114320639087\n170125114320639088 170125114320639103\n170125114320639104 170125114320639231\n170125114320639232 170125114320639487\n170125114320639488 170125114320639999\n170125114320640000 170125114320642047\n170125114320642048 170125114320650239\n170125114320650240 170125114320683007\n170125114320683008 170125114320748543\n170125114320748544 170125114320879615\n170125114320879616 170125114321403903\n170125114321403904 170125114329792511\n170125114329792512 170125114346569727\n170125114346569728 170125114883440639\n170125114883440640 170125132063309823\n170125132063309824 170125166423048191\n170125166423048192 170125235142524927\n170125235142524928 170134031235547135\n170134031235547136 170151623421591551\n170151623421591552 170292360909946879\n170292360909946880 170573835886657535\n170573835886657536 171136785840078847\n171136785840078848 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 202661983231672319\n202661983231672320 203787883138514943\n203787883138514944 204350833091936255\n204350833091936256 204632308068646911\n204632308068646912 204634507091902463\n204634507091902464 204635606603530239\n204635606603530240 204635881481437183\n204635881481437184 204636018920390655\n204636018920390656 204636027510325247\n204636027510325248 204636029657808895\n204636029657808896 204636030731550719\n204636030731550720 204636031268421631\n204636031268421632 204636031536857087\n204636031536857088 204636031671074815\n204636031671074816 204636031704629247\n204636031704629248 204636031721406463\n204636031721406464 204636031729795071\n204636031729795072 204636031731892223\n204636031731892224 204636031732940799\n204636031732940800 204636031733465087\n204636031733465088 204636031733727231\n204636031733727232 204636031733858303\n204636031733858304 204636031733923839\n204636031733923840 204636031733956607\n204636031733956608 204636031733972991\n204636031733972992 204636031733975039\n204636031733975040 204636031733976063\n204636031733976064 204636031733976575\n204636031733976576 204636031733976831\n204636031733976832 204636031733976847\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_12",
                            "returncode": 0,
                            "stdout": "54\n271518219607274605 271518219607274605\n271518219607274606 271518219607274607\n271518219607274608 271518219607274623\n271518219607274624 271518219607274751\n271518219607274752 271518219607275007\n271518219607275008 271518219607275519\n271518219607275520 271518219607277567\n271518219607277568 271518219607343103\n271518219607343104 271518219607474175\n271518219607474176 271518219611668479\n271518219611668480 271518219645222911\n271518219645222912 271518219779440639\n271518219779440640 271518220316311551\n271518220316311552 271518228906246143\n271518228906246144 271518246086115327\n271518246086115328 271518280445853695\n271518280445853696 271518349165330431\n271518349165330432 271518898921144319\n271518898921144320 271519998432772095\n271519998432772096 271522197456027647\n271522197456027648 271526595502538751\n271526595502538752 271535391595560959\n271535391595560960 271552983781605375\n271552983781605376 271623352525783039\n271623352525783040 271904827502493695\n271904827502493696 272467777455915007\n272467777455915008 274719577269600255\n274719577269600256 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 486388759756013567\n486388759756013568 490892359383384063\n490892359383384064 493144159197069311\n493144159197069312 493425634173779967\n493425634173779968 493496002917957631\n493496002917957632 493513595104002047\n493513595104002048 493515794127257599\n493515794127257600 493515931566211071\n493515931566211072 493515932639952895\n493515932639952896 493515933176823807\n493515933176823808 493515933311041535\n493515933311041536 493515933378150399\n493515933378150400 493515933394927615\n493515933394927616 493515933403316223\n493515933403316224 493515933404364799\n493515933404364800 493515933404430335\n493515933404430336 493515933404463103\n493515933404463104 493515933404467199\n493515933404467200 493515933404467263\n493515933404467264 493515933404467279\n493515933404467280 493515933404467287\n493515933404467288 493515933404467291\n493515933404467292 493515933404467292\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_15",
                            "returncode": 0,
                            "stdout": "48\n123989531008007376 123989531008007391\n123989531008007392 123989531008007423\n123989531008007424 123989531008007679\n123989531008007680 123989531008008191\n123989531008008192 123989531008040959\n123989531008040960 123989531008172031\n123989531008172032 123989531008434175\n123989531008434176 123989531010531327\n123989531010531328 123989531014725631\n123989531014725632 123989531283161087\n123989531283161088 123989531820031999\n123989531820032000 123989533967515647\n123989533967515648 123989538262482943\n123989538262482944 123989555442352127\n123989555442352128 123989589802090495\n123989589802090496 123989727241043967\n123989727241043968 124130464729399295\n124130464729399296 124411939706109951\n124411939706109952 124974889659531263\n124974889659531264 126100789566373887\n126100789566373888 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 794885334230892543\n794885334230892544 795448284184313855\n795448284184313856 795518652928491519\n795518652928491520 795527449021513727\n795527449021513728 795527723899420671\n795527723899420672 795527861338374143\n795527861338374144 795527930057850879\n795527930057850880 795527938647785471\n795527938647785472 795527940795269119\n795527940795269120 795527941063704575\n795527941063704576 795527941130813439\n795527941130813440 795527941164367871\n795527941164367872 795527941166465023\n795527941166465024 795527941167513599\n795527941167513600 795527941168037887\n795527941168037888 795527941168070655\n795527941168070656 795527941168087039\n795527941168087040 795527941168095231\n795527941168095232 795527941168099327\n795527941168099328 795527941168099839\n795527941168099840 795527941168099967\n795527941168099968 795527941168099983\n795527941168099984 795527941168099987\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_01",
                            "returncode": 0,
                            "stdout": "4\n288054454257713152 288054454291267583\n288054454291267584 288089638663356415\n288089638663356416 288230376151711743\n288230376151711744 288230376160100351\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_16",
                            "returncode": 0,
                            "stdout": "57\n395279993370173227 395279993370173227\n395279993370173228 395279993370173231\n395279993370173232 395279993370173247\n395279993370173248 395279993370173311\n395279993370173312 395279993370173439\n395279993370173440 395279993370181631\n395279993370181632 395279993370312703\n395279993370312704 395279993370836991\n395279993370836992 395279993371885567\n395279993371885568 395279993376079871\n395279993376079872 395279993510297599\n395279993510297600 395279993778733055\n395279993778733056 395279994315603967\n395279994315603968 395279996463087615\n395279996463087616 395280065182564351\n395280065182564352 395280202621517823\n395280202621517824 395280477499424767\n395280477499424768 395281027255238655\n395281027255238656 395283226278494207\n395283226278494208 395287624325005311\n395287624325005312 395296420418027519\n395296420418027520 395331604790116351\n395331604790116352 395472342278471679\n395472342278471680 395753817255182335\n395753817255182336 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 729583139634020351\n729583139634020352 734086739261390847\n734086739261390848 736338539075076095\n736338539075076096 737464438981918719\n737464438981918720 737745913958629375\n737745913958629376 737816282702807039\n737816282702807040 737851467074895871\n737851467074895872 737869059260940287\n737869059260940288 737873457307451391\n737873457307451392 737875656330706943\n737875656330706944 737876755842334719\n737876755842334720 737876773022203903\n737876773022203904 737876777317171199\n737876777317171200 737876777854042111\n737876777854042112 737876777988259839\n737876777988259840 737876778055368703\n737876778055368704 737876778088923135\n737876778088923136 737876778091020287\n737876778091020288 737876778092068863\n737876778092068864 737876778092331007\n737876778092331008 737876778092363775\n737876778092363776 737876778092380159\n737876778092380160 737876778092388351\n737876778092388352 737876778092390399\n737876778092390400 737876778092391423\n737876778092391424 737876778092391935\n737876778092391936 737876778092392191\n737876778092392192 737876778092392195\n737876778092392196 737876778092392197\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_03",
                            "returncode": 0,
                            "stdout": "8\n3940649673945088 3940649673949183\n3940649673949184 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 11258999068426239\n11258999068426240 11540474045136895\n11540474045136896 11549270138159103\n11549270138159104 11549545016066047\n11549545016066048 11549545024454655\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_18",
                            "returncode": 0,
                            "stdout": "61\n61398917963652103 61398917963652103\n61398917963652104 61398917963652111\n61398917963652112 61398917963652127\n61398917963652128 61398917963652159\n61398917963652160 61398917963652223\n61398917963652224 61398917963652351\n61398917963652352 61398917963652607\n61398917963652608 61398917963653119\n61398917963653120 61398917963661311\n61398917963661312 61398917963677695\n61398917963677696 61398917963710463\n61398917963710464 61398917963841535\n61398917963841536 61398917964103679\n61398917964103680 61398917964627967\n61398917964627968 61398917966725119\n61398917966725120 61398917983502335\n61398917983502336 61398918117720063\n61398918117720064 61398918654590975\n61398918654590976 61398919728332799\n61398919728332800 61398928318267391\n61398928318267392 61401127341522943\n61401127341522944 61405525388034047\n61405525388034048 61414321481056255\n61414321481056256 61431913667100671\n61431913667100672 61502282411278335\n61502282411278336 61643019899633663\n61643019899633664 61924494876344319\n61924494876344320 63050394783186943\n63050394783186944 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 198721333557723135\n198721333557723136 199002808534433791\n199002808534433792 199143546022789119\n199143546022789120 199213914766966783\n199213914766966784 199249099139055615\n199249099139055616 199253497185566719\n199253497185566720 199255696208822271\n199255696208822272 199256795720450047\n199256795720450048 199257345476263935\n199257345476263936 199257414195740671\n199257414195740672 199257448555479039\n199257448555479040 199257465735348223\n199257465735348224 199257470030315519\n199257470030315520 199257470298750975\n199257470298750976 199257470432968703\n199257470432968704 199257470466523135\n199257470466523136 199257470468620287\n199257470468620288 199257470469668863\n199257470469668864 199257470470193151\n199257470470193152 199257470470455295\n199257470470455296 199257470470586367\n199257470470586368 199257470470594559\n199257470470594560 199257470470596607\n199257470470596608 199257470470596863\n199257470470596864 199257470470596991\n199257470470596992 199257470470597055\n199257470470597056 199257470470597071\n199257470470597072 199257470470597075\n199257470470597076 199257470470597077\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_02",
                            "returncode": 0,
                            "stdout": "1\n0 1023\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_14",
                            "returncode": 0,
                            "stdout": "51\n860329287908420023 860329287908420023\n860329287908420024 860329287908420031\n860329287908420032 860329287908420095\n860329287908420096 860329287908420607\n860329287908420608 860329287908421631\n860329287908421632 860329287908425727\n860329287908425728 860329287908458495\n860329287908458496 860329287908589567\n860329287908589568 860329287909113855\n860329287909113856 860329287910162431\n860329287910162432 860329287914356735\n860329287914356736 860329287981465599\n860329287981465600 860329288518336511\n860329288518336512 860329297108271103\n860329297108271104 860329365827747839\n860329365827747840 860330465339375615\n860330465339375616 860332664362631167\n860332664362631168 860337062409142271\n860337062409142272 860345858502164479\n860345858502164480 860363450688208895\n860363450688208896 860398635060297727\n860398635060297728 860469003804475391\n860469003804475392 860750478781186047\n860750478781186048 861313428734607359\n861313428734607360 862439328641449983\n862439328641449984 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1044835113549955071\n1044835113549955072 1062849512059437055\n1062849512059437056 1067353111686807551\n1067353111686807552 1067916061640228863\n1067916061640228864 1068056799128584191\n1068056799128584192 1068127167872761855\n1068127167872761856 1068162352244850687\n1068162352244850688 1068166750291361791\n1068166750291361792 1068167025169268735\n1068167025169268736 1068167042349137919\n1068167042349137920 1068167042382692351\n1068167042382692352 1068167042391080959\n1068167042391080960 1068167042392129535\n1068167042392129536 1068167042392653823\n1068167042392653824 1068167042392784895\n1068167042392784896 1068167042392850431\n1068167042392850432 1068167042392883199\n1068167042392883200 1068167042392899583\n1068167042392899584 1068167042392901631\n1068167042392901632 1068167042392902655\n1068167042392902656 1068167042392903167\n1068167042392903168 1068167042392903231\n1068167042392903232 1068167042392903247\n1068167042392903248 1068167042392903249\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_19",
                            "returncode": 0,
                            "stdout": "67\n278964037634255119 278964037634255119\n278964037634255120 278964037634255135\n278964037634255136 278964037634255167\n278964037634255168 278964037634255231\n278964037634255232 278964037634255359\n278964037634255360 278964037634255871\n278964037634255872 278964037634256895\n278964037634256896 278964037634260991\n278964037634260992 278964037634293759\n278964037634293760 278964037634359295\n278964037634359296 278964037634490367\n278964037634490368 278964037635538943\n278964037635538944 278964037637636095\n278964037637636096 278964037646024703\n278964037646024704 278964037662801919\n278964037662801920 278964037696356351\n278964037696356352 278964037763465215\n278964037763465216 278964037897682943\n278964037897682944 278964040045166591\n278964040045166592 278964044340133887\n278964044340133888 278964052930068479\n278964052930068480 278964070109937663\n278964070109937664 278964104469676031\n278964104469676032 278964241908629503\n278964241908629504 278964791664443391\n278964791664443392 278965891176071167\n278965891176071168 278968090199326719\n278968090199326720 278976886292348927\n278976886292348928 279012070664437759\n279012070664437760 279082439408615423\n279082439408615424 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 828662331436171263\n828662331436171264 833165931063541759\n833165931063541760 835417730877227007\n835417730877227008 836543630784069631\n836543630784069632 836825105760780287\n836825105760780288 836860290132869119\n836860290132869120 836877882318913535\n836877882318913536 836882280365424639\n836882280365424640 836884479388680191\n836884479388680192 836884616827633663\n836884616827633664 836884651187372031\n836884651187372032 836884668367241215\n836884668367241216 836884670514724863\n836884670514724864 836884671588466687\n836884671588466688 836884672125337599\n836884672125337600 836884672158892031\n836884672158892032 836884672175669247\n836884672175669248 836884672179863551\n836884672179863552 836884672180912127\n836884672180912128 836884672181436415\n836884672181436416 836884672181567487\n836884672181567488 836884672181583871\n836884672181583872 836884672181592063\n836884672181592064 836884672181596159\n836884672181596160 836884672181598207\n836884672181598208 836884672181598463\n836884672181598464 836884672181598591\n836884672181598592 836884672181598623\n836884672181598624 836884672181598639\n836884672181598640 836884672181598647\n836884672181598648 836884672181598649\n836884672181598650 836884672181598650\n",
                            "stderr": ""
                        }
                    ]
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": 0,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_test_11",
                            "returncode": 0,
                            "stdout": "55\n893124445952679748 893124445952679751\n893124445952679752 893124445952679759\n893124445952679760 893124445952679775\n893124445952679776 893124445952679807\n893124445952679808 893124445952679935\n893124445952679936 893124445952688127\n893124445952688128 893124445952704511\n893124445952704512 893124445952737279\n893124445952737280 893124445952802815\n893124445952802816 893124445953064959\n893124445953064960 893124445957259263\n893124445957259264 893124445965647871\n893124445965647872 893124445999202303\n893124445999202304 893124446536073215\n893124446536073216 893124447609815039\n893124447609815040 893124464789684223\n893124464789684224 893124499149422591\n893124499149422592 893128897195933695\n893128897195933696 893137693288955903\n893137693288955904 893155285475000319\n893155285475000320 893190469847089151\n893190469847089152 893260838591266815\n893260838591266816 893401576079622143\n893401576079622144 893964526033043455\n893964526033043456 896216325846728703\n896216325846728704 900719925474099199\n900719925474099200 936748722493063167\n936748722493063168 1008806316530991103\n1008806316530991104 1026820715040473087\n1026820715040473088 1035827914295214079\n1035827914295214080 1038079714108899327\n1038079714108899328 1039205614015741951\n1039205614015741952 1039768563969163263\n1039768563969163264 1039803748341252095\n1039803748341252096 1039821340527296511\n1039821340527296512 1039830136620318719\n1039830136620318720 1039834534666829823\n1039834534666829824 1039836733690085375\n1039836733690085376 1039837833201713151\n1039837833201713152 1039838382957527039\n1039838382957527040 1039838417317265407\n1039838417317265408 1039838425907199999\n1039838425907200000 1039838426980941823\n1039838426980941824 1039838427517812735\n1039838427517812736 1039838427534589951\n1039838427534589952 1039838427542978559\n1039838427542978560 1039838427545075711\n1039838427545075712 1039838427545092095\n1039838427545092096 1039838427545096191\n1039838427545096192 1039838427545097215\n1039838427545097216 1039838427545097727\n1039838427545097728 1039838427545097983\n1039838427545097984 1039838427545098111\n1039838427545098112 1039838427545098127\n1039838427545098128 1039838427545098128\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_27",
                            "returncode": 0,
                            "stdout": "1\n0 0\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_09",
                            "returncode": 0,
                            "stdout": "98\n505529333062828545 505529333062828545\n505529333062828546 505529333062828547\n505529333062828548 505529333062828551\n505529333062828552 505529333062828559\n505529333062828560 505529333062828575\n505529333062828576 505529333062828607\n505529333062828608 505529333062828671\n505529333062828672 505529333062828799\n505529333062828800 505529333062829055\n505529333062829056 505529333062830079\n505529333062830080 505529333062832127\n505529333062832128 505529333062836223\n505529333062836224 505529333062844415\n505529333062844416 505529333062860799\n505529333062860800 505529333062893567\n505529333062893568 505529333062959103\n505529333062959104 505529333063090175\n505529333063090176 505529333063352319\n505529333063352320 505529333063876607\n505529333063876608 505529333064925183\n505529333064925184 505529333067022335\n505529333067022336 505529333083799551\n505529333083799552 505529333117353983\n505529333117353984 505529333184462847\n505529333184462848 505529333318680575\n505529333318680576 505529333587116031\n505529333587116032 505529334123986943\n505529334123986944 505529335197728767\n505529335197728768 505529337345212415\n505529337345212416 505529341640179711\n505529341640179712 505529350230114303\n505529350230114304 505529367409983487\n505529367409983488 505529401769721855\n505529401769721856 505529470489198591\n505529470489198592 505529607928152063\n505529607928152064 505530157683965951\n505530157683965952 505531257195593727\n505531257195593728 505533456218849279\n505533456218849280 505537854265360383\n505537854265360384 505546650358382591\n505546650358382592 505564242544427007\n505564242544427008 505599426916515839\n505599426916515840 505669795660693503\n505669795660693504 505810533149048831\n505810533149048832 506092008125759487\n506092008125759488 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575616327373291519\n575616327373291520 575757064861646847\n575757064861646848 575827433605824511\n575827433605824512 575862617977913343\n575862617977913344 575880210163957759\n575880210163957760 575889006256979967\n575889006256979968 575893404303491071\n575893404303491072 575895603326746623\n575895603326746624 575896702838374399\n575896702838374400 575897252594188287\n575897252594188288 575897527472095231\n575897527472095232 575897664911048703\n575897664911048704 575897733630525439\n575897733630525440 575897767990263807\n575897767990263808 575897785170132991\n575897785170132992 575897793760067583\n575897793760067584 575897795907551231\n575897795907551232 575897796981293055\n575897796981293056 575897797518163967\n575897797518163968 575897797786599423\n575897797786599424 575897797920817151\n575897797920817152 575897797987926015\n575897797987926016 575897798021480447\n575897798021480448 575897798038257663\n575897798038257664 575897798046646271\n575897798046646272 575897798050840575\n575897798050840576 575897798052937727\n575897798052937728 575897798053986303\n575897798053986304 575897798054510591\n575897798054510592 575897798054772735\n575897798054772736 575897798054903807\n575897798054903808 575897798054936575\n575897798054936576 575897798054952959\n575897798054952960 575897798054953983\n575897798054953984 575897798054954495\n575897798054954496 575897798054954751\n575897798054954752 575897798054954879\n575897798054954880 575897798054954943\n575897798054954944 575897798054954975\n575897798054954976 575897798054954991\n575897798054954992 575897798054954995\n575897798054954996 575897798054954997\n575897798054954998 575897798054954998\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_20",
                            "returncode": 0,
                            "stdout": "61\n181262195287766621 181262195287766621\n181262195287766622 181262195287766623\n181262195287766624 181262195287766655\n181262195287766656 181262195287766783\n181262195287766784 181262195287767039\n181262195287767040 181262195287769087\n181262195287769088 181262195287785471\n181262195287785472 181262195287916543\n181262195287916544 181262195288440831\n181262195288440832 181262195290537983\n181262195290537984 181262195298926591\n181262195298926592 181262195332481023\n181262195332481024 181262195399589887\n181262195399589888 181262195936460799\n181262195936460800 181262197010202623\n181262197010202624 181262205600137215\n181262205600137216 181262222780006399\n181262222780006400 181262257139744767\n181262257139744768 181262325859221503\n181262325859221504 181262463298174975\n181262463298174976 181262738176081919\n181262738176081920 181263287931895807\n181263287931895808 181265486955151359\n181265486955151360 181269885001662463\n181269885001662464 182395784908505087\n182395784908505088 184647584722190335\n184647584722190336 189151184349560831\n189151184349560832 198158383604301823\n198158383604301824 216172782113783807\n216172782113783808 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 756604737398243327\n756604737398243328 774619135907725311\n774619135907725312 776870935721410559\n776870935721410560 777996835628253183\n777996835628253184 778559785581674495\n778559785581674496 778841260558385151\n778841260558385152 778981998046740479\n778981998046740480 778990794139762687\n778990794139762688 778991893651390463\n778991893651390464 778992443407204351\n778992443407204352 778992718285111295\n778992718285111296 778992726875045887\n778992726875045888 778992729022529535\n778992729022529536 778992730096271359\n778992730096271360 778992730364706815\n778992730364706816 778992730381484031\n778992730381484032 778992730385678335\n778992730385678336 778992730387775487\n778992730387775488 778992730388037631\n778992730388037632 778992730388168703\n778992730388168704 778992730388234239\n778992730388234240 778992730388267007\n778992730388267008 778992730388283391\n778992730388283392 778992730388287487\n778992730388287488 778992730388288511\n778992730388288512 778992730388288767\n778992730388288768 778992730388288799\n778992730388288800 778992730388288815\n778992730388288816 778992730388288823\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_25",
                            "returncode": 0,
                            "stdout": "2\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_17",
                            "returncode": 0,
                            "stdout": "59\n366943872216607560 366943872216607567\n366943872216607568 366943872216607583\n366943872216607584 366943872216607615\n366943872216607616 366943872216607743\n366943872216607744 366943872216608767\n366943872216608768 366943872216612863\n366943872216612864 366943872216629247\n366943872216629248 366943872216662015\n366943872216662016 366943872216727551\n366943872216727552 366943872216989695\n366943872216989696 366943872284098559\n366943872284098560 366943872418316287\n366943872418316288 366943881008250879\n366943881008250880 366943898188120063\n366943898188120064 366943932547858431\n366943932547858432 366944001267335167\n366944001267335168 366944138706288639\n366944138706288640 366944413584195583\n366944413584195584 366946612607451135\n366946612607451136 366955408700473343\n366955408700473344 366973000886517759\n366973000886517760 367043369630695423\n367043369630695424 369295169444380671\n369295169444380672 378302368699121663\n378302368699121664 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1081004648057274367\n1081004648057274368 1081039832429363199\n1081039832429363200 1081057424615407615\n1081057424615407616 1081066220708429823\n1081066220708429824 1081068419731685375\n1081068419731685376 1081069519243313151\n1081069519243313152 1081070068999127039\n1081070068999127040 1081070343877033983\n1081070343877033984 1081070412596510719\n1081070412596510720 1081070446956249087\n1081070446956249088 1081070455546183679\n1081070455546183680 1081070457693667327\n1081070457693667328 1081070458767409151\n1081070458767409152 1081070459304280063\n1081070459304280064 1081070459371388927\n1081070459371388928 1081070459388166143\n1081070459388166144 1081070459390263295\n1081070459390263296 1081070459391311871\n1081070459391311872 1081070459391574015\n1081070459391574016 1081070459391705087\n1081070459391705088 1081070459391707135\n1081070459391707136 1081070459391708159\n1081070459391708160 1081070459391708415\n1081070459391708416 1081070459391708543\n1081070459391708544 1081070459391708607\n1081070459391708608 1081070459391708639\n1081070459391708640 1081070459391708655\n1081070459391708656 1081070459391708659\n1081070459391708660 1081070459391708660\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_13",
                            "returncode": 0,
                            "stdout": "52\n813135255471707232 813135255471707263\n813135255471707264 813135255471707391\n813135255471707392 813135255471707647\n813135255471707648 813135255471708159\n813135255471708160 813135255471710207\n813135255471710208 813135255471718399\n813135255471718400 813135255471783935\n813135255471783936 813135255471915007\n813135255471915008 813135255476109311\n813135255476109312 813135255492886527\n813135255492886528 813135255526440959\n813135255526440960 813135255593549823\n813135255593549824 813135255861985279\n813135255861985280 813135260156952575\n813135260156952576 813135268746887167\n813135268746887168 813135303106625535\n813135303106625536 813135577984532479\n813135577984532480 813136127740346367\n813136127740346368 813137227251974143\n813137227251974144 813146023344996351\n813146023344996352 813181207717085183\n813181207717085184 813462682693795839\n813462682693795840 814025632647217151\n814025632647217152 815151532554059775\n815151532554059776 819655132181430271\n819655132181430272 828662331436171263\n828662331436171264 846676729945653247\n846676729945653248 847802629852495871\n847802629852495872 848084104829206527\n848084104829206528 848154473573384191\n848154473573384192 848172065759428607\n848172065759428608 848174264782684159\n848174264782684160 848174539660591103\n848174539660591104 848174677099544575\n848174677099544576 848174745819021311\n848174745819021312 848174780178759679\n848174780178759680 848174788768694271\n848174788768694272 848174793063661567\n848174793063661568 848174794137403391\n848174794137403392 848174794405838847\n848174794405838848 848174794472947711\n848174794472947712 848174794506502143\n848174794506502144 848174794508599295\n848174794508599296 848174794509647871\n848174794509647872 848174794509713407\n848174794509713408 848174794509729791\n848174794509729792 848174794509733887\n848174794509733888 848174794509734911\n848174794509734912 848174794509735423\n848174794509735424 848174794509735679\n848174794509735680 848174794509735807\n848174794509735808 848174794509735811\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_10",
                            "returncode": 0,
                            "stdout": "110\n504403158265495553 504403158265495553\n504403158265495554 504403158265495555\n504403158265495556 504403158265495559\n504403158265495560 504403158265495567\n504403158265495568 504403158265495583\n504403158265495584 504403158265495615\n504403158265495616 504403158265495679\n504403158265495680 504403158265495807\n504403158265495808 504403158265496063\n504403158265496064 504403158265496575\n504403158265496576 504403158265497599\n504403158265497600 504403158265499647\n504403158265499648 504403158265503743\n504403158265503744 504403158265511935\n504403158265511936 504403158265528319\n504403158265528320 504403158265561087\n504403158265561088 504403158265626623\n504403158265626624 504403158265757695\n504403158265757696 504403158266019839\n504403158266019840 504403158266544127\n504403158266544128 504403158267592703\n504403158267592704 504403158269689855\n504403158269689856 504403158273884159\n504403158273884160 504403158282272767\n504403158282272768 504403158299049983\n504403158299049984 504403158332604415\n504403158332604416 504403158399713279\n504403158399713280 504403158533931007\n504403158533931008 504403158802366463\n504403158802366464 504403159339237375\n504403159339237376 504403160412979199\n504403160412979200 504403162560462847\n504403162560462848 504403166855430143\n504403166855430144 504403175445364735\n504403175445364736 504403192625233919\n504403192625233920 504403226984972287\n504403226984972288 504403295704449023\n504403295704449024 504403433143402495\n504403433143402496 504403708021309439\n504403708021309440 504404257777123327\n504404257777123328 504405357288751103\n504405357288751104 504407556312006655\n504407556312006656 504411954358517759\n504411954358517760 504420750451539967\n504420750451539968 504438342637584383\n504438342637584384 504473527009673215\n504473527009673216 504543895753850879\n504543895753850880 504684633242206207\n504684633242206208 504966108218916863\n504966108218916864 505529058172338175\n505529058172338176 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575897802350002175\n575897802350002176 576179277326712831\n576179277326712832 576320014815068159\n576320014815068160 576390383559245823\n576390383559245824 576425567931334655\n576425567931334656 576443160117379071\n576443160117379072 576451956210401279\n576451956210401280 576456354256912383\n576456354256912384 576458553280167935\n576458553280167936 576459652791795711\n576459652791795712 576460202547609599\n576460202547609600 576460477425516543\n576460477425516544 576460614864470015\n576460614864470016 576460683583946751\n576460683583946752 576460717943685119\n576460717943685120 576460735123554303\n576460735123554304 576460743713488895\n576460743713488896 576460748008456191\n576460748008456192 576460750155939839\n576460750155939840 576460751229681663\n576460751229681664 576460751766552575\n576460751766552576 576460752034988031\n576460752034988032 576460752169205759\n576460752169205760 576460752236314623\n576460752236314624 576460752269869055\n576460752269869056 576460752286646271\n576460752286646272 576460752295034879\n576460752295034880 576460752299229183\n576460752299229184 576460752301326335\n576460752301326336 576460752302374911\n576460752302374912 576460752302899199\n576460752302899200 576460752303161343\n576460752303161344 576460752303292415\n576460752303292416 576460752303357951\n576460752303357952 576460752303390719\n576460752303390720 576460752303407103\n576460752303407104 576460752303415295\n576460752303415296 576460752303419391\n576460752303419392 576460752303421439\n576460752303421440 576460752303422463\n576460752303422464 576460752303422975\n576460752303422976 576460752303423231\n576460752303423232 576460752303423359\n576460752303423360 576460752303423423\n576460752303423424 576460752303423455\n576460752303423456 576460752303423471\n576460752303423472 576460752303423479\n576460752303423480 576460752303423483\n576460752303423484 576460752303423485\n576460752303423486 576460752303423486\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_02",
                            "returncode": 0,
                            "stdout": "25\n432344644764301224 432344644764301231\n432344644764301232 432344644764301247\n432344644764301248 432344644764301311\n432344644764301312 432344644764303359\n432344644764303360 432344644764827647\n432344644764827648 432344644769021951\n432344644769021952 432344644836130815\n432344644836130816 432344645104566271\n432344645104566272 432344653694500863\n432344653694500864 432344670874370047\n432344670874370048 432344739593846783\n432344739593846784 432345014471753727\n432345014471753728 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 558448552817197055\n558448552817197056 558448827695103999\n558448827695104000 558448896414580735\n558448896414580736 558448896683016191\n558448896683016192 558448896716570623\n558448896716570624 558448896716832767\n558448896716832768 558448896716849151\n558448896716849152 558448896716853247\n558448896716853248 558448896716855295\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": 0,
                            "stdout": "5\n3 3\n4 7\n8 15\n16 17\n18 18\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_23",
                            "returncode": 0,
                            "stdout": "60\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_29",
                            "returncode": 0,
                            "stdout": "2\n1 1\n2 2\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_24",
                            "returncode": 0,
                            "stdout": "118\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_28",
                            "returncode": 0,
                            "stdout": "1\n1 1\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_26",
                            "returncode": 0,
                            "stdout": "1\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_22",
                            "returncode": 0,
                            "stdout": "60\n0 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_08",
                            "returncode": 0,
                            "stdout": "87\n432486315808860234 432486315808860235\n432486315808860236 432486315808860239\n432486315808860240 432486315808860255\n432486315808860256 432486315808860287\n432486315808860288 432486315808860415\n432486315808860416 432486315808860671\n432486315808860672 432486315808861183\n432486315808861184 432486315808862207\n432486315808862208 432486315808866303\n432486315808866304 432486315808882687\n432486315808882688 432486315808915455\n432486315808915456 432486315809046527\n432486315809046528 432486315809308671\n432486315809308672 432486315809832959\n432486315809832960 432486315810881535\n432486315810881536 432486315812978687\n432486315812978688 432486315817172991\n432486315817172992 432486315825561599\n432486315825561600 432486315842338815\n432486315842338816 432486315875893247\n432486315875893248 432486315943002111\n432486315943002112 432486316211437567\n432486316211437568 432486316748308479\n432486316748308480 432486318895792127\n432486318895792128 432486336075661311\n432486336075661312 432486370435399679\n432486370435399680 432486439154876415\n432486439154876416 432486576593829887\n432486576593829888 432486851471736831\n432486851471736832 432487401227550719\n432487401227550720 432488500739178495\n432488500739178496 432490699762434047\n432490699762434048 432495097808945151\n432495097808945152 432503893901967359\n432503893901967360 432521486088011775\n432521486088011776 432556670460100607\n432556670460100608 432627039204278271\n432627039204278272 432908514180988927\n432908514180988928 433471464134410239\n433471464134410240 434597364041252863\n434597364041252864 436849163854938111\n436849163854938112 441352763482308607\n441352763482308608 450359962737049599\n450359962737049600 468374361246531583\n468374361246531584 504403158265495551\n504403158265495552 522417556774977535\n522417556774977536 526921156402348031\n526921156402348032 529172956216033279\n529172956216033280 530298856122875903\n530298856122875904 530861806076297215\n530861806076297216 531143281053007871\n531143281053007872 531284018541363199\n531284018541363200 531354387285540863\n531354387285540864 531389571657629695\n531389571657629696 531407163843674111\n531407163843674112 531415959936696319\n531415959936696320 531420357983207423\n531420357983207424 531422557006462975\n531422557006462976 531423106762276863\n531423106762276864 531423381640183807\n531423381640183808 531423450359660543\n531423450359660544 531423467539529727\n531423467539529728 531423469687013375\n531423469687013376 531423470760755199\n531423470760755200 531423471297626111\n531423471297626112 531423471431843839\n531423471431843840 531423471498952703\n531423471498952704 531423471532507135\n531423471532507136 531423471549284351\n531423471549284352 531423471557672959\n531423471557672960 531423471561867263\n531423471561867264 531423471563964415\n531423471563964416 531423471564226559\n531423471564226560 531423471564357631\n531423471564357632 531423471564390399\n531423471564390400 531423471564398591\n531423471564398592 531423471564400639\n531423471564400640 531423471564401663\n531423471564401664 531423471564402175\n531423471564402176 531423471564402431\n531423471564402432 531423471564402559\n531423471564402560 531423471564402623\n531423471564402624 531423471564402655\n531423471564402656 531423471564402663\n531423471564402664 531423471564402667\n531423471564402668 531423471564402669\n531423471564402670 531423471564402670\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_06",
                            "returncode": 0,
                            "stdout": "63\n11801128058619141 11801128058619141\n11801128058619142 11801128058619143\n11801128058619144 11801128058619151\n11801128058619152 11801128058619167\n11801128058619168 11801128058619199\n11801128058619200 11801128058619263\n11801128058619264 11801128058619391\n11801128058619392 11801128058619903\n11801128058619904 11801128058621951\n11801128058621952 11801128058626047\n11801128058626048 11801128058634239\n11801128058634240 11801128058650623\n11801128058650624 11801128058683391\n11801128058683392 11801128058748927\n11801128058748928 11801128059011071\n11801128059011072 11801128059535359\n11801128059535360 11801128060583935\n11801128060583936 11801128094138367\n11801128094138368 11801129167880191\n11801129167880192 11801131315363839\n11801131315363840 11801135610331135\n11801135610331136 11801144200265727\n11801144200265728 11801161380134911\n11801161380134912 11801195739873279\n11801195739873280 11801333178826751\n11801333178826752 11801608056733695\n11801608056733696 11802157812547583\n11802157812547584 11804356835803135\n11804356835803136 11821949021847551\n11821949021847552 12384898975268863\n12384898975268864 13510798882111487\n13510798882111488 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 477381560501272575\n477381560501272576 481885160128643071\n481885160128643072 484136959942328319\n484136959942328320 484418434919038975\n484418434919038976 484488803663216639\n484488803663216640 484491002686472191\n484491002686472192 484492102198099967\n484492102198099968 484492651953913855\n484492651953913856 484492789392867327\n484492789392867328 484492858112344063\n484492858112344064 484492892472082431\n484492892472082432 484492909651951615\n484492909651951616 484492910725693439\n484492910725693440 484492910859911167\n484492910859911168 484492910927020031\n484492910927020032 484492910960574463\n484492910960574464 484492910964768767\n484492910964768768 484492910965817343\n484492910965817344 484492910965818367\n484492910965818368 484492910965818623\n484492910965818624 484492910965818687\n484492910965818688 484492910965818719\n484492910965818720 484492910965818727\n484492910965818728 484492910965818729\n484492910965818730 484492910965818730\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_07",
                            "returncode": 0,
                            "stdout": "85\n282183781417523 282183781417523\n282183781417524 282183781417527\n282183781417528 282183781417535\n282183781417536 282183781417599\n282183781417600 282183781417727\n282183781417728 282183781417983\n282183781417984 282183781419007\n282183781419008 282183781421055\n282183781421056 282183781425151\n282183781425152 282183781433343\n282183781433344 282183781449727\n282183781449728 282183781580799\n282183781580800 282183782629375\n282183782629376 282183784726527\n282183784726528 282183788920831\n282183788920832 282183797309439\n282183797309440 282183814086655\n282183814086656 282183847641087\n282183847641088 282183914749951\n282183914749952 282184183185407\n282184183185408 282184720056319\n282184720056320 282185793798143\n282185793798144 282187941281791\n282187941281792 282196531216383\n282196531216384 282230890954751\n282230890954752 282299610431487\n282299610431488 282574488338431\n282574488338432 283673999966207\n283673999966208 285873023221759\n285873023221760 290271069732863\n290271069732864 299067162755071\n299067162755072 316659348799487\n316659348799488 351843720888319\n351843720888320 422212465065983\n422212465065984 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 270215977642229759\n270215977642229760 279223176896970751\n279223176896970752 283726776524341247\n283726776524341248 285978576338026495\n285978576338026496 286541526291447807\n286541526291447808 286611895035625471\n286611895035625472 286647079407714303\n286647079407714304 286664671593758719\n286664671593758720 286673467686780927\n286673467686780928 286677865733292031\n286677865733292032 286680064756547583\n286680064756547584 286681164268175359\n286681164268175360 286681714023989247\n286681714023989248 286681988901896191\n286681988901896192 286682126340849663\n286682126340849664 286682195060326399\n286682195060326400 286682229420064767\n286682229420064768 286682246599933951\n286682246599933952 286682250894901247\n286682250894901248 286682251968643071\n286682251968643072 286682252505513983\n286682252505513984 286682252773949439\n286682252773949440 286682252908167167\n286682252908167168 286682252975276031\n286682252975276032 286682253008830463\n286682253008830464 286682253017219071\n286682253017219072 286682253019316223\n286682253019316224 286682253020364799\n286682253020364800 286682253020889087\n286682253020889088 286682253020954623\n286682253020954624 286682253020987391\n286682253020987392 286682253021003775\n286682253021003776 286682253021011967\n286682253021011968 286682253021016063\n286682253021016064 286682253021018111\n286682253021018112 286682253021019135\n286682253021019136 286682253021019647\n286682253021019648 286682253021019775\n286682253021019776 286682253021019779\n286682253021019780 286682253021019780\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_03",
                            "returncode": 0,
                            "stdout": "28\n144106357446602451 144106357446602451\n144106357446602452 144106357446602455\n144106357446602456 144106357446602463\n144106357446602464 144106357446602495\n144106357446602496 144106357446602751\n144106357446602752 144106357446606847\n144106357446606848 144106357446672383\n144106357446672384 144106357446934527\n144106357446934528 144106357455323135\n144106357455323136 144106357488877567\n144106357488877568 144106357623095295\n144106357623095296 144106391982833663\n144106391982833664 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 261208778387488767\n261208778387488768 261771728340910079\n261771728340910080 261789320526954495\n261789320526954496 261791519550210047\n261791519550210048 261791588269686783\n261791588269686784 261791622629425151\n261791622629425152 261791639809294335\n261791639809294336 261791641956777983\n261791641956777984 261791642225213439\n261791642225213440 261791642225344511\n261791642225344512 261791642225410047\n261791642225410048 261791642225414143\n261791642225414144 261791642225414175\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_21",
                            "returncode": 0,
                            "stdout": "1\n0 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_04",
                            "returncode": 0,
                            "stdout": "41\n360198504640541332 360198504640541335\n360198504640541336 360198504640541343\n360198504640541344 360198504640541375\n360198504640541376 360198504640541439\n360198504640541440 360198504640541695\n360198504640541696 360198504640542719\n360198504640542720 360198504640544767\n360198504640544768 360198504640675839\n360198504640675840 360198504640937983\n360198504640937984 360198504645132287\n360198504645132288 360198504678686719\n360198504678686720 360198504947122175\n360198504947122176 360198506020863999\n360198506020864000 360198514610798591\n360198514610798592 360198531790667775\n360198531790667776 360198566150406143\n360198566150406144 360198634869882879\n360198634869882880 360198909747789823\n360198909747789824 360200009259417599\n360200009259417600 360217601445462015\n360217601445462016 360287970189639679\n360287970189639680 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 504966108218916863\n504966108218916864 505247583195627519\n505247583195627520 505256379288649727\n505256379288649728 505257478800277503\n505257478800277504 505258028556091391\n505258028556091392 505258032851058687\n505258032851058688 505258033387929599\n505258033387929600 505258033455038463\n505258033455038464 505258033488592895\n505258033488592896 505258033496981503\n505258033496981504 505258033499078655\n505258033499078656 505258033500127231\n505258033500127232 505258033500651519\n505258033500651520 505258033500667903\n505258033500667904 505258033500676095\n505258033500676096 505258033500676607\n505258033500676608 505258033500676863\n505258033500676864 505258033500676865\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_05",
                            "returncode": 0,
                            "stdout": "55\n170125114320639076 170125114320639079\n170125114320639080 170125114320639087\n170125114320639088 170125114320639103\n170125114320639104 170125114320639231\n170125114320639232 170125114320639487\n170125114320639488 170125114320639999\n170125114320640000 170125114320642047\n170125114320642048 170125114320650239\n170125114320650240 170125114320683007\n170125114320683008 170125114320748543\n170125114320748544 170125114320879615\n170125114320879616 170125114321403903\n170125114321403904 170125114329792511\n170125114329792512 170125114346569727\n170125114346569728 170125114883440639\n170125114883440640 170125132063309823\n170125132063309824 170125166423048191\n170125166423048192 170125235142524927\n170125235142524928 170134031235547135\n170134031235547136 170151623421591551\n170151623421591552 170292360909946879\n170292360909946880 170573835886657535\n170573835886657536 171136785840078847\n171136785840078848 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 202661983231672319\n202661983231672320 203787883138514943\n203787883138514944 204350833091936255\n204350833091936256 204632308068646911\n204632308068646912 204634507091902463\n204634507091902464 204635606603530239\n204635606603530240 204635881481437183\n204635881481437184 204636018920390655\n204636018920390656 204636027510325247\n204636027510325248 204636029657808895\n204636029657808896 204636030731550719\n204636030731550720 204636031268421631\n204636031268421632 204636031536857087\n204636031536857088 204636031671074815\n204636031671074816 204636031704629247\n204636031704629248 204636031721406463\n204636031721406464 204636031729795071\n204636031729795072 204636031731892223\n204636031731892224 204636031732940799\n204636031732940800 204636031733465087\n204636031733465088 204636031733727231\n204636031733727232 204636031733858303\n204636031733858304 204636031733923839\n204636031733923840 204636031733956607\n204636031733956608 204636031733972991\n204636031733972992 204636031733975039\n204636031733975040 204636031733976063\n204636031733976064 204636031733976575\n204636031733976576 204636031733976831\n204636031733976832 204636031733976847\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_12",
                            "returncode": 0,
                            "stdout": "54\n271518219607274605 271518219607274605\n271518219607274606 271518219607274607\n271518219607274608 271518219607274623\n271518219607274624 271518219607274751\n271518219607274752 271518219607275007\n271518219607275008 271518219607275519\n271518219607275520 271518219607277567\n271518219607277568 271518219607343103\n271518219607343104 271518219607474175\n271518219607474176 271518219611668479\n271518219611668480 271518219645222911\n271518219645222912 271518219779440639\n271518219779440640 271518220316311551\n271518220316311552 271518228906246143\n271518228906246144 271518246086115327\n271518246086115328 271518280445853695\n271518280445853696 271518349165330431\n271518349165330432 271518898921144319\n271518898921144320 271519998432772095\n271519998432772096 271522197456027647\n271522197456027648 271526595502538751\n271526595502538752 271535391595560959\n271535391595560960 271552983781605375\n271552983781605376 271623352525783039\n271623352525783040 271904827502493695\n271904827502493696 272467777455915007\n272467777455915008 274719577269600255\n274719577269600256 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 486388759756013567\n486388759756013568 490892359383384063\n490892359383384064 493144159197069311\n493144159197069312 493425634173779967\n493425634173779968 493496002917957631\n493496002917957632 493513595104002047\n493513595104002048 493515794127257599\n493515794127257600 493515931566211071\n493515931566211072 493515932639952895\n493515932639952896 493515933176823807\n493515933176823808 493515933311041535\n493515933311041536 493515933378150399\n493515933378150400 493515933394927615\n493515933394927616 493515933403316223\n493515933403316224 493515933404364799\n493515933404364800 493515933404430335\n493515933404430336 493515933404463103\n493515933404463104 493515933404467199\n493515933404467200 493515933404467263\n493515933404467264 493515933404467279\n493515933404467280 493515933404467287\n493515933404467288 493515933404467291\n493515933404467292 493515933404467292\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_15",
                            "returncode": 0,
                            "stdout": "48\n123989531008007376 123989531008007391\n123989531008007392 123989531008007423\n123989531008007424 123989531008007679\n123989531008007680 123989531008008191\n123989531008008192 123989531008040959\n123989531008040960 123989531008172031\n123989531008172032 123989531008434175\n123989531008434176 123989531010531327\n123989531010531328 123989531014725631\n123989531014725632 123989531283161087\n123989531283161088 123989531820031999\n123989531820032000 123989533967515647\n123989533967515648 123989538262482943\n123989538262482944 123989555442352127\n123989555442352128 123989589802090495\n123989589802090496 123989727241043967\n123989727241043968 124130464729399295\n124130464729399296 124411939706109951\n124411939706109952 124974889659531263\n124974889659531264 126100789566373887\n126100789566373888 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 794885334230892543\n794885334230892544 795448284184313855\n795448284184313856 795518652928491519\n795518652928491520 795527449021513727\n795527449021513728 795527723899420671\n795527723899420672 795527861338374143\n795527861338374144 795527930057850879\n795527930057850880 795527938647785471\n795527938647785472 795527940795269119\n795527940795269120 795527941063704575\n795527941063704576 795527941130813439\n795527941130813440 795527941164367871\n795527941164367872 795527941166465023\n795527941166465024 795527941167513599\n795527941167513600 795527941168037887\n795527941168037888 795527941168070655\n795527941168070656 795527941168087039\n795527941168087040 795527941168095231\n795527941168095232 795527941168099327\n795527941168099328 795527941168099839\n795527941168099840 795527941168099967\n795527941168099968 795527941168099983\n795527941168099984 795527941168099987\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_01",
                            "returncode": 0,
                            "stdout": "4\n288054454257713152 288054454291267583\n288054454291267584 288089638663356415\n288089638663356416 288230376151711743\n288230376151711744 288230376160100351\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_16",
                            "returncode": 0,
                            "stdout": "57\n395279993370173227 395279993370173227\n395279993370173228 395279993370173231\n395279993370173232 395279993370173247\n395279993370173248 395279993370173311\n395279993370173312 395279993370173439\n395279993370173440 395279993370181631\n395279993370181632 395279993370312703\n395279993370312704 395279993370836991\n395279993370836992 395279993371885567\n395279993371885568 395279993376079871\n395279993376079872 395279993510297599\n395279993510297600 395279993778733055\n395279993778733056 395279994315603967\n395279994315603968 395279996463087615\n395279996463087616 395280065182564351\n395280065182564352 395280202621517823\n395280202621517824 395280477499424767\n395280477499424768 395281027255238655\n395281027255238656 395283226278494207\n395283226278494208 395287624325005311\n395287624325005312 395296420418027519\n395296420418027520 395331604790116351\n395331604790116352 395472342278471679\n395472342278471680 395753817255182335\n395753817255182336 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 729583139634020351\n729583139634020352 734086739261390847\n734086739261390848 736338539075076095\n736338539075076096 737464438981918719\n737464438981918720 737745913958629375\n737745913958629376 737816282702807039\n737816282702807040 737851467074895871\n737851467074895872 737869059260940287\n737869059260940288 737873457307451391\n737873457307451392 737875656330706943\n737875656330706944 737876755842334719\n737876755842334720 737876773022203903\n737876773022203904 737876777317171199\n737876777317171200 737876777854042111\n737876777854042112 737876777988259839\n737876777988259840 737876778055368703\n737876778055368704 737876778088923135\n737876778088923136 737876778091020287\n737876778091020288 737876778092068863\n737876778092068864 737876778092331007\n737876778092331008 737876778092363775\n737876778092363776 737876778092380159\n737876778092380160 737876778092388351\n737876778092388352 737876778092390399\n737876778092390400 737876778092391423\n737876778092391424 737876778092391935\n737876778092391936 737876778092392191\n737876778092392192 737876778092392195\n737876778092392196 737876778092392197\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_03",
                            "returncode": 0,
                            "stdout": "8\n3940649673945088 3940649673949183\n3940649673949184 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 11258999068426239\n11258999068426240 11540474045136895\n11540474045136896 11549270138159103\n11549270138159104 11549545016066047\n11549545016066048 11549545024454655\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_18",
                            "returncode": 0,
                            "stdout": "61\n61398917963652103 61398917963652103\n61398917963652104 61398917963652111\n61398917963652112 61398917963652127\n61398917963652128 61398917963652159\n61398917963652160 61398917963652223\n61398917963652224 61398917963652351\n61398917963652352 61398917963652607\n61398917963652608 61398917963653119\n61398917963653120 61398917963661311\n61398917963661312 61398917963677695\n61398917963677696 61398917963710463\n61398917963710464 61398917963841535\n61398917963841536 61398917964103679\n61398917964103680 61398917964627967\n61398917964627968 61398917966725119\n61398917966725120 61398917983502335\n61398917983502336 61398918117720063\n61398918117720064 61398918654590975\n61398918654590976 61398919728332799\n61398919728332800 61398928318267391\n61398928318267392 61401127341522943\n61401127341522944 61405525388034047\n61405525388034048 61414321481056255\n61414321481056256 61431913667100671\n61431913667100672 61502282411278335\n61502282411278336 61643019899633663\n61643019899633664 61924494876344319\n61924494876344320 63050394783186943\n63050394783186944 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 198721333557723135\n198721333557723136 199002808534433791\n199002808534433792 199143546022789119\n199143546022789120 199213914766966783\n199213914766966784 199249099139055615\n199249099139055616 199253497185566719\n199253497185566720 199255696208822271\n199255696208822272 199256795720450047\n199256795720450048 199257345476263935\n199257345476263936 199257414195740671\n199257414195740672 199257448555479039\n199257448555479040 199257465735348223\n199257465735348224 199257470030315519\n199257470030315520 199257470298750975\n199257470298750976 199257470432968703\n199257470432968704 199257470466523135\n199257470466523136 199257470468620287\n199257470468620288 199257470469668863\n199257470469668864 199257470470193151\n199257470470193152 199257470470455295\n199257470470455296 199257470470586367\n199257470470586368 199257470470594559\n199257470470594560 199257470470596607\n199257470470596608 199257470470596863\n199257470470596864 199257470470596991\n199257470470596992 199257470470597055\n199257470470597056 199257470470597071\n199257470470597072 199257470470597075\n199257470470597076 199257470470597077\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_02",
                            "returncode": 0,
                            "stdout": "1\n0 1023\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_14",
                            "returncode": 0,
                            "stdout": "51\n860329287908420023 860329287908420023\n860329287908420024 860329287908420031\n860329287908420032 860329287908420095\n860329287908420096 860329287908420607\n860329287908420608 860329287908421631\n860329287908421632 860329287908425727\n860329287908425728 860329287908458495\n860329287908458496 860329287908589567\n860329287908589568 860329287909113855\n860329287909113856 860329287910162431\n860329287910162432 860329287914356735\n860329287914356736 860329287981465599\n860329287981465600 860329288518336511\n860329288518336512 860329297108271103\n860329297108271104 860329365827747839\n860329365827747840 860330465339375615\n860330465339375616 860332664362631167\n860332664362631168 860337062409142271\n860337062409142272 860345858502164479\n860345858502164480 860363450688208895\n860363450688208896 860398635060297727\n860398635060297728 860469003804475391\n860469003804475392 860750478781186047\n860750478781186048 861313428734607359\n861313428734607360 862439328641449983\n862439328641449984 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1044835113549955071\n1044835113549955072 1062849512059437055\n1062849512059437056 1067353111686807551\n1067353111686807552 1067916061640228863\n1067916061640228864 1068056799128584191\n1068056799128584192 1068127167872761855\n1068127167872761856 1068162352244850687\n1068162352244850688 1068166750291361791\n1068166750291361792 1068167025169268735\n1068167025169268736 1068167042349137919\n1068167042349137920 1068167042382692351\n1068167042382692352 1068167042391080959\n1068167042391080960 1068167042392129535\n1068167042392129536 1068167042392653823\n1068167042392653824 1068167042392784895\n1068167042392784896 1068167042392850431\n1068167042392850432 1068167042392883199\n1068167042392883200 1068167042392899583\n1068167042392899584 1068167042392901631\n1068167042392901632 1068167042392902655\n1068167042392902656 1068167042392903167\n1068167042392903168 1068167042392903231\n1068167042392903232 1068167042392903247\n1068167042392903248 1068167042392903249\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_19",
                            "returncode": 0,
                            "stdout": "67\n278964037634255119 278964037634255119\n278964037634255120 278964037634255135\n278964037634255136 278964037634255167\n278964037634255168 278964037634255231\n278964037634255232 278964037634255359\n278964037634255360 278964037634255871\n278964037634255872 278964037634256895\n278964037634256896 278964037634260991\n278964037634260992 278964037634293759\n278964037634293760 278964037634359295\n278964037634359296 278964037634490367\n278964037634490368 278964037635538943\n278964037635538944 278964037637636095\n278964037637636096 278964037646024703\n278964037646024704 278964037662801919\n278964037662801920 278964037696356351\n278964037696356352 278964037763465215\n278964037763465216 278964037897682943\n278964037897682944 278964040045166591\n278964040045166592 278964044340133887\n278964044340133888 278964052930068479\n278964052930068480 278964070109937663\n278964070109937664 278964104469676031\n278964104469676032 278964241908629503\n278964241908629504 278964791664443391\n278964791664443392 278965891176071167\n278965891176071168 278968090199326719\n278968090199326720 278976886292348927\n278976886292348928 279012070664437759\n279012070664437760 279082439408615423\n279082439408615424 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 828662331436171263\n828662331436171264 833165931063541759\n833165931063541760 835417730877227007\n835417730877227008 836543630784069631\n836543630784069632 836825105760780287\n836825105760780288 836860290132869119\n836860290132869120 836877882318913535\n836877882318913536 836882280365424639\n836882280365424640 836884479388680191\n836884479388680192 836884616827633663\n836884616827633664 836884651187372031\n836884651187372032 836884668367241215\n836884668367241216 836884670514724863\n836884670514724864 836884671588466687\n836884671588466688 836884672125337599\n836884672125337600 836884672158892031\n836884672158892032 836884672175669247\n836884672175669248 836884672179863551\n836884672179863552 836884672180912127\n836884672180912128 836884672181436415\n836884672181436416 836884672181567487\n836884672181567488 836884672181583871\n836884672181583872 836884672181592063\n836884672181592064 836884672181596159\n836884672181596160 836884672181598207\n836884672181598208 836884672181598463\n836884672181598464 836884672181598591\n836884672181598592 836884672181598623\n836884672181598624 836884672181598639\n836884672181598640 836884672181598647\n836884672181598648 836884672181598649\n836884672181598650 836884672181598650\n",
                            "stderr": ""
                        }
                    ]
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n       ^\nMain.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n               ^\nMain.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                          ^\nMain.java:6: error: illegal character: '`'\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                         ^\nMain.java:6: error: <identifier> expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                           ^\nMain.java:6: error: <identifier> expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                       ^\nMain.java:6: error: illegal character: '`'\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                  ^\nMain.java:6: error: illegal character: '`'\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                              ^\nMain.java:6: error: <identifier> expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                ^\nMain.java:6: error: <identifier> expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                            ^\nMain.java:6: error: illegal character: '`'\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                           ^\nMain.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                                      ^\nMain.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                                               ^\nMain.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                                                          ^\nMain.java:6: error: illegal character: '`'\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                                                                      ^\nMain.java:6: error: illegal character: '`'\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                                                                        ^\nMain.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                                                                                  ^\nMain.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                                                                                               ^\nMain.java:6: error: ';' expected\nThe bug in line 15 is that the condition `L + (1L << (i + 1)) <= R` should be `L + (1L << (i + 1)) - 1 <= R` to ensure that the range does not exceed `R`. Here is the complete corrected method:\n                                                                                                                                                                                                ^\n19 errors\n"
                }
            }
        },
        "prompt_apr_2": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n       ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n              ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                        ^\nMain.java:33: error: <identifier> expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                  ^\nMain.java:33: error: <identifier> expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                    ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                      ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                               ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                     ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                 ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                          ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                            ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                            ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                         ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                  ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                              ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                     ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                            ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                              ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                        ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                  ^\nMain.java:33: error: <identifier> expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                         ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                              ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                 ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                           ^\nMain.java:33: error: <identifier> expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                              ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                           ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                                    ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                                        ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                                          ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                                                    ^\nMain.java:33: error: illegal character: '`'\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                                                      ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                                                              ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                                                                                      ^\nMain.java:33: error: ';' expected\nThe bug was in the line `range.add(L + (1L << i) - 1);` which could potentially add a number that exceeds `R`. The corrected line ensures that the upper bound of the range does not exceed `R` by using a ternary operator. Additionally, an `if` statement has been added to break out of the loop if `L` exceeds `R` due to the increment, handling an edge case.}\n                                                                                                                                                                                                                                                                                                                                                              ^\n36 errors\n"
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:6: error: <identifier> expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n         ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                    ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                             ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                   ^\nMain.java:6: error: <identifier> expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                             ^\nMain.java:6: error: <identifier> expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                               ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                 ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                             ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                       ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                  ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                              ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                     ^\nMain.java:6: error: <identifier> expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                           ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                         ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                   ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                            ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                                        ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                                                 ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                                                         ^\nMain.java:6: error: illegal character: '`'\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                                                           ^\nMain.java:6: error: unclosed character literal\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                                                                  ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                                                                                  ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                                                                                             ^\nMain.java:6: error: ';' expected\nCertainly! The issue with the line `range.add(L + (1L << i) - 1);` is that it should be adding the upper bound of the range, but it needs to ensure that the upper bound does not exceed `R`. Here's the corrected version of your method:\n                                                                                                                                                                                                                                         ^\nMain.java:8: error: illegal character: '`'\n```java\n^\nMain.java:8: error: illegal character: '`'\n```java\n ^\nMain.java:8: error: illegal character: '`'\n```java\n  ^\nMain.java:8: error: <identifier> expected\n```java\n       ^\nMain.java:9: error: <identifier> expected\nimport java.util.ArrayList;\n                          ^\nMain.java:10: error: illegal start of type\nimport java.util.List;\n^\nMain.java:10: error: <identifier> expected\nimport java.util.List;\n                     ^\nMain.java:11: error: illegal start of type\nimport java.util.Scanner;\n^\nMain.java:11: error: <identifier> expected\nimport java.util.Scanner;\n                        ^\nMain.java:40: error: illegal character: '`'\n```\n^\nMain.java:40: error: illegal character: '`'\n```\n ^\nMain.java:40: error: illegal character: '`'\n```\n  ^\nMain.java:42: error: ';' expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                 ^\nMain.java:42: error: ';' expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                           ^\nMain.java:42: error: ';' expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                    ^\nMain.java:42: error: ';' expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                               ^\nMain.java:42: error: ';' expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                        ^\nMain.java:42: error: illegal character: '`'\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                ^\nMain.java:42: error: illegal character: '`'\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                  ^\nMain.java:42: error: ';' expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                            ^\nMain.java:42: error: ';' expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                                      ^\nMain.java:42: error: ';' expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                                              ^\nMain.java:42: error: illegal character: '`'\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                                                  ^\nMain.java:42: error: <identifier> expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                                                           ^\nMain.java:42: error: <identifier> expected\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                                                             ^\nMain.java:42: error: illegal character: '`'\nThis ensures that the upper bound of each range does not exceed `R`. The key change is the use of `Math.min(L + (1L << i) - 1, R)` to set the upper bound of the range.}\n                                                                                                                                 ^\n51 errors\n"
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": 0,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_test_11",
                            "returncode": 0,
                            "stdout": "55\n893124445952679748 893124445952679751\n893124445952679752 893124445952679759\n893124445952679760 893124445952679775\n893124445952679776 893124445952679807\n893124445952679808 893124445952679935\n893124445952679936 893124445952688127\n893124445952688128 893124445952704511\n893124445952704512 893124445952737279\n893124445952737280 893124445952802815\n893124445952802816 893124445953064959\n893124445953064960 893124445957259263\n893124445957259264 893124445965647871\n893124445965647872 893124445999202303\n893124445999202304 893124446536073215\n893124446536073216 893124447609815039\n893124447609815040 893124464789684223\n893124464789684224 893124499149422591\n893124499149422592 893128897195933695\n893128897195933696 893137693288955903\n893137693288955904 893155285475000319\n893155285475000320 893190469847089151\n893190469847089152 893260838591266815\n893260838591266816 893401576079622143\n893401576079622144 893964526033043455\n893964526033043456 896216325846728703\n896216325846728704 900719925474099199\n900719925474099200 936748722493063167\n936748722493063168 1008806316530991103\n1008806316530991104 1026820715040473087\n1026820715040473088 1035827914295214079\n1035827914295214080 1038079714108899327\n1038079714108899328 1039205614015741951\n1039205614015741952 1039768563969163263\n1039768563969163264 1039803748341252095\n1039803748341252096 1039821340527296511\n1039821340527296512 1039830136620318719\n1039830136620318720 1039834534666829823\n1039834534666829824 1039836733690085375\n1039836733690085376 1039837833201713151\n1039837833201713152 1039838382957527039\n1039838382957527040 1039838417317265407\n1039838417317265408 1039838425907199999\n1039838425907200000 1039838426980941823\n1039838426980941824 1039838427517812735\n1039838427517812736 1039838427534589951\n1039838427534589952 1039838427542978559\n1039838427542978560 1039838427545075711\n1039838427545075712 1039838427545092095\n1039838427545092096 1039838427545096191\n1039838427545096192 1039838427545097215\n1039838427545097216 1039838427545097727\n1039838427545097728 1039838427545097983\n1039838427545097984 1039838427545098111\n1039838427545098112 1039838427545098127\n1039838427545098128 1039838427545098128\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_27",
                            "returncode": 0,
                            "stdout": "1\n0 0\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_09",
                            "returncode": 0,
                            "stdout": "98\n505529333062828545 505529333062828545\n505529333062828546 505529333062828547\n505529333062828548 505529333062828551\n505529333062828552 505529333062828559\n505529333062828560 505529333062828575\n505529333062828576 505529333062828607\n505529333062828608 505529333062828671\n505529333062828672 505529333062828799\n505529333062828800 505529333062829055\n505529333062829056 505529333062830079\n505529333062830080 505529333062832127\n505529333062832128 505529333062836223\n505529333062836224 505529333062844415\n505529333062844416 505529333062860799\n505529333062860800 505529333062893567\n505529333062893568 505529333062959103\n505529333062959104 505529333063090175\n505529333063090176 505529333063352319\n505529333063352320 505529333063876607\n505529333063876608 505529333064925183\n505529333064925184 505529333067022335\n505529333067022336 505529333083799551\n505529333083799552 505529333117353983\n505529333117353984 505529333184462847\n505529333184462848 505529333318680575\n505529333318680576 505529333587116031\n505529333587116032 505529334123986943\n505529334123986944 505529335197728767\n505529335197728768 505529337345212415\n505529337345212416 505529341640179711\n505529341640179712 505529350230114303\n505529350230114304 505529367409983487\n505529367409983488 505529401769721855\n505529401769721856 505529470489198591\n505529470489198592 505529607928152063\n505529607928152064 505530157683965951\n505530157683965952 505531257195593727\n505531257195593728 505533456218849279\n505533456218849280 505537854265360383\n505537854265360384 505546650358382591\n505546650358382592 505564242544427007\n505564242544427008 505599426916515839\n505599426916515840 505669795660693503\n505669795660693504 505810533149048831\n505810533149048832 506092008125759487\n506092008125759488 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575616327373291519\n575616327373291520 575757064861646847\n575757064861646848 575827433605824511\n575827433605824512 575862617977913343\n575862617977913344 575880210163957759\n575880210163957760 575889006256979967\n575889006256979968 575893404303491071\n575893404303491072 575895603326746623\n575895603326746624 575896702838374399\n575896702838374400 575897252594188287\n575897252594188288 575897527472095231\n575897527472095232 575897664911048703\n575897664911048704 575897733630525439\n575897733630525440 575897767990263807\n575897767990263808 575897785170132991\n575897785170132992 575897793760067583\n575897793760067584 575897795907551231\n575897795907551232 575897796981293055\n575897796981293056 575897797518163967\n575897797518163968 575897797786599423\n575897797786599424 575897797920817151\n575897797920817152 575897797987926015\n575897797987926016 575897798021480447\n575897798021480448 575897798038257663\n575897798038257664 575897798046646271\n575897798046646272 575897798050840575\n575897798050840576 575897798052937727\n575897798052937728 575897798053986303\n575897798053986304 575897798054510591\n575897798054510592 575897798054772735\n575897798054772736 575897798054903807\n575897798054903808 575897798054936575\n575897798054936576 575897798054952959\n575897798054952960 575897798054953983\n575897798054953984 575897798054954495\n575897798054954496 575897798054954751\n575897798054954752 575897798054954879\n575897798054954880 575897798054954943\n575897798054954944 575897798054954975\n575897798054954976 575897798054954991\n575897798054954992 575897798054954995\n575897798054954996 575897798054954997\n575897798054954998 575897798054954998\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_20",
                            "returncode": 0,
                            "stdout": "61\n181262195287766621 181262195287766621\n181262195287766622 181262195287766623\n181262195287766624 181262195287766655\n181262195287766656 181262195287766783\n181262195287766784 181262195287767039\n181262195287767040 181262195287769087\n181262195287769088 181262195287785471\n181262195287785472 181262195287916543\n181262195287916544 181262195288440831\n181262195288440832 181262195290537983\n181262195290537984 181262195298926591\n181262195298926592 181262195332481023\n181262195332481024 181262195399589887\n181262195399589888 181262195936460799\n181262195936460800 181262197010202623\n181262197010202624 181262205600137215\n181262205600137216 181262222780006399\n181262222780006400 181262257139744767\n181262257139744768 181262325859221503\n181262325859221504 181262463298174975\n181262463298174976 181262738176081919\n181262738176081920 181263287931895807\n181263287931895808 181265486955151359\n181265486955151360 181269885001662463\n181269885001662464 182395784908505087\n182395784908505088 184647584722190335\n184647584722190336 189151184349560831\n189151184349560832 198158383604301823\n198158383604301824 216172782113783807\n216172782113783808 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 756604737398243327\n756604737398243328 774619135907725311\n774619135907725312 776870935721410559\n776870935721410560 777996835628253183\n777996835628253184 778559785581674495\n778559785581674496 778841260558385151\n778841260558385152 778981998046740479\n778981998046740480 778990794139762687\n778990794139762688 778991893651390463\n778991893651390464 778992443407204351\n778992443407204352 778992718285111295\n778992718285111296 778992726875045887\n778992726875045888 778992729022529535\n778992729022529536 778992730096271359\n778992730096271360 778992730364706815\n778992730364706816 778992730381484031\n778992730381484032 778992730385678335\n778992730385678336 778992730387775487\n778992730387775488 778992730388037631\n778992730388037632 778992730388168703\n778992730388168704 778992730388234239\n778992730388234240 778992730388267007\n778992730388267008 778992730388283391\n778992730388283392 778992730388287487\n778992730388287488 778992730388288511\n778992730388288512 778992730388288767\n778992730388288768 778992730388288799\n778992730388288800 778992730388288815\n778992730388288816 778992730388288823\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_25",
                            "returncode": 0,
                            "stdout": "2\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_17",
                            "returncode": 0,
                            "stdout": "59\n366943872216607560 366943872216607567\n366943872216607568 366943872216607583\n366943872216607584 366943872216607615\n366943872216607616 366943872216607743\n366943872216607744 366943872216608767\n366943872216608768 366943872216612863\n366943872216612864 366943872216629247\n366943872216629248 366943872216662015\n366943872216662016 366943872216727551\n366943872216727552 366943872216989695\n366943872216989696 366943872284098559\n366943872284098560 366943872418316287\n366943872418316288 366943881008250879\n366943881008250880 366943898188120063\n366943898188120064 366943932547858431\n366943932547858432 366944001267335167\n366944001267335168 366944138706288639\n366944138706288640 366944413584195583\n366944413584195584 366946612607451135\n366946612607451136 366955408700473343\n366955408700473344 366973000886517759\n366973000886517760 367043369630695423\n367043369630695424 369295169444380671\n369295169444380672 378302368699121663\n378302368699121664 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1081004648057274367\n1081004648057274368 1081039832429363199\n1081039832429363200 1081057424615407615\n1081057424615407616 1081066220708429823\n1081066220708429824 1081068419731685375\n1081068419731685376 1081069519243313151\n1081069519243313152 1081070068999127039\n1081070068999127040 1081070343877033983\n1081070343877033984 1081070412596510719\n1081070412596510720 1081070446956249087\n1081070446956249088 1081070455546183679\n1081070455546183680 1081070457693667327\n1081070457693667328 1081070458767409151\n1081070458767409152 1081070459304280063\n1081070459304280064 1081070459371388927\n1081070459371388928 1081070459388166143\n1081070459388166144 1081070459390263295\n1081070459390263296 1081070459391311871\n1081070459391311872 1081070459391574015\n1081070459391574016 1081070459391705087\n1081070459391705088 1081070459391707135\n1081070459391707136 1081070459391708159\n1081070459391708160 1081070459391708415\n1081070459391708416 1081070459391708543\n1081070459391708544 1081070459391708607\n1081070459391708608 1081070459391708639\n1081070459391708640 1081070459391708655\n1081070459391708656 1081070459391708659\n1081070459391708660 1081070459391708660\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_13",
                            "returncode": 0,
                            "stdout": "52\n813135255471707232 813135255471707263\n813135255471707264 813135255471707391\n813135255471707392 813135255471707647\n813135255471707648 813135255471708159\n813135255471708160 813135255471710207\n813135255471710208 813135255471718399\n813135255471718400 813135255471783935\n813135255471783936 813135255471915007\n813135255471915008 813135255476109311\n813135255476109312 813135255492886527\n813135255492886528 813135255526440959\n813135255526440960 813135255593549823\n813135255593549824 813135255861985279\n813135255861985280 813135260156952575\n813135260156952576 813135268746887167\n813135268746887168 813135303106625535\n813135303106625536 813135577984532479\n813135577984532480 813136127740346367\n813136127740346368 813137227251974143\n813137227251974144 813146023344996351\n813146023344996352 813181207717085183\n813181207717085184 813462682693795839\n813462682693795840 814025632647217151\n814025632647217152 815151532554059775\n815151532554059776 819655132181430271\n819655132181430272 828662331436171263\n828662331436171264 846676729945653247\n846676729945653248 847802629852495871\n847802629852495872 848084104829206527\n848084104829206528 848154473573384191\n848154473573384192 848172065759428607\n848172065759428608 848174264782684159\n848174264782684160 848174539660591103\n848174539660591104 848174677099544575\n848174677099544576 848174745819021311\n848174745819021312 848174780178759679\n848174780178759680 848174788768694271\n848174788768694272 848174793063661567\n848174793063661568 848174794137403391\n848174794137403392 848174794405838847\n848174794405838848 848174794472947711\n848174794472947712 848174794506502143\n848174794506502144 848174794508599295\n848174794508599296 848174794509647871\n848174794509647872 848174794509713407\n848174794509713408 848174794509729791\n848174794509729792 848174794509733887\n848174794509733888 848174794509734911\n848174794509734912 848174794509735423\n848174794509735424 848174794509735679\n848174794509735680 848174794509735807\n848174794509735808 848174794509735811\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_10",
                            "returncode": 0,
                            "stdout": "110\n504403158265495553 504403158265495553\n504403158265495554 504403158265495555\n504403158265495556 504403158265495559\n504403158265495560 504403158265495567\n504403158265495568 504403158265495583\n504403158265495584 504403158265495615\n504403158265495616 504403158265495679\n504403158265495680 504403158265495807\n504403158265495808 504403158265496063\n504403158265496064 504403158265496575\n504403158265496576 504403158265497599\n504403158265497600 504403158265499647\n504403158265499648 504403158265503743\n504403158265503744 504403158265511935\n504403158265511936 504403158265528319\n504403158265528320 504403158265561087\n504403158265561088 504403158265626623\n504403158265626624 504403158265757695\n504403158265757696 504403158266019839\n504403158266019840 504403158266544127\n504403158266544128 504403158267592703\n504403158267592704 504403158269689855\n504403158269689856 504403158273884159\n504403158273884160 504403158282272767\n504403158282272768 504403158299049983\n504403158299049984 504403158332604415\n504403158332604416 504403158399713279\n504403158399713280 504403158533931007\n504403158533931008 504403158802366463\n504403158802366464 504403159339237375\n504403159339237376 504403160412979199\n504403160412979200 504403162560462847\n504403162560462848 504403166855430143\n504403166855430144 504403175445364735\n504403175445364736 504403192625233919\n504403192625233920 504403226984972287\n504403226984972288 504403295704449023\n504403295704449024 504403433143402495\n504403433143402496 504403708021309439\n504403708021309440 504404257777123327\n504404257777123328 504405357288751103\n504405357288751104 504407556312006655\n504407556312006656 504411954358517759\n504411954358517760 504420750451539967\n504420750451539968 504438342637584383\n504438342637584384 504473527009673215\n504473527009673216 504543895753850879\n504543895753850880 504684633242206207\n504684633242206208 504966108218916863\n504966108218916864 505529058172338175\n505529058172338176 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575897802350002175\n575897802350002176 576179277326712831\n576179277326712832 576320014815068159\n576320014815068160 576390383559245823\n576390383559245824 576425567931334655\n576425567931334656 576443160117379071\n576443160117379072 576451956210401279\n576451956210401280 576456354256912383\n576456354256912384 576458553280167935\n576458553280167936 576459652791795711\n576459652791795712 576460202547609599\n576460202547609600 576460477425516543\n576460477425516544 576460614864470015\n576460614864470016 576460683583946751\n576460683583946752 576460717943685119\n576460717943685120 576460735123554303\n576460735123554304 576460743713488895\n576460743713488896 576460748008456191\n576460748008456192 576460750155939839\n576460750155939840 576460751229681663\n576460751229681664 576460751766552575\n576460751766552576 576460752034988031\n576460752034988032 576460752169205759\n576460752169205760 576460752236314623\n576460752236314624 576460752269869055\n576460752269869056 576460752286646271\n576460752286646272 576460752295034879\n576460752295034880 576460752299229183\n576460752299229184 576460752301326335\n576460752301326336 576460752302374911\n576460752302374912 576460752302899199\n576460752302899200 576460752303161343\n576460752303161344 576460752303292415\n576460752303292416 576460752303357951\n576460752303357952 576460752303390719\n576460752303390720 576460752303407103\n576460752303407104 576460752303415295\n576460752303415296 576460752303419391\n576460752303419392 576460752303421439\n576460752303421440 576460752303422463\n576460752303422464 576460752303422975\n576460752303422976 576460752303423231\n576460752303423232 576460752303423359\n576460752303423360 576460752303423423\n576460752303423424 576460752303423455\n576460752303423456 576460752303423471\n576460752303423472 576460752303423479\n576460752303423480 576460752303423483\n576460752303423484 576460752303423485\n576460752303423486 576460752303423486\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_02",
                            "returncode": 0,
                            "stdout": "25\n432344644764301224 432344644764301231\n432344644764301232 432344644764301247\n432344644764301248 432344644764301311\n432344644764301312 432344644764303359\n432344644764303360 432344644764827647\n432344644764827648 432344644769021951\n432344644769021952 432344644836130815\n432344644836130816 432344645104566271\n432344645104566272 432344653694500863\n432344653694500864 432344670874370047\n432344670874370048 432344739593846783\n432344739593846784 432345014471753727\n432345014471753728 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 558448552817197055\n558448552817197056 558448827695103999\n558448827695104000 558448896414580735\n558448896414580736 558448896683016191\n558448896683016192 558448896716570623\n558448896716570624 558448896716832767\n558448896716832768 558448896716849151\n558448896716849152 558448896716853247\n558448896716853248 558448896716855295\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": 0,
                            "stdout": "5\n3 3\n4 7\n8 15\n16 17\n18 18\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_23",
                            "returncode": 0,
                            "stdout": "60\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_29",
                            "returncode": 0,
                            "stdout": "2\n1 1\n2 2\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_24",
                            "returncode": 0,
                            "stdout": "118\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_28",
                            "returncode": 0,
                            "stdout": "1\n1 1\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_26",
                            "returncode": 0,
                            "stdout": "1\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_22",
                            "returncode": 0,
                            "stdout": "60\n0 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_08",
                            "returncode": 0,
                            "stdout": "87\n432486315808860234 432486315808860235\n432486315808860236 432486315808860239\n432486315808860240 432486315808860255\n432486315808860256 432486315808860287\n432486315808860288 432486315808860415\n432486315808860416 432486315808860671\n432486315808860672 432486315808861183\n432486315808861184 432486315808862207\n432486315808862208 432486315808866303\n432486315808866304 432486315808882687\n432486315808882688 432486315808915455\n432486315808915456 432486315809046527\n432486315809046528 432486315809308671\n432486315809308672 432486315809832959\n432486315809832960 432486315810881535\n432486315810881536 432486315812978687\n432486315812978688 432486315817172991\n432486315817172992 432486315825561599\n432486315825561600 432486315842338815\n432486315842338816 432486315875893247\n432486315875893248 432486315943002111\n432486315943002112 432486316211437567\n432486316211437568 432486316748308479\n432486316748308480 432486318895792127\n432486318895792128 432486336075661311\n432486336075661312 432486370435399679\n432486370435399680 432486439154876415\n432486439154876416 432486576593829887\n432486576593829888 432486851471736831\n432486851471736832 432487401227550719\n432487401227550720 432488500739178495\n432488500739178496 432490699762434047\n432490699762434048 432495097808945151\n432495097808945152 432503893901967359\n432503893901967360 432521486088011775\n432521486088011776 432556670460100607\n432556670460100608 432627039204278271\n432627039204278272 432908514180988927\n432908514180988928 433471464134410239\n433471464134410240 434597364041252863\n434597364041252864 436849163854938111\n436849163854938112 441352763482308607\n441352763482308608 450359962737049599\n450359962737049600 468374361246531583\n468374361246531584 504403158265495551\n504403158265495552 522417556774977535\n522417556774977536 526921156402348031\n526921156402348032 529172956216033279\n529172956216033280 530298856122875903\n530298856122875904 530861806076297215\n530861806076297216 531143281053007871\n531143281053007872 531284018541363199\n531284018541363200 531354387285540863\n531354387285540864 531389571657629695\n531389571657629696 531407163843674111\n531407163843674112 531415959936696319\n531415959936696320 531420357983207423\n531420357983207424 531422557006462975\n531422557006462976 531423106762276863\n531423106762276864 531423381640183807\n531423381640183808 531423450359660543\n531423450359660544 531423467539529727\n531423467539529728 531423469687013375\n531423469687013376 531423470760755199\n531423470760755200 531423471297626111\n531423471297626112 531423471431843839\n531423471431843840 531423471498952703\n531423471498952704 531423471532507135\n531423471532507136 531423471549284351\n531423471549284352 531423471557672959\n531423471557672960 531423471561867263\n531423471561867264 531423471563964415\n531423471563964416 531423471564226559\n531423471564226560 531423471564357631\n531423471564357632 531423471564390399\n531423471564390400 531423471564398591\n531423471564398592 531423471564400639\n531423471564400640 531423471564401663\n531423471564401664 531423471564402175\n531423471564402176 531423471564402431\n531423471564402432 531423471564402559\n531423471564402560 531423471564402623\n531423471564402624 531423471564402655\n531423471564402656 531423471564402663\n531423471564402664 531423471564402667\n531423471564402668 531423471564402669\n531423471564402670 531423471564402670\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_06",
                            "returncode": 0,
                            "stdout": "63\n11801128058619141 11801128058619141\n11801128058619142 11801128058619143\n11801128058619144 11801128058619151\n11801128058619152 11801128058619167\n11801128058619168 11801128058619199\n11801128058619200 11801128058619263\n11801128058619264 11801128058619391\n11801128058619392 11801128058619903\n11801128058619904 11801128058621951\n11801128058621952 11801128058626047\n11801128058626048 11801128058634239\n11801128058634240 11801128058650623\n11801128058650624 11801128058683391\n11801128058683392 11801128058748927\n11801128058748928 11801128059011071\n11801128059011072 11801128059535359\n11801128059535360 11801128060583935\n11801128060583936 11801128094138367\n11801128094138368 11801129167880191\n11801129167880192 11801131315363839\n11801131315363840 11801135610331135\n11801135610331136 11801144200265727\n11801144200265728 11801161380134911\n11801161380134912 11801195739873279\n11801195739873280 11801333178826751\n11801333178826752 11801608056733695\n11801608056733696 11802157812547583\n11802157812547584 11804356835803135\n11804356835803136 11821949021847551\n11821949021847552 12384898975268863\n12384898975268864 13510798882111487\n13510798882111488 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 477381560501272575\n477381560501272576 481885160128643071\n481885160128643072 484136959942328319\n484136959942328320 484418434919038975\n484418434919038976 484488803663216639\n484488803663216640 484491002686472191\n484491002686472192 484492102198099967\n484492102198099968 484492651953913855\n484492651953913856 484492789392867327\n484492789392867328 484492858112344063\n484492858112344064 484492892472082431\n484492892472082432 484492909651951615\n484492909651951616 484492910725693439\n484492910725693440 484492910859911167\n484492910859911168 484492910927020031\n484492910927020032 484492910960574463\n484492910960574464 484492910964768767\n484492910964768768 484492910965817343\n484492910965817344 484492910965818367\n484492910965818368 484492910965818623\n484492910965818624 484492910965818687\n484492910965818688 484492910965818719\n484492910965818720 484492910965818727\n484492910965818728 484492910965818729\n484492910965818730 484492910965818730\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_07",
                            "returncode": 0,
                            "stdout": "85\n282183781417523 282183781417523\n282183781417524 282183781417527\n282183781417528 282183781417535\n282183781417536 282183781417599\n282183781417600 282183781417727\n282183781417728 282183781417983\n282183781417984 282183781419007\n282183781419008 282183781421055\n282183781421056 282183781425151\n282183781425152 282183781433343\n282183781433344 282183781449727\n282183781449728 282183781580799\n282183781580800 282183782629375\n282183782629376 282183784726527\n282183784726528 282183788920831\n282183788920832 282183797309439\n282183797309440 282183814086655\n282183814086656 282183847641087\n282183847641088 282183914749951\n282183914749952 282184183185407\n282184183185408 282184720056319\n282184720056320 282185793798143\n282185793798144 282187941281791\n282187941281792 282196531216383\n282196531216384 282230890954751\n282230890954752 282299610431487\n282299610431488 282574488338431\n282574488338432 283673999966207\n283673999966208 285873023221759\n285873023221760 290271069732863\n290271069732864 299067162755071\n299067162755072 316659348799487\n316659348799488 351843720888319\n351843720888320 422212465065983\n422212465065984 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 270215977642229759\n270215977642229760 279223176896970751\n279223176896970752 283726776524341247\n283726776524341248 285978576338026495\n285978576338026496 286541526291447807\n286541526291447808 286611895035625471\n286611895035625472 286647079407714303\n286647079407714304 286664671593758719\n286664671593758720 286673467686780927\n286673467686780928 286677865733292031\n286677865733292032 286680064756547583\n286680064756547584 286681164268175359\n286681164268175360 286681714023989247\n286681714023989248 286681988901896191\n286681988901896192 286682126340849663\n286682126340849664 286682195060326399\n286682195060326400 286682229420064767\n286682229420064768 286682246599933951\n286682246599933952 286682250894901247\n286682250894901248 286682251968643071\n286682251968643072 286682252505513983\n286682252505513984 286682252773949439\n286682252773949440 286682252908167167\n286682252908167168 286682252975276031\n286682252975276032 286682253008830463\n286682253008830464 286682253017219071\n286682253017219072 286682253019316223\n286682253019316224 286682253020364799\n286682253020364800 286682253020889087\n286682253020889088 286682253020954623\n286682253020954624 286682253020987391\n286682253020987392 286682253021003775\n286682253021003776 286682253021011967\n286682253021011968 286682253021016063\n286682253021016064 286682253021018111\n286682253021018112 286682253021019135\n286682253021019136 286682253021019647\n286682253021019648 286682253021019775\n286682253021019776 286682253021019779\n286682253021019780 286682253021019780\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_03",
                            "returncode": 0,
                            "stdout": "28\n144106357446602451 144106357446602451\n144106357446602452 144106357446602455\n144106357446602456 144106357446602463\n144106357446602464 144106357446602495\n144106357446602496 144106357446602751\n144106357446602752 144106357446606847\n144106357446606848 144106357446672383\n144106357446672384 144106357446934527\n144106357446934528 144106357455323135\n144106357455323136 144106357488877567\n144106357488877568 144106357623095295\n144106357623095296 144106391982833663\n144106391982833664 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 261208778387488767\n261208778387488768 261771728340910079\n261771728340910080 261789320526954495\n261789320526954496 261791519550210047\n261791519550210048 261791588269686783\n261791588269686784 261791622629425151\n261791622629425152 261791639809294335\n261791639809294336 261791641956777983\n261791641956777984 261791642225213439\n261791642225213440 261791642225344511\n261791642225344512 261791642225410047\n261791642225410048 261791642225414143\n261791642225414144 261791642225414175\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_21",
                            "returncode": 0,
                            "stdout": "1\n0 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_04",
                            "returncode": 0,
                            "stdout": "41\n360198504640541332 360198504640541335\n360198504640541336 360198504640541343\n360198504640541344 360198504640541375\n360198504640541376 360198504640541439\n360198504640541440 360198504640541695\n360198504640541696 360198504640542719\n360198504640542720 360198504640544767\n360198504640544768 360198504640675839\n360198504640675840 360198504640937983\n360198504640937984 360198504645132287\n360198504645132288 360198504678686719\n360198504678686720 360198504947122175\n360198504947122176 360198506020863999\n360198506020864000 360198514610798591\n360198514610798592 360198531790667775\n360198531790667776 360198566150406143\n360198566150406144 360198634869882879\n360198634869882880 360198909747789823\n360198909747789824 360200009259417599\n360200009259417600 360217601445462015\n360217601445462016 360287970189639679\n360287970189639680 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 504966108218916863\n504966108218916864 505247583195627519\n505247583195627520 505256379288649727\n505256379288649728 505257478800277503\n505257478800277504 505258028556091391\n505258028556091392 505258032851058687\n505258032851058688 505258033387929599\n505258033387929600 505258033455038463\n505258033455038464 505258033488592895\n505258033488592896 505258033496981503\n505258033496981504 505258033499078655\n505258033499078656 505258033500127231\n505258033500127232 505258033500651519\n505258033500651520 505258033500667903\n505258033500667904 505258033500676095\n505258033500676096 505258033500676607\n505258033500676608 505258033500676863\n505258033500676864 505258033500676865\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_05",
                            "returncode": 0,
                            "stdout": "55\n170125114320639076 170125114320639079\n170125114320639080 170125114320639087\n170125114320639088 170125114320639103\n170125114320639104 170125114320639231\n170125114320639232 170125114320639487\n170125114320639488 170125114320639999\n170125114320640000 170125114320642047\n170125114320642048 170125114320650239\n170125114320650240 170125114320683007\n170125114320683008 170125114320748543\n170125114320748544 170125114320879615\n170125114320879616 170125114321403903\n170125114321403904 170125114329792511\n170125114329792512 170125114346569727\n170125114346569728 170125114883440639\n170125114883440640 170125132063309823\n170125132063309824 170125166423048191\n170125166423048192 170125235142524927\n170125235142524928 170134031235547135\n170134031235547136 170151623421591551\n170151623421591552 170292360909946879\n170292360909946880 170573835886657535\n170573835886657536 171136785840078847\n171136785840078848 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 202661983231672319\n202661983231672320 203787883138514943\n203787883138514944 204350833091936255\n204350833091936256 204632308068646911\n204632308068646912 204634507091902463\n204634507091902464 204635606603530239\n204635606603530240 204635881481437183\n204635881481437184 204636018920390655\n204636018920390656 204636027510325247\n204636027510325248 204636029657808895\n204636029657808896 204636030731550719\n204636030731550720 204636031268421631\n204636031268421632 204636031536857087\n204636031536857088 204636031671074815\n204636031671074816 204636031704629247\n204636031704629248 204636031721406463\n204636031721406464 204636031729795071\n204636031729795072 204636031731892223\n204636031731892224 204636031732940799\n204636031732940800 204636031733465087\n204636031733465088 204636031733727231\n204636031733727232 204636031733858303\n204636031733858304 204636031733923839\n204636031733923840 204636031733956607\n204636031733956608 204636031733972991\n204636031733972992 204636031733975039\n204636031733975040 204636031733976063\n204636031733976064 204636031733976575\n204636031733976576 204636031733976831\n204636031733976832 204636031733976847\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_12",
                            "returncode": 0,
                            "stdout": "54\n271518219607274605 271518219607274605\n271518219607274606 271518219607274607\n271518219607274608 271518219607274623\n271518219607274624 271518219607274751\n271518219607274752 271518219607275007\n271518219607275008 271518219607275519\n271518219607275520 271518219607277567\n271518219607277568 271518219607343103\n271518219607343104 271518219607474175\n271518219607474176 271518219611668479\n271518219611668480 271518219645222911\n271518219645222912 271518219779440639\n271518219779440640 271518220316311551\n271518220316311552 271518228906246143\n271518228906246144 271518246086115327\n271518246086115328 271518280445853695\n271518280445853696 271518349165330431\n271518349165330432 271518898921144319\n271518898921144320 271519998432772095\n271519998432772096 271522197456027647\n271522197456027648 271526595502538751\n271526595502538752 271535391595560959\n271535391595560960 271552983781605375\n271552983781605376 271623352525783039\n271623352525783040 271904827502493695\n271904827502493696 272467777455915007\n272467777455915008 274719577269600255\n274719577269600256 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 486388759756013567\n486388759756013568 490892359383384063\n490892359383384064 493144159197069311\n493144159197069312 493425634173779967\n493425634173779968 493496002917957631\n493496002917957632 493513595104002047\n493513595104002048 493515794127257599\n493515794127257600 493515931566211071\n493515931566211072 493515932639952895\n493515932639952896 493515933176823807\n493515933176823808 493515933311041535\n493515933311041536 493515933378150399\n493515933378150400 493515933394927615\n493515933394927616 493515933403316223\n493515933403316224 493515933404364799\n493515933404364800 493515933404430335\n493515933404430336 493515933404463103\n493515933404463104 493515933404467199\n493515933404467200 493515933404467263\n493515933404467264 493515933404467279\n493515933404467280 493515933404467287\n493515933404467288 493515933404467291\n493515933404467292 493515933404467292\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_15",
                            "returncode": 0,
                            "stdout": "48\n123989531008007376 123989531008007391\n123989531008007392 123989531008007423\n123989531008007424 123989531008007679\n123989531008007680 123989531008008191\n123989531008008192 123989531008040959\n123989531008040960 123989531008172031\n123989531008172032 123989531008434175\n123989531008434176 123989531010531327\n123989531010531328 123989531014725631\n123989531014725632 123989531283161087\n123989531283161088 123989531820031999\n123989531820032000 123989533967515647\n123989533967515648 123989538262482943\n123989538262482944 123989555442352127\n123989555442352128 123989589802090495\n123989589802090496 123989727241043967\n123989727241043968 124130464729399295\n124130464729399296 124411939706109951\n124411939706109952 124974889659531263\n124974889659531264 126100789566373887\n126100789566373888 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 794885334230892543\n794885334230892544 795448284184313855\n795448284184313856 795518652928491519\n795518652928491520 795527449021513727\n795527449021513728 795527723899420671\n795527723899420672 795527861338374143\n795527861338374144 795527930057850879\n795527930057850880 795527938647785471\n795527938647785472 795527940795269119\n795527940795269120 795527941063704575\n795527941063704576 795527941130813439\n795527941130813440 795527941164367871\n795527941164367872 795527941166465023\n795527941166465024 795527941167513599\n795527941167513600 795527941168037887\n795527941168037888 795527941168070655\n795527941168070656 795527941168087039\n795527941168087040 795527941168095231\n795527941168095232 795527941168099327\n795527941168099328 795527941168099839\n795527941168099840 795527941168099967\n795527941168099968 795527941168099983\n795527941168099984 795527941168099987\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_01",
                            "returncode": 0,
                            "stdout": "4\n288054454257713152 288054454291267583\n288054454291267584 288089638663356415\n288089638663356416 288230376151711743\n288230376151711744 288230376160100351\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_16",
                            "returncode": 0,
                            "stdout": "57\n395279993370173227 395279993370173227\n395279993370173228 395279993370173231\n395279993370173232 395279993370173247\n395279993370173248 395279993370173311\n395279993370173312 395279993370173439\n395279993370173440 395279993370181631\n395279993370181632 395279993370312703\n395279993370312704 395279993370836991\n395279993370836992 395279993371885567\n395279993371885568 395279993376079871\n395279993376079872 395279993510297599\n395279993510297600 395279993778733055\n395279993778733056 395279994315603967\n395279994315603968 395279996463087615\n395279996463087616 395280065182564351\n395280065182564352 395280202621517823\n395280202621517824 395280477499424767\n395280477499424768 395281027255238655\n395281027255238656 395283226278494207\n395283226278494208 395287624325005311\n395287624325005312 395296420418027519\n395296420418027520 395331604790116351\n395331604790116352 395472342278471679\n395472342278471680 395753817255182335\n395753817255182336 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 729583139634020351\n729583139634020352 734086739261390847\n734086739261390848 736338539075076095\n736338539075076096 737464438981918719\n737464438981918720 737745913958629375\n737745913958629376 737816282702807039\n737816282702807040 737851467074895871\n737851467074895872 737869059260940287\n737869059260940288 737873457307451391\n737873457307451392 737875656330706943\n737875656330706944 737876755842334719\n737876755842334720 737876773022203903\n737876773022203904 737876777317171199\n737876777317171200 737876777854042111\n737876777854042112 737876777988259839\n737876777988259840 737876778055368703\n737876778055368704 737876778088923135\n737876778088923136 737876778091020287\n737876778091020288 737876778092068863\n737876778092068864 737876778092331007\n737876778092331008 737876778092363775\n737876778092363776 737876778092380159\n737876778092380160 737876778092388351\n737876778092388352 737876778092390399\n737876778092390400 737876778092391423\n737876778092391424 737876778092391935\n737876778092391936 737876778092392191\n737876778092392192 737876778092392195\n737876778092392196 737876778092392197\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_03",
                            "returncode": 0,
                            "stdout": "8\n3940649673945088 3940649673949183\n3940649673949184 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 11258999068426239\n11258999068426240 11540474045136895\n11540474045136896 11549270138159103\n11549270138159104 11549545016066047\n11549545016066048 11549545024454655\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_18",
                            "returncode": 0,
                            "stdout": "61\n61398917963652103 61398917963652103\n61398917963652104 61398917963652111\n61398917963652112 61398917963652127\n61398917963652128 61398917963652159\n61398917963652160 61398917963652223\n61398917963652224 61398917963652351\n61398917963652352 61398917963652607\n61398917963652608 61398917963653119\n61398917963653120 61398917963661311\n61398917963661312 61398917963677695\n61398917963677696 61398917963710463\n61398917963710464 61398917963841535\n61398917963841536 61398917964103679\n61398917964103680 61398917964627967\n61398917964627968 61398917966725119\n61398917966725120 61398917983502335\n61398917983502336 61398918117720063\n61398918117720064 61398918654590975\n61398918654590976 61398919728332799\n61398919728332800 61398928318267391\n61398928318267392 61401127341522943\n61401127341522944 61405525388034047\n61405525388034048 61414321481056255\n61414321481056256 61431913667100671\n61431913667100672 61502282411278335\n61502282411278336 61643019899633663\n61643019899633664 61924494876344319\n61924494876344320 63050394783186943\n63050394783186944 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 198721333557723135\n198721333557723136 199002808534433791\n199002808534433792 199143546022789119\n199143546022789120 199213914766966783\n199213914766966784 199249099139055615\n199249099139055616 199253497185566719\n199253497185566720 199255696208822271\n199255696208822272 199256795720450047\n199256795720450048 199257345476263935\n199257345476263936 199257414195740671\n199257414195740672 199257448555479039\n199257448555479040 199257465735348223\n199257465735348224 199257470030315519\n199257470030315520 199257470298750975\n199257470298750976 199257470432968703\n199257470432968704 199257470466523135\n199257470466523136 199257470468620287\n199257470468620288 199257470469668863\n199257470469668864 199257470470193151\n199257470470193152 199257470470455295\n199257470470455296 199257470470586367\n199257470470586368 199257470470594559\n199257470470594560 199257470470596607\n199257470470596608 199257470470596863\n199257470470596864 199257470470596991\n199257470470596992 199257470470597055\n199257470470597056 199257470470597071\n199257470470597072 199257470470597075\n199257470470597076 199257470470597077\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_02",
                            "returncode": 0,
                            "stdout": "1\n0 1023\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_14",
                            "returncode": 0,
                            "stdout": "51\n860329287908420023 860329287908420023\n860329287908420024 860329287908420031\n860329287908420032 860329287908420095\n860329287908420096 860329287908420607\n860329287908420608 860329287908421631\n860329287908421632 860329287908425727\n860329287908425728 860329287908458495\n860329287908458496 860329287908589567\n860329287908589568 860329287909113855\n860329287909113856 860329287910162431\n860329287910162432 860329287914356735\n860329287914356736 860329287981465599\n860329287981465600 860329288518336511\n860329288518336512 860329297108271103\n860329297108271104 860329365827747839\n860329365827747840 860330465339375615\n860330465339375616 860332664362631167\n860332664362631168 860337062409142271\n860337062409142272 860345858502164479\n860345858502164480 860363450688208895\n860363450688208896 860398635060297727\n860398635060297728 860469003804475391\n860469003804475392 860750478781186047\n860750478781186048 861313428734607359\n861313428734607360 862439328641449983\n862439328641449984 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1044835113549955071\n1044835113549955072 1062849512059437055\n1062849512059437056 1067353111686807551\n1067353111686807552 1067916061640228863\n1067916061640228864 1068056799128584191\n1068056799128584192 1068127167872761855\n1068127167872761856 1068162352244850687\n1068162352244850688 1068166750291361791\n1068166750291361792 1068167025169268735\n1068167025169268736 1068167042349137919\n1068167042349137920 1068167042382692351\n1068167042382692352 1068167042391080959\n1068167042391080960 1068167042392129535\n1068167042392129536 1068167042392653823\n1068167042392653824 1068167042392784895\n1068167042392784896 1068167042392850431\n1068167042392850432 1068167042392883199\n1068167042392883200 1068167042392899583\n1068167042392899584 1068167042392901631\n1068167042392901632 1068167042392902655\n1068167042392902656 1068167042392903167\n1068167042392903168 1068167042392903231\n1068167042392903232 1068167042392903247\n1068167042392903248 1068167042392903249\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_19",
                            "returncode": 0,
                            "stdout": "67\n278964037634255119 278964037634255119\n278964037634255120 278964037634255135\n278964037634255136 278964037634255167\n278964037634255168 278964037634255231\n278964037634255232 278964037634255359\n278964037634255360 278964037634255871\n278964037634255872 278964037634256895\n278964037634256896 278964037634260991\n278964037634260992 278964037634293759\n278964037634293760 278964037634359295\n278964037634359296 278964037634490367\n278964037634490368 278964037635538943\n278964037635538944 278964037637636095\n278964037637636096 278964037646024703\n278964037646024704 278964037662801919\n278964037662801920 278964037696356351\n278964037696356352 278964037763465215\n278964037763465216 278964037897682943\n278964037897682944 278964040045166591\n278964040045166592 278964044340133887\n278964044340133888 278964052930068479\n278964052930068480 278964070109937663\n278964070109937664 278964104469676031\n278964104469676032 278964241908629503\n278964241908629504 278964791664443391\n278964791664443392 278965891176071167\n278965891176071168 278968090199326719\n278968090199326720 278976886292348927\n278976886292348928 279012070664437759\n279012070664437760 279082439408615423\n279082439408615424 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 828662331436171263\n828662331436171264 833165931063541759\n833165931063541760 835417730877227007\n835417730877227008 836543630784069631\n836543630784069632 836825105760780287\n836825105760780288 836860290132869119\n836860290132869120 836877882318913535\n836877882318913536 836882280365424639\n836882280365424640 836884479388680191\n836884479388680192 836884616827633663\n836884616827633664 836884651187372031\n836884651187372032 836884668367241215\n836884668367241216 836884670514724863\n836884670514724864 836884671588466687\n836884671588466688 836884672125337599\n836884672125337600 836884672158892031\n836884672158892032 836884672175669247\n836884672175669248 836884672179863551\n836884672179863552 836884672180912127\n836884672180912128 836884672181436415\n836884672181436416 836884672181567487\n836884672181567488 836884672181583871\n836884672181583872 836884672181592063\n836884672181592064 836884672181596159\n836884672181596160 836884672181598207\n836884672181598208 836884672181598463\n836884672181598464 836884672181598591\n836884672181598592 836884672181598623\n836884672181598624 836884672181598639\n836884672181598640 836884672181598647\n836884672181598648 836884672181598649\n836884672181598650 836884672181598650\n",
                            "stderr": ""
                        }
                    ]
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": 0,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_test_11",
                            "returncode": 0,
                            "stdout": "55\n893124445952679748 893124445952679751\n893124445952679752 893124445952679759\n893124445952679760 893124445952679775\n893124445952679776 893124445952679807\n893124445952679808 893124445952679935\n893124445952679936 893124445952688127\n893124445952688128 893124445952704511\n893124445952704512 893124445952737279\n893124445952737280 893124445952802815\n893124445952802816 893124445953064959\n893124445953064960 893124445957259263\n893124445957259264 893124445965647871\n893124445965647872 893124445999202303\n893124445999202304 893124446536073215\n893124446536073216 893124447609815039\n893124447609815040 893124464789684223\n893124464789684224 893124499149422591\n893124499149422592 893128897195933695\n893128897195933696 893137693288955903\n893137693288955904 893155285475000319\n893155285475000320 893190469847089151\n893190469847089152 893260838591266815\n893260838591266816 893401576079622143\n893401576079622144 893964526033043455\n893964526033043456 896216325846728703\n896216325846728704 900719925474099199\n900719925474099200 936748722493063167\n936748722493063168 1008806316530991103\n1008806316530991104 1026820715040473087\n1026820715040473088 1035827914295214079\n1035827914295214080 1038079714108899327\n1038079714108899328 1039205614015741951\n1039205614015741952 1039768563969163263\n1039768563969163264 1039803748341252095\n1039803748341252096 1039821340527296511\n1039821340527296512 1039830136620318719\n1039830136620318720 1039834534666829823\n1039834534666829824 1039836733690085375\n1039836733690085376 1039837833201713151\n1039837833201713152 1039838382957527039\n1039838382957527040 1039838417317265407\n1039838417317265408 1039838425907199999\n1039838425907200000 1039838426980941823\n1039838426980941824 1039838427517812735\n1039838427517812736 1039838427534589951\n1039838427534589952 1039838427542978559\n1039838427542978560 1039838427545075711\n1039838427545075712 1039838427545092095\n1039838427545092096 1039838427545096191\n1039838427545096192 1039838427545097215\n1039838427545097216 1039838427545097727\n1039838427545097728 1039838427545097983\n1039838427545097984 1039838427545098111\n1039838427545098112 1039838427545098127\n1039838427545098128 1039838427545098128\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_27",
                            "returncode": 0,
                            "stdout": "1\n0 0\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_09",
                            "returncode": 0,
                            "stdout": "98\n505529333062828545 505529333062828545\n505529333062828546 505529333062828547\n505529333062828548 505529333062828551\n505529333062828552 505529333062828559\n505529333062828560 505529333062828575\n505529333062828576 505529333062828607\n505529333062828608 505529333062828671\n505529333062828672 505529333062828799\n505529333062828800 505529333062829055\n505529333062829056 505529333062830079\n505529333062830080 505529333062832127\n505529333062832128 505529333062836223\n505529333062836224 505529333062844415\n505529333062844416 505529333062860799\n505529333062860800 505529333062893567\n505529333062893568 505529333062959103\n505529333062959104 505529333063090175\n505529333063090176 505529333063352319\n505529333063352320 505529333063876607\n505529333063876608 505529333064925183\n505529333064925184 505529333067022335\n505529333067022336 505529333083799551\n505529333083799552 505529333117353983\n505529333117353984 505529333184462847\n505529333184462848 505529333318680575\n505529333318680576 505529333587116031\n505529333587116032 505529334123986943\n505529334123986944 505529335197728767\n505529335197728768 505529337345212415\n505529337345212416 505529341640179711\n505529341640179712 505529350230114303\n505529350230114304 505529367409983487\n505529367409983488 505529401769721855\n505529401769721856 505529470489198591\n505529470489198592 505529607928152063\n505529607928152064 505530157683965951\n505530157683965952 505531257195593727\n505531257195593728 505533456218849279\n505533456218849280 505537854265360383\n505537854265360384 505546650358382591\n505546650358382592 505564242544427007\n505564242544427008 505599426916515839\n505599426916515840 505669795660693503\n505669795660693504 505810533149048831\n505810533149048832 506092008125759487\n506092008125759488 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575616327373291519\n575616327373291520 575757064861646847\n575757064861646848 575827433605824511\n575827433605824512 575862617977913343\n575862617977913344 575880210163957759\n575880210163957760 575889006256979967\n575889006256979968 575893404303491071\n575893404303491072 575895603326746623\n575895603326746624 575896702838374399\n575896702838374400 575897252594188287\n575897252594188288 575897527472095231\n575897527472095232 575897664911048703\n575897664911048704 575897733630525439\n575897733630525440 575897767990263807\n575897767990263808 575897785170132991\n575897785170132992 575897793760067583\n575897793760067584 575897795907551231\n575897795907551232 575897796981293055\n575897796981293056 575897797518163967\n575897797518163968 575897797786599423\n575897797786599424 575897797920817151\n575897797920817152 575897797987926015\n575897797987926016 575897798021480447\n575897798021480448 575897798038257663\n575897798038257664 575897798046646271\n575897798046646272 575897798050840575\n575897798050840576 575897798052937727\n575897798052937728 575897798053986303\n575897798053986304 575897798054510591\n575897798054510592 575897798054772735\n575897798054772736 575897798054903807\n575897798054903808 575897798054936575\n575897798054936576 575897798054952959\n575897798054952960 575897798054953983\n575897798054953984 575897798054954495\n575897798054954496 575897798054954751\n575897798054954752 575897798054954879\n575897798054954880 575897798054954943\n575897798054954944 575897798054954975\n575897798054954976 575897798054954991\n575897798054954992 575897798054954995\n575897798054954996 575897798054954997\n575897798054954998 575897798054954998\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_20",
                            "returncode": 0,
                            "stdout": "61\n181262195287766621 181262195287766621\n181262195287766622 181262195287766623\n181262195287766624 181262195287766655\n181262195287766656 181262195287766783\n181262195287766784 181262195287767039\n181262195287767040 181262195287769087\n181262195287769088 181262195287785471\n181262195287785472 181262195287916543\n181262195287916544 181262195288440831\n181262195288440832 181262195290537983\n181262195290537984 181262195298926591\n181262195298926592 181262195332481023\n181262195332481024 181262195399589887\n181262195399589888 181262195936460799\n181262195936460800 181262197010202623\n181262197010202624 181262205600137215\n181262205600137216 181262222780006399\n181262222780006400 181262257139744767\n181262257139744768 181262325859221503\n181262325859221504 181262463298174975\n181262463298174976 181262738176081919\n181262738176081920 181263287931895807\n181263287931895808 181265486955151359\n181265486955151360 181269885001662463\n181269885001662464 182395784908505087\n182395784908505088 184647584722190335\n184647584722190336 189151184349560831\n189151184349560832 198158383604301823\n198158383604301824 216172782113783807\n216172782113783808 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 756604737398243327\n756604737398243328 774619135907725311\n774619135907725312 776870935721410559\n776870935721410560 777996835628253183\n777996835628253184 778559785581674495\n778559785581674496 778841260558385151\n778841260558385152 778981998046740479\n778981998046740480 778990794139762687\n778990794139762688 778991893651390463\n778991893651390464 778992443407204351\n778992443407204352 778992718285111295\n778992718285111296 778992726875045887\n778992726875045888 778992729022529535\n778992729022529536 778992730096271359\n778992730096271360 778992730364706815\n778992730364706816 778992730381484031\n778992730381484032 778992730385678335\n778992730385678336 778992730387775487\n778992730387775488 778992730388037631\n778992730388037632 778992730388168703\n778992730388168704 778992730388234239\n778992730388234240 778992730388267007\n778992730388267008 778992730388283391\n778992730388283392 778992730388287487\n778992730388287488 778992730388288511\n778992730388288512 778992730388288767\n778992730388288768 778992730388288799\n778992730388288800 778992730388288815\n778992730388288816 778992730388288823\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_25",
                            "returncode": 0,
                            "stdout": "2\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_17",
                            "returncode": 0,
                            "stdout": "59\n366943872216607560 366943872216607567\n366943872216607568 366943872216607583\n366943872216607584 366943872216607615\n366943872216607616 366943872216607743\n366943872216607744 366943872216608767\n366943872216608768 366943872216612863\n366943872216612864 366943872216629247\n366943872216629248 366943872216662015\n366943872216662016 366943872216727551\n366943872216727552 366943872216989695\n366943872216989696 366943872284098559\n366943872284098560 366943872418316287\n366943872418316288 366943881008250879\n366943881008250880 366943898188120063\n366943898188120064 366943932547858431\n366943932547858432 366944001267335167\n366944001267335168 366944138706288639\n366944138706288640 366944413584195583\n366944413584195584 366946612607451135\n366946612607451136 366955408700473343\n366955408700473344 366973000886517759\n366973000886517760 367043369630695423\n367043369630695424 369295169444380671\n369295169444380672 378302368699121663\n378302368699121664 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1081004648057274367\n1081004648057274368 1081039832429363199\n1081039832429363200 1081057424615407615\n1081057424615407616 1081066220708429823\n1081066220708429824 1081068419731685375\n1081068419731685376 1081069519243313151\n1081069519243313152 1081070068999127039\n1081070068999127040 1081070343877033983\n1081070343877033984 1081070412596510719\n1081070412596510720 1081070446956249087\n1081070446956249088 1081070455546183679\n1081070455546183680 1081070457693667327\n1081070457693667328 1081070458767409151\n1081070458767409152 1081070459304280063\n1081070459304280064 1081070459371388927\n1081070459371388928 1081070459388166143\n1081070459388166144 1081070459390263295\n1081070459390263296 1081070459391311871\n1081070459391311872 1081070459391574015\n1081070459391574016 1081070459391705087\n1081070459391705088 1081070459391707135\n1081070459391707136 1081070459391708159\n1081070459391708160 1081070459391708415\n1081070459391708416 1081070459391708543\n1081070459391708544 1081070459391708607\n1081070459391708608 1081070459391708639\n1081070459391708640 1081070459391708655\n1081070459391708656 1081070459391708659\n1081070459391708660 1081070459391708660\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_13",
                            "returncode": 0,
                            "stdout": "52\n813135255471707232 813135255471707263\n813135255471707264 813135255471707391\n813135255471707392 813135255471707647\n813135255471707648 813135255471708159\n813135255471708160 813135255471710207\n813135255471710208 813135255471718399\n813135255471718400 813135255471783935\n813135255471783936 813135255471915007\n813135255471915008 813135255476109311\n813135255476109312 813135255492886527\n813135255492886528 813135255526440959\n813135255526440960 813135255593549823\n813135255593549824 813135255861985279\n813135255861985280 813135260156952575\n813135260156952576 813135268746887167\n813135268746887168 813135303106625535\n813135303106625536 813135577984532479\n813135577984532480 813136127740346367\n813136127740346368 813137227251974143\n813137227251974144 813146023344996351\n813146023344996352 813181207717085183\n813181207717085184 813462682693795839\n813462682693795840 814025632647217151\n814025632647217152 815151532554059775\n815151532554059776 819655132181430271\n819655132181430272 828662331436171263\n828662331436171264 846676729945653247\n846676729945653248 847802629852495871\n847802629852495872 848084104829206527\n848084104829206528 848154473573384191\n848154473573384192 848172065759428607\n848172065759428608 848174264782684159\n848174264782684160 848174539660591103\n848174539660591104 848174677099544575\n848174677099544576 848174745819021311\n848174745819021312 848174780178759679\n848174780178759680 848174788768694271\n848174788768694272 848174793063661567\n848174793063661568 848174794137403391\n848174794137403392 848174794405838847\n848174794405838848 848174794472947711\n848174794472947712 848174794506502143\n848174794506502144 848174794508599295\n848174794508599296 848174794509647871\n848174794509647872 848174794509713407\n848174794509713408 848174794509729791\n848174794509729792 848174794509733887\n848174794509733888 848174794509734911\n848174794509734912 848174794509735423\n848174794509735424 848174794509735679\n848174794509735680 848174794509735807\n848174794509735808 848174794509735811\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_10",
                            "returncode": 0,
                            "stdout": "110\n504403158265495553 504403158265495553\n504403158265495554 504403158265495555\n504403158265495556 504403158265495559\n504403158265495560 504403158265495567\n504403158265495568 504403158265495583\n504403158265495584 504403158265495615\n504403158265495616 504403158265495679\n504403158265495680 504403158265495807\n504403158265495808 504403158265496063\n504403158265496064 504403158265496575\n504403158265496576 504403158265497599\n504403158265497600 504403158265499647\n504403158265499648 504403158265503743\n504403158265503744 504403158265511935\n504403158265511936 504403158265528319\n504403158265528320 504403158265561087\n504403158265561088 504403158265626623\n504403158265626624 504403158265757695\n504403158265757696 504403158266019839\n504403158266019840 504403158266544127\n504403158266544128 504403158267592703\n504403158267592704 504403158269689855\n504403158269689856 504403158273884159\n504403158273884160 504403158282272767\n504403158282272768 504403158299049983\n504403158299049984 504403158332604415\n504403158332604416 504403158399713279\n504403158399713280 504403158533931007\n504403158533931008 504403158802366463\n504403158802366464 504403159339237375\n504403159339237376 504403160412979199\n504403160412979200 504403162560462847\n504403162560462848 504403166855430143\n504403166855430144 504403175445364735\n504403175445364736 504403192625233919\n504403192625233920 504403226984972287\n504403226984972288 504403295704449023\n504403295704449024 504403433143402495\n504403433143402496 504403708021309439\n504403708021309440 504404257777123327\n504404257777123328 504405357288751103\n504405357288751104 504407556312006655\n504407556312006656 504411954358517759\n504411954358517760 504420750451539967\n504420750451539968 504438342637584383\n504438342637584384 504473527009673215\n504473527009673216 504543895753850879\n504543895753850880 504684633242206207\n504684633242206208 504966108218916863\n504966108218916864 505529058172338175\n505529058172338176 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575897802350002175\n575897802350002176 576179277326712831\n576179277326712832 576320014815068159\n576320014815068160 576390383559245823\n576390383559245824 576425567931334655\n576425567931334656 576443160117379071\n576443160117379072 576451956210401279\n576451956210401280 576456354256912383\n576456354256912384 576458553280167935\n576458553280167936 576459652791795711\n576459652791795712 576460202547609599\n576460202547609600 576460477425516543\n576460477425516544 576460614864470015\n576460614864470016 576460683583946751\n576460683583946752 576460717943685119\n576460717943685120 576460735123554303\n576460735123554304 576460743713488895\n576460743713488896 576460748008456191\n576460748008456192 576460750155939839\n576460750155939840 576460751229681663\n576460751229681664 576460751766552575\n576460751766552576 576460752034988031\n576460752034988032 576460752169205759\n576460752169205760 576460752236314623\n576460752236314624 576460752269869055\n576460752269869056 576460752286646271\n576460752286646272 576460752295034879\n576460752295034880 576460752299229183\n576460752299229184 576460752301326335\n576460752301326336 576460752302374911\n576460752302374912 576460752302899199\n576460752302899200 576460752303161343\n576460752303161344 576460752303292415\n576460752303292416 576460752303357951\n576460752303357952 576460752303390719\n576460752303390720 576460752303407103\n576460752303407104 576460752303415295\n576460752303415296 576460752303419391\n576460752303419392 576460752303421439\n576460752303421440 576460752303422463\n576460752303422464 576460752303422975\n576460752303422976 576460752303423231\n576460752303423232 576460752303423359\n576460752303423360 576460752303423423\n576460752303423424 576460752303423455\n576460752303423456 576460752303423471\n576460752303423472 576460752303423479\n576460752303423480 576460752303423483\n576460752303423484 576460752303423485\n576460752303423486 576460752303423486\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_02",
                            "returncode": 0,
                            "stdout": "25\n432344644764301224 432344644764301231\n432344644764301232 432344644764301247\n432344644764301248 432344644764301311\n432344644764301312 432344644764303359\n432344644764303360 432344644764827647\n432344644764827648 432344644769021951\n432344644769021952 432344644836130815\n432344644836130816 432344645104566271\n432344645104566272 432344653694500863\n432344653694500864 432344670874370047\n432344670874370048 432344739593846783\n432344739593846784 432345014471753727\n432345014471753728 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 558448552817197055\n558448552817197056 558448827695103999\n558448827695104000 558448896414580735\n558448896414580736 558448896683016191\n558448896683016192 558448896716570623\n558448896716570624 558448896716832767\n558448896716832768 558448896716849151\n558448896716849152 558448896716853247\n558448896716853248 558448896716855295\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": 0,
                            "stdout": "5\n3 3\n4 7\n8 15\n16 17\n18 18\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_23",
                            "returncode": 0,
                            "stdout": "60\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_29",
                            "returncode": 0,
                            "stdout": "2\n1 1\n2 2\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_24",
                            "returncode": 0,
                            "stdout": "118\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_28",
                            "returncode": 0,
                            "stdout": "1\n1 1\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_26",
                            "returncode": 0,
                            "stdout": "1\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_22",
                            "returncode": 0,
                            "stdout": "60\n0 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_08",
                            "returncode": 0,
                            "stdout": "87\n432486315808860234 432486315808860235\n432486315808860236 432486315808860239\n432486315808860240 432486315808860255\n432486315808860256 432486315808860287\n432486315808860288 432486315808860415\n432486315808860416 432486315808860671\n432486315808860672 432486315808861183\n432486315808861184 432486315808862207\n432486315808862208 432486315808866303\n432486315808866304 432486315808882687\n432486315808882688 432486315808915455\n432486315808915456 432486315809046527\n432486315809046528 432486315809308671\n432486315809308672 432486315809832959\n432486315809832960 432486315810881535\n432486315810881536 432486315812978687\n432486315812978688 432486315817172991\n432486315817172992 432486315825561599\n432486315825561600 432486315842338815\n432486315842338816 432486315875893247\n432486315875893248 432486315943002111\n432486315943002112 432486316211437567\n432486316211437568 432486316748308479\n432486316748308480 432486318895792127\n432486318895792128 432486336075661311\n432486336075661312 432486370435399679\n432486370435399680 432486439154876415\n432486439154876416 432486576593829887\n432486576593829888 432486851471736831\n432486851471736832 432487401227550719\n432487401227550720 432488500739178495\n432488500739178496 432490699762434047\n432490699762434048 432495097808945151\n432495097808945152 432503893901967359\n432503893901967360 432521486088011775\n432521486088011776 432556670460100607\n432556670460100608 432627039204278271\n432627039204278272 432908514180988927\n432908514180988928 433471464134410239\n433471464134410240 434597364041252863\n434597364041252864 436849163854938111\n436849163854938112 441352763482308607\n441352763482308608 450359962737049599\n450359962737049600 468374361246531583\n468374361246531584 504403158265495551\n504403158265495552 522417556774977535\n522417556774977536 526921156402348031\n526921156402348032 529172956216033279\n529172956216033280 530298856122875903\n530298856122875904 530861806076297215\n530861806076297216 531143281053007871\n531143281053007872 531284018541363199\n531284018541363200 531354387285540863\n531354387285540864 531389571657629695\n531389571657629696 531407163843674111\n531407163843674112 531415959936696319\n531415959936696320 531420357983207423\n531420357983207424 531422557006462975\n531422557006462976 531423106762276863\n531423106762276864 531423381640183807\n531423381640183808 531423450359660543\n531423450359660544 531423467539529727\n531423467539529728 531423469687013375\n531423469687013376 531423470760755199\n531423470760755200 531423471297626111\n531423471297626112 531423471431843839\n531423471431843840 531423471498952703\n531423471498952704 531423471532507135\n531423471532507136 531423471549284351\n531423471549284352 531423471557672959\n531423471557672960 531423471561867263\n531423471561867264 531423471563964415\n531423471563964416 531423471564226559\n531423471564226560 531423471564357631\n531423471564357632 531423471564390399\n531423471564390400 531423471564398591\n531423471564398592 531423471564400639\n531423471564400640 531423471564401663\n531423471564401664 531423471564402175\n531423471564402176 531423471564402431\n531423471564402432 531423471564402559\n531423471564402560 531423471564402623\n531423471564402624 531423471564402655\n531423471564402656 531423471564402663\n531423471564402664 531423471564402667\n531423471564402668 531423471564402669\n531423471564402670 531423471564402670\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_06",
                            "returncode": 0,
                            "stdout": "63\n11801128058619141 11801128058619141\n11801128058619142 11801128058619143\n11801128058619144 11801128058619151\n11801128058619152 11801128058619167\n11801128058619168 11801128058619199\n11801128058619200 11801128058619263\n11801128058619264 11801128058619391\n11801128058619392 11801128058619903\n11801128058619904 11801128058621951\n11801128058621952 11801128058626047\n11801128058626048 11801128058634239\n11801128058634240 11801128058650623\n11801128058650624 11801128058683391\n11801128058683392 11801128058748927\n11801128058748928 11801128059011071\n11801128059011072 11801128059535359\n11801128059535360 11801128060583935\n11801128060583936 11801128094138367\n11801128094138368 11801129167880191\n11801129167880192 11801131315363839\n11801131315363840 11801135610331135\n11801135610331136 11801144200265727\n11801144200265728 11801161380134911\n11801161380134912 11801195739873279\n11801195739873280 11801333178826751\n11801333178826752 11801608056733695\n11801608056733696 11802157812547583\n11802157812547584 11804356835803135\n11804356835803136 11821949021847551\n11821949021847552 12384898975268863\n12384898975268864 13510798882111487\n13510798882111488 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 477381560501272575\n477381560501272576 481885160128643071\n481885160128643072 484136959942328319\n484136959942328320 484418434919038975\n484418434919038976 484488803663216639\n484488803663216640 484491002686472191\n484491002686472192 484492102198099967\n484492102198099968 484492651953913855\n484492651953913856 484492789392867327\n484492789392867328 484492858112344063\n484492858112344064 484492892472082431\n484492892472082432 484492909651951615\n484492909651951616 484492910725693439\n484492910725693440 484492910859911167\n484492910859911168 484492910927020031\n484492910927020032 484492910960574463\n484492910960574464 484492910964768767\n484492910964768768 484492910965817343\n484492910965817344 484492910965818367\n484492910965818368 484492910965818623\n484492910965818624 484492910965818687\n484492910965818688 484492910965818719\n484492910965818720 484492910965818727\n484492910965818728 484492910965818729\n484492910965818730 484492910965818730\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_07",
                            "returncode": 0,
                            "stdout": "85\n282183781417523 282183781417523\n282183781417524 282183781417527\n282183781417528 282183781417535\n282183781417536 282183781417599\n282183781417600 282183781417727\n282183781417728 282183781417983\n282183781417984 282183781419007\n282183781419008 282183781421055\n282183781421056 282183781425151\n282183781425152 282183781433343\n282183781433344 282183781449727\n282183781449728 282183781580799\n282183781580800 282183782629375\n282183782629376 282183784726527\n282183784726528 282183788920831\n282183788920832 282183797309439\n282183797309440 282183814086655\n282183814086656 282183847641087\n282183847641088 282183914749951\n282183914749952 282184183185407\n282184183185408 282184720056319\n282184720056320 282185793798143\n282185793798144 282187941281791\n282187941281792 282196531216383\n282196531216384 282230890954751\n282230890954752 282299610431487\n282299610431488 282574488338431\n282574488338432 283673999966207\n283673999966208 285873023221759\n285873023221760 290271069732863\n290271069732864 299067162755071\n299067162755072 316659348799487\n316659348799488 351843720888319\n351843720888320 422212465065983\n422212465065984 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 270215977642229759\n270215977642229760 279223176896970751\n279223176896970752 283726776524341247\n283726776524341248 285978576338026495\n285978576338026496 286541526291447807\n286541526291447808 286611895035625471\n286611895035625472 286647079407714303\n286647079407714304 286664671593758719\n286664671593758720 286673467686780927\n286673467686780928 286677865733292031\n286677865733292032 286680064756547583\n286680064756547584 286681164268175359\n286681164268175360 286681714023989247\n286681714023989248 286681988901896191\n286681988901896192 286682126340849663\n286682126340849664 286682195060326399\n286682195060326400 286682229420064767\n286682229420064768 286682246599933951\n286682246599933952 286682250894901247\n286682250894901248 286682251968643071\n286682251968643072 286682252505513983\n286682252505513984 286682252773949439\n286682252773949440 286682252908167167\n286682252908167168 286682252975276031\n286682252975276032 286682253008830463\n286682253008830464 286682253017219071\n286682253017219072 286682253019316223\n286682253019316224 286682253020364799\n286682253020364800 286682253020889087\n286682253020889088 286682253020954623\n286682253020954624 286682253020987391\n286682253020987392 286682253021003775\n286682253021003776 286682253021011967\n286682253021011968 286682253021016063\n286682253021016064 286682253021018111\n286682253021018112 286682253021019135\n286682253021019136 286682253021019647\n286682253021019648 286682253021019775\n286682253021019776 286682253021019779\n286682253021019780 286682253021019780\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_03",
                            "returncode": 0,
                            "stdout": "28\n144106357446602451 144106357446602451\n144106357446602452 144106357446602455\n144106357446602456 144106357446602463\n144106357446602464 144106357446602495\n144106357446602496 144106357446602751\n144106357446602752 144106357446606847\n144106357446606848 144106357446672383\n144106357446672384 144106357446934527\n144106357446934528 144106357455323135\n144106357455323136 144106357488877567\n144106357488877568 144106357623095295\n144106357623095296 144106391982833663\n144106391982833664 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 261208778387488767\n261208778387488768 261771728340910079\n261771728340910080 261789320526954495\n261789320526954496 261791519550210047\n261791519550210048 261791588269686783\n261791588269686784 261791622629425151\n261791622629425152 261791639809294335\n261791639809294336 261791641956777983\n261791641956777984 261791642225213439\n261791642225213440 261791642225344511\n261791642225344512 261791642225410047\n261791642225410048 261791642225414143\n261791642225414144 261791642225414175\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_21",
                            "returncode": 0,
                            "stdout": "1\n0 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_04",
                            "returncode": 0,
                            "stdout": "41\n360198504640541332 360198504640541335\n360198504640541336 360198504640541343\n360198504640541344 360198504640541375\n360198504640541376 360198504640541439\n360198504640541440 360198504640541695\n360198504640541696 360198504640542719\n360198504640542720 360198504640544767\n360198504640544768 360198504640675839\n360198504640675840 360198504640937983\n360198504640937984 360198504645132287\n360198504645132288 360198504678686719\n360198504678686720 360198504947122175\n360198504947122176 360198506020863999\n360198506020864000 360198514610798591\n360198514610798592 360198531790667775\n360198531790667776 360198566150406143\n360198566150406144 360198634869882879\n360198634869882880 360198909747789823\n360198909747789824 360200009259417599\n360200009259417600 360217601445462015\n360217601445462016 360287970189639679\n360287970189639680 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 504966108218916863\n504966108218916864 505247583195627519\n505247583195627520 505256379288649727\n505256379288649728 505257478800277503\n505257478800277504 505258028556091391\n505258028556091392 505258032851058687\n505258032851058688 505258033387929599\n505258033387929600 505258033455038463\n505258033455038464 505258033488592895\n505258033488592896 505258033496981503\n505258033496981504 505258033499078655\n505258033499078656 505258033500127231\n505258033500127232 505258033500651519\n505258033500651520 505258033500667903\n505258033500667904 505258033500676095\n505258033500676096 505258033500676607\n505258033500676608 505258033500676863\n505258033500676864 505258033500676865\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_05",
                            "returncode": 0,
                            "stdout": "55\n170125114320639076 170125114320639079\n170125114320639080 170125114320639087\n170125114320639088 170125114320639103\n170125114320639104 170125114320639231\n170125114320639232 170125114320639487\n170125114320639488 170125114320639999\n170125114320640000 170125114320642047\n170125114320642048 170125114320650239\n170125114320650240 170125114320683007\n170125114320683008 170125114320748543\n170125114320748544 170125114320879615\n170125114320879616 170125114321403903\n170125114321403904 170125114329792511\n170125114329792512 170125114346569727\n170125114346569728 170125114883440639\n170125114883440640 170125132063309823\n170125132063309824 170125166423048191\n170125166423048192 170125235142524927\n170125235142524928 170134031235547135\n170134031235547136 170151623421591551\n170151623421591552 170292360909946879\n170292360909946880 170573835886657535\n170573835886657536 171136785840078847\n171136785840078848 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 202661983231672319\n202661983231672320 203787883138514943\n203787883138514944 204350833091936255\n204350833091936256 204632308068646911\n204632308068646912 204634507091902463\n204634507091902464 204635606603530239\n204635606603530240 204635881481437183\n204635881481437184 204636018920390655\n204636018920390656 204636027510325247\n204636027510325248 204636029657808895\n204636029657808896 204636030731550719\n204636030731550720 204636031268421631\n204636031268421632 204636031536857087\n204636031536857088 204636031671074815\n204636031671074816 204636031704629247\n204636031704629248 204636031721406463\n204636031721406464 204636031729795071\n204636031729795072 204636031731892223\n204636031731892224 204636031732940799\n204636031732940800 204636031733465087\n204636031733465088 204636031733727231\n204636031733727232 204636031733858303\n204636031733858304 204636031733923839\n204636031733923840 204636031733956607\n204636031733956608 204636031733972991\n204636031733972992 204636031733975039\n204636031733975040 204636031733976063\n204636031733976064 204636031733976575\n204636031733976576 204636031733976831\n204636031733976832 204636031733976847\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_12",
                            "returncode": 0,
                            "stdout": "54\n271518219607274605 271518219607274605\n271518219607274606 271518219607274607\n271518219607274608 271518219607274623\n271518219607274624 271518219607274751\n271518219607274752 271518219607275007\n271518219607275008 271518219607275519\n271518219607275520 271518219607277567\n271518219607277568 271518219607343103\n271518219607343104 271518219607474175\n271518219607474176 271518219611668479\n271518219611668480 271518219645222911\n271518219645222912 271518219779440639\n271518219779440640 271518220316311551\n271518220316311552 271518228906246143\n271518228906246144 271518246086115327\n271518246086115328 271518280445853695\n271518280445853696 271518349165330431\n271518349165330432 271518898921144319\n271518898921144320 271519998432772095\n271519998432772096 271522197456027647\n271522197456027648 271526595502538751\n271526595502538752 271535391595560959\n271535391595560960 271552983781605375\n271552983781605376 271623352525783039\n271623352525783040 271904827502493695\n271904827502493696 272467777455915007\n272467777455915008 274719577269600255\n274719577269600256 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 486388759756013567\n486388759756013568 490892359383384063\n490892359383384064 493144159197069311\n493144159197069312 493425634173779967\n493425634173779968 493496002917957631\n493496002917957632 493513595104002047\n493513595104002048 493515794127257599\n493515794127257600 493515931566211071\n493515931566211072 493515932639952895\n493515932639952896 493515933176823807\n493515933176823808 493515933311041535\n493515933311041536 493515933378150399\n493515933378150400 493515933394927615\n493515933394927616 493515933403316223\n493515933403316224 493515933404364799\n493515933404364800 493515933404430335\n493515933404430336 493515933404463103\n493515933404463104 493515933404467199\n493515933404467200 493515933404467263\n493515933404467264 493515933404467279\n493515933404467280 493515933404467287\n493515933404467288 493515933404467291\n493515933404467292 493515933404467292\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_15",
                            "returncode": 0,
                            "stdout": "48\n123989531008007376 123989531008007391\n123989531008007392 123989531008007423\n123989531008007424 123989531008007679\n123989531008007680 123989531008008191\n123989531008008192 123989531008040959\n123989531008040960 123989531008172031\n123989531008172032 123989531008434175\n123989531008434176 123989531010531327\n123989531010531328 123989531014725631\n123989531014725632 123989531283161087\n123989531283161088 123989531820031999\n123989531820032000 123989533967515647\n123989533967515648 123989538262482943\n123989538262482944 123989555442352127\n123989555442352128 123989589802090495\n123989589802090496 123989727241043967\n123989727241043968 124130464729399295\n124130464729399296 124411939706109951\n124411939706109952 124974889659531263\n124974889659531264 126100789566373887\n126100789566373888 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 794885334230892543\n794885334230892544 795448284184313855\n795448284184313856 795518652928491519\n795518652928491520 795527449021513727\n795527449021513728 795527723899420671\n795527723899420672 795527861338374143\n795527861338374144 795527930057850879\n795527930057850880 795527938647785471\n795527938647785472 795527940795269119\n795527940795269120 795527941063704575\n795527941063704576 795527941130813439\n795527941130813440 795527941164367871\n795527941164367872 795527941166465023\n795527941166465024 795527941167513599\n795527941167513600 795527941168037887\n795527941168037888 795527941168070655\n795527941168070656 795527941168087039\n795527941168087040 795527941168095231\n795527941168095232 795527941168099327\n795527941168099328 795527941168099839\n795527941168099840 795527941168099967\n795527941168099968 795527941168099983\n795527941168099984 795527941168099987\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_01",
                            "returncode": 0,
                            "stdout": "4\n288054454257713152 288054454291267583\n288054454291267584 288089638663356415\n288089638663356416 288230376151711743\n288230376151711744 288230376160100351\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_16",
                            "returncode": 0,
                            "stdout": "57\n395279993370173227 395279993370173227\n395279993370173228 395279993370173231\n395279993370173232 395279993370173247\n395279993370173248 395279993370173311\n395279993370173312 395279993370173439\n395279993370173440 395279993370181631\n395279993370181632 395279993370312703\n395279993370312704 395279993370836991\n395279993370836992 395279993371885567\n395279993371885568 395279993376079871\n395279993376079872 395279993510297599\n395279993510297600 395279993778733055\n395279993778733056 395279994315603967\n395279994315603968 395279996463087615\n395279996463087616 395280065182564351\n395280065182564352 395280202621517823\n395280202621517824 395280477499424767\n395280477499424768 395281027255238655\n395281027255238656 395283226278494207\n395283226278494208 395287624325005311\n395287624325005312 395296420418027519\n395296420418027520 395331604790116351\n395331604790116352 395472342278471679\n395472342278471680 395753817255182335\n395753817255182336 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 729583139634020351\n729583139634020352 734086739261390847\n734086739261390848 736338539075076095\n736338539075076096 737464438981918719\n737464438981918720 737745913958629375\n737745913958629376 737816282702807039\n737816282702807040 737851467074895871\n737851467074895872 737869059260940287\n737869059260940288 737873457307451391\n737873457307451392 737875656330706943\n737875656330706944 737876755842334719\n737876755842334720 737876773022203903\n737876773022203904 737876777317171199\n737876777317171200 737876777854042111\n737876777854042112 737876777988259839\n737876777988259840 737876778055368703\n737876778055368704 737876778088923135\n737876778088923136 737876778091020287\n737876778091020288 737876778092068863\n737876778092068864 737876778092331007\n737876778092331008 737876778092363775\n737876778092363776 737876778092380159\n737876778092380160 737876778092388351\n737876778092388352 737876778092390399\n737876778092390400 737876778092391423\n737876778092391424 737876778092391935\n737876778092391936 737876778092392191\n737876778092392192 737876778092392195\n737876778092392196 737876778092392197\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_03",
                            "returncode": 0,
                            "stdout": "8\n3940649673945088 3940649673949183\n3940649673949184 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 11258999068426239\n11258999068426240 11540474045136895\n11540474045136896 11549270138159103\n11549270138159104 11549545016066047\n11549545016066048 11549545024454655\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_18",
                            "returncode": 0,
                            "stdout": "61\n61398917963652103 61398917963652103\n61398917963652104 61398917963652111\n61398917963652112 61398917963652127\n61398917963652128 61398917963652159\n61398917963652160 61398917963652223\n61398917963652224 61398917963652351\n61398917963652352 61398917963652607\n61398917963652608 61398917963653119\n61398917963653120 61398917963661311\n61398917963661312 61398917963677695\n61398917963677696 61398917963710463\n61398917963710464 61398917963841535\n61398917963841536 61398917964103679\n61398917964103680 61398917964627967\n61398917964627968 61398917966725119\n61398917966725120 61398917983502335\n61398917983502336 61398918117720063\n61398918117720064 61398918654590975\n61398918654590976 61398919728332799\n61398919728332800 61398928318267391\n61398928318267392 61401127341522943\n61401127341522944 61405525388034047\n61405525388034048 61414321481056255\n61414321481056256 61431913667100671\n61431913667100672 61502282411278335\n61502282411278336 61643019899633663\n61643019899633664 61924494876344319\n61924494876344320 63050394783186943\n63050394783186944 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 198721333557723135\n198721333557723136 199002808534433791\n199002808534433792 199143546022789119\n199143546022789120 199213914766966783\n199213914766966784 199249099139055615\n199249099139055616 199253497185566719\n199253497185566720 199255696208822271\n199255696208822272 199256795720450047\n199256795720450048 199257345476263935\n199257345476263936 199257414195740671\n199257414195740672 199257448555479039\n199257448555479040 199257465735348223\n199257465735348224 199257470030315519\n199257470030315520 199257470298750975\n199257470298750976 199257470432968703\n199257470432968704 199257470466523135\n199257470466523136 199257470468620287\n199257470468620288 199257470469668863\n199257470469668864 199257470470193151\n199257470470193152 199257470470455295\n199257470470455296 199257470470586367\n199257470470586368 199257470470594559\n199257470470594560 199257470470596607\n199257470470596608 199257470470596863\n199257470470596864 199257470470596991\n199257470470596992 199257470470597055\n199257470470597056 199257470470597071\n199257470470597072 199257470470597075\n199257470470597076 199257470470597077\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_02",
                            "returncode": 0,
                            "stdout": "1\n0 1023\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_14",
                            "returncode": 0,
                            "stdout": "51\n860329287908420023 860329287908420023\n860329287908420024 860329287908420031\n860329287908420032 860329287908420095\n860329287908420096 860329287908420607\n860329287908420608 860329287908421631\n860329287908421632 860329287908425727\n860329287908425728 860329287908458495\n860329287908458496 860329287908589567\n860329287908589568 860329287909113855\n860329287909113856 860329287910162431\n860329287910162432 860329287914356735\n860329287914356736 860329287981465599\n860329287981465600 860329288518336511\n860329288518336512 860329297108271103\n860329297108271104 860329365827747839\n860329365827747840 860330465339375615\n860330465339375616 860332664362631167\n860332664362631168 860337062409142271\n860337062409142272 860345858502164479\n860345858502164480 860363450688208895\n860363450688208896 860398635060297727\n860398635060297728 860469003804475391\n860469003804475392 860750478781186047\n860750478781186048 861313428734607359\n861313428734607360 862439328641449983\n862439328641449984 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1044835113549955071\n1044835113549955072 1062849512059437055\n1062849512059437056 1067353111686807551\n1067353111686807552 1067916061640228863\n1067916061640228864 1068056799128584191\n1068056799128584192 1068127167872761855\n1068127167872761856 1068162352244850687\n1068162352244850688 1068166750291361791\n1068166750291361792 1068167025169268735\n1068167025169268736 1068167042349137919\n1068167042349137920 1068167042382692351\n1068167042382692352 1068167042391080959\n1068167042391080960 1068167042392129535\n1068167042392129536 1068167042392653823\n1068167042392653824 1068167042392784895\n1068167042392784896 1068167042392850431\n1068167042392850432 1068167042392883199\n1068167042392883200 1068167042392899583\n1068167042392899584 1068167042392901631\n1068167042392901632 1068167042392902655\n1068167042392902656 1068167042392903167\n1068167042392903168 1068167042392903231\n1068167042392903232 1068167042392903247\n1068167042392903248 1068167042392903249\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_19",
                            "returncode": 0,
                            "stdout": "67\n278964037634255119 278964037634255119\n278964037634255120 278964037634255135\n278964037634255136 278964037634255167\n278964037634255168 278964037634255231\n278964037634255232 278964037634255359\n278964037634255360 278964037634255871\n278964037634255872 278964037634256895\n278964037634256896 278964037634260991\n278964037634260992 278964037634293759\n278964037634293760 278964037634359295\n278964037634359296 278964037634490367\n278964037634490368 278964037635538943\n278964037635538944 278964037637636095\n278964037637636096 278964037646024703\n278964037646024704 278964037662801919\n278964037662801920 278964037696356351\n278964037696356352 278964037763465215\n278964037763465216 278964037897682943\n278964037897682944 278964040045166591\n278964040045166592 278964044340133887\n278964044340133888 278964052930068479\n278964052930068480 278964070109937663\n278964070109937664 278964104469676031\n278964104469676032 278964241908629503\n278964241908629504 278964791664443391\n278964791664443392 278965891176071167\n278965891176071168 278968090199326719\n278968090199326720 278976886292348927\n278976886292348928 279012070664437759\n279012070664437760 279082439408615423\n279082439408615424 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 828662331436171263\n828662331436171264 833165931063541759\n833165931063541760 835417730877227007\n835417730877227008 836543630784069631\n836543630784069632 836825105760780287\n836825105760780288 836860290132869119\n836860290132869120 836877882318913535\n836877882318913536 836882280365424639\n836882280365424640 836884479388680191\n836884479388680192 836884616827633663\n836884616827633664 836884651187372031\n836884651187372032 836884668367241215\n836884668367241216 836884670514724863\n836884670514724864 836884671588466687\n836884671588466688 836884672125337599\n836884672125337600 836884672158892031\n836884672158892032 836884672175669247\n836884672175669248 836884672179863551\n836884672179863552 836884672180912127\n836884672180912128 836884672181436415\n836884672181436416 836884672181567487\n836884672181567488 836884672181583871\n836884672181583872 836884672181592063\n836884672181592064 836884672181596159\n836884672181596160 836884672181598207\n836884672181598208 836884672181598463\n836884672181598464 836884672181598591\n836884672181598592 836884672181598623\n836884672181598624 836884672181598639\n836884672181598640 836884672181598647\n836884672181598648 836884672181598649\n836884672181598650 836884672181598650\n",
                            "stderr": ""
                        }
                    ]
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n       ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n              ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                    ^\nMain.java:6: error: <identifier> expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                              ^\nMain.java:6: error: <identifier> expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                  ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                              ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                        ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                  ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                             ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                               ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                      ^\nMain.java:6: error: <identifier> expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                        ^\nMain.java:6: error: <identifier> expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                   ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                        ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                    ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                          ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                            ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                     ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                   ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                             ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                      ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                                  ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                                         ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                                                    ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                                                                ^\nMain.java:6: error: illegal character: '`'\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                                                                  ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                                                                            ^\nMain.java:6: error: ';' expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                                                                                          ^\nMain.java:6: error: <identifier> expected\nThe bug in the line `range.add(L + (1L << i) - 1);` is that it may cause the range to exceed `R` when `L + (1L << i) - 1` is greater than `R`. To fix this, we need to ensure that the upper bound of the range does not exceed `R`. Here is the corrected method:\n                                                                                                                                                                                                                                                                 ^\nMain.java:38: error: as of release 8, 'this' is allowed as the parameter name for the receiver type only\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n   ^\n  which has to be the first parameter, and cannot be a lambda parameter\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n       ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                             ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                            ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                       ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                            ^\nMain.java:38: error: <identifier> expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                              ^\nMain.java:38: error: <identifier> expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                         ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                              ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                       ^\nMain.java:38: error: <identifier> expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                             ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                            ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                              ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                      ^\nMain.java:38: error: <identifier> expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                           ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                               ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                    ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                               ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                    ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                      ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                 ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                          ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                     ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                            ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                       ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                       ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                     ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                              ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                                         ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                                                              ^\nMain.java:38: error: <identifier> expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                                                                  ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                                                                                ^\nMain.java:38: error: ';' expected\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                                                                                          ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                                                                                                 ^\nMain.java:38: error: illegal character: '`'\nIn this corrected version, we calculate the `upperBound` as `L + (1L << i) - 1`, but we check if it exceeds `R`. If it does, we set `upperBound` to `R` to ensure that the range does not go beyond the specified limit. This ensures that the ranges are correctly calculated and do not exceed the upper limit `R`.}\n                                                                                                                                                                                                                                                                                                                   ^\n65 errors\n"
                }
            }
        },
        "prompt_apr_3": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:21: error: reached end of file while parsing\n}\n ^\n1 error\n"
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:6: error: illegal character: '`'\n```java\n^\nMain.java:6: error: illegal character: '`'\n```java\n ^\nMain.java:6: error: illegal character: '`'\n```java\n  ^\nMain.java:22: error: illegal character: '`'\n```}\n^\nMain.java:22: error: illegal character: '`'\n```}\n ^\nMain.java:22: error: illegal character: '`'\n```}\n  ^\nMain.java:22: error: reached end of file while parsing\n```}\n    ^\n7 errors\n"
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": 0,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_test_11",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_27",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_09",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_20",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_25",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_17",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_13",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_10",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_02",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_23",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_29",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_24",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_28",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_26",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_22",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_08",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_06",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_07",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_03",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_21",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_04",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_05",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_12",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_15",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_01",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_16",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "00_sample_03",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_18",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "00_sample_02",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_14",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_19",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        }
                    ]
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:23: error: reached end of file while parsing\n        }}\n          ^\n1 error\n"
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": 1,
                    "so": "",
                    "se": "Main.java:6: error: illegal character: '`'\n```java\n^\nMain.java:6: error: illegal character: '`'\n```java\n ^\nMain.java:6: error: illegal character: '`'\n```java\n  ^\nMain.java:22: error: illegal character: '`'\n```}\n^\nMain.java:22: error: illegal character: '`'\n```}\n ^\nMain.java:22: error: illegal character: '`'\n```}\n  ^\nMain.java:22: error: reached end of file while parsing\n```}\n    ^\n7 errors\n"
                }
            }
        },
        "prompt_apr_4": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": 0,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_test_11",
                            "returncode": 0,
                            "stdout": "55\n893124445952679748 893124445952679751\n893124445952679752 893124445952679759\n893124445952679760 893124445952679775\n893124445952679776 893124445952679807\n893124445952679808 893124445952679935\n893124445952679936 893124445952688127\n893124445952688128 893124445952704511\n893124445952704512 893124445952737279\n893124445952737280 893124445952802815\n893124445952802816 893124445953064959\n893124445953064960 893124445957259263\n893124445957259264 893124445965647871\n893124445965647872 893124445999202303\n893124445999202304 893124446536073215\n893124446536073216 893124447609815039\n893124447609815040 893124464789684223\n893124464789684224 893124499149422591\n893124499149422592 893128897195933695\n893128897195933696 893137693288955903\n893137693288955904 893155285475000319\n893155285475000320 893190469847089151\n893190469847089152 893260838591266815\n893260838591266816 893401576079622143\n893401576079622144 893964526033043455\n893964526033043456 896216325846728703\n896216325846728704 900719925474099199\n900719925474099200 936748722493063167\n936748722493063168 1008806316530991103\n1008806316530991104 1026820715040473087\n1026820715040473088 1035827914295214079\n1035827914295214080 1038079714108899327\n1038079714108899328 1039205614015741951\n1039205614015741952 1039768563969163263\n1039768563969163264 1039803748341252095\n1039803748341252096 1039821340527296511\n1039821340527296512 1039830136620318719\n1039830136620318720 1039834534666829823\n1039834534666829824 1039836733690085375\n1039836733690085376 1039837833201713151\n1039837833201713152 1039838382957527039\n1039838382957527040 1039838417317265407\n1039838417317265408 1039838425907199999\n1039838425907200000 1039838426980941823\n1039838426980941824 1039838427517812735\n1039838427517812736 1039838427534589951\n1039838427534589952 1039838427542978559\n1039838427542978560 1039838427545075711\n1039838427545075712 1039838427545092095\n1039838427545092096 1039838427545096191\n1039838427545096192 1039838427545097215\n1039838427545097216 1039838427545097727\n1039838427545097728 1039838427545097983\n1039838427545097984 1039838427545098111\n1039838427545098112 1039838427545098127\n1039838427545098128 1039838427545098128\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_27",
                            "returncode": 0,
                            "stdout": "1\n0 0\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_09",
                            "returncode": 0,
                            "stdout": "98\n505529333062828545 505529333062828545\n505529333062828546 505529333062828547\n505529333062828548 505529333062828551\n505529333062828552 505529333062828559\n505529333062828560 505529333062828575\n505529333062828576 505529333062828607\n505529333062828608 505529333062828671\n505529333062828672 505529333062828799\n505529333062828800 505529333062829055\n505529333062829056 505529333062830079\n505529333062830080 505529333062832127\n505529333062832128 505529333062836223\n505529333062836224 505529333062844415\n505529333062844416 505529333062860799\n505529333062860800 505529333062893567\n505529333062893568 505529333062959103\n505529333062959104 505529333063090175\n505529333063090176 505529333063352319\n505529333063352320 505529333063876607\n505529333063876608 505529333064925183\n505529333064925184 505529333067022335\n505529333067022336 505529333083799551\n505529333083799552 505529333117353983\n505529333117353984 505529333184462847\n505529333184462848 505529333318680575\n505529333318680576 505529333587116031\n505529333587116032 505529334123986943\n505529334123986944 505529335197728767\n505529335197728768 505529337345212415\n505529337345212416 505529341640179711\n505529341640179712 505529350230114303\n505529350230114304 505529367409983487\n505529367409983488 505529401769721855\n505529401769721856 505529470489198591\n505529470489198592 505529607928152063\n505529607928152064 505530157683965951\n505530157683965952 505531257195593727\n505531257195593728 505533456218849279\n505533456218849280 505537854265360383\n505537854265360384 505546650358382591\n505546650358382592 505564242544427007\n505564242544427008 505599426916515839\n505599426916515840 505669795660693503\n505669795660693504 505810533149048831\n505810533149048832 506092008125759487\n506092008125759488 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575616327373291519\n575616327373291520 575757064861646847\n575757064861646848 575827433605824511\n575827433605824512 575862617977913343\n575862617977913344 575880210163957759\n575880210163957760 575889006256979967\n575889006256979968 575893404303491071\n575893404303491072 575895603326746623\n575895603326746624 575896702838374399\n575896702838374400 575897252594188287\n575897252594188288 575897527472095231\n575897527472095232 575897664911048703\n575897664911048704 575897733630525439\n575897733630525440 575897767990263807\n575897767990263808 575897785170132991\n575897785170132992 575897793760067583\n575897793760067584 575897795907551231\n575897795907551232 575897796981293055\n575897796981293056 575897797518163967\n575897797518163968 575897797786599423\n575897797786599424 575897797920817151\n575897797920817152 575897797987926015\n575897797987926016 575897798021480447\n575897798021480448 575897798038257663\n575897798038257664 575897798046646271\n575897798046646272 575897798050840575\n575897798050840576 575897798052937727\n575897798052937728 575897798053986303\n575897798053986304 575897798054510591\n575897798054510592 575897798054772735\n575897798054772736 575897798054903807\n575897798054903808 575897798054936575\n575897798054936576 575897798054952959\n575897798054952960 575897798054953983\n575897798054953984 575897798054954495\n575897798054954496 575897798054954751\n575897798054954752 575897798054954879\n575897798054954880 575897798054954943\n575897798054954944 575897798054954975\n575897798054954976 575897798054954991\n575897798054954992 575897798054954995\n575897798054954996 575897798054954997\n575897798054954998 575897798054954998\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_20",
                            "returncode": 0,
                            "stdout": "61\n181262195287766621 181262195287766621\n181262195287766622 181262195287766623\n181262195287766624 181262195287766655\n181262195287766656 181262195287766783\n181262195287766784 181262195287767039\n181262195287767040 181262195287769087\n181262195287769088 181262195287785471\n181262195287785472 181262195287916543\n181262195287916544 181262195288440831\n181262195288440832 181262195290537983\n181262195290537984 181262195298926591\n181262195298926592 181262195332481023\n181262195332481024 181262195399589887\n181262195399589888 181262195936460799\n181262195936460800 181262197010202623\n181262197010202624 181262205600137215\n181262205600137216 181262222780006399\n181262222780006400 181262257139744767\n181262257139744768 181262325859221503\n181262325859221504 181262463298174975\n181262463298174976 181262738176081919\n181262738176081920 181263287931895807\n181263287931895808 181265486955151359\n181265486955151360 181269885001662463\n181269885001662464 182395784908505087\n182395784908505088 184647584722190335\n184647584722190336 189151184349560831\n189151184349560832 198158383604301823\n198158383604301824 216172782113783807\n216172782113783808 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 756604737398243327\n756604737398243328 774619135907725311\n774619135907725312 776870935721410559\n776870935721410560 777996835628253183\n777996835628253184 778559785581674495\n778559785581674496 778841260558385151\n778841260558385152 778981998046740479\n778981998046740480 778990794139762687\n778990794139762688 778991893651390463\n778991893651390464 778992443407204351\n778992443407204352 778992718285111295\n778992718285111296 778992726875045887\n778992726875045888 778992729022529535\n778992729022529536 778992730096271359\n778992730096271360 778992730364706815\n778992730364706816 778992730381484031\n778992730381484032 778992730385678335\n778992730385678336 778992730387775487\n778992730387775488 778992730388037631\n778992730388037632 778992730388168703\n778992730388168704 778992730388234239\n778992730388234240 778992730388267007\n778992730388267008 778992730388283391\n778992730388283392 778992730388287487\n778992730388287488 778992730388288511\n778992730388288512 778992730388288767\n778992730388288768 778992730388288799\n778992730388288800 778992730388288815\n778992730388288816 778992730388288823\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_25",
                            "returncode": 0,
                            "stdout": "2\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_17",
                            "returncode": 0,
                            "stdout": "59\n366943872216607560 366943872216607567\n366943872216607568 366943872216607583\n366943872216607584 366943872216607615\n366943872216607616 366943872216607743\n366943872216607744 366943872216608767\n366943872216608768 366943872216612863\n366943872216612864 366943872216629247\n366943872216629248 366943872216662015\n366943872216662016 366943872216727551\n366943872216727552 366943872216989695\n366943872216989696 366943872284098559\n366943872284098560 366943872418316287\n366943872418316288 366943881008250879\n366943881008250880 366943898188120063\n366943898188120064 366943932547858431\n366943932547858432 366944001267335167\n366944001267335168 366944138706288639\n366944138706288640 366944413584195583\n366944413584195584 366946612607451135\n366946612607451136 366955408700473343\n366955408700473344 366973000886517759\n366973000886517760 367043369630695423\n367043369630695424 369295169444380671\n369295169444380672 378302368699121663\n378302368699121664 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1081004648057274367\n1081004648057274368 1081039832429363199\n1081039832429363200 1081057424615407615\n1081057424615407616 1081066220708429823\n1081066220708429824 1081068419731685375\n1081068419731685376 1081069519243313151\n1081069519243313152 1081070068999127039\n1081070068999127040 1081070343877033983\n1081070343877033984 1081070412596510719\n1081070412596510720 1081070446956249087\n1081070446956249088 1081070455546183679\n1081070455546183680 1081070457693667327\n1081070457693667328 1081070458767409151\n1081070458767409152 1081070459304280063\n1081070459304280064 1081070459371388927\n1081070459371388928 1081070459388166143\n1081070459388166144 1081070459390263295\n1081070459390263296 1081070459391311871\n1081070459391311872 1081070459391574015\n1081070459391574016 1081070459391705087\n1081070459391705088 1081070459391707135\n1081070459391707136 1081070459391708159\n1081070459391708160 1081070459391708415\n1081070459391708416 1081070459391708543\n1081070459391708544 1081070459391708607\n1081070459391708608 1081070459391708639\n1081070459391708640 1081070459391708655\n1081070459391708656 1081070459391708659\n1081070459391708660 1081070459391708660\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_13",
                            "returncode": 0,
                            "stdout": "52\n813135255471707232 813135255471707263\n813135255471707264 813135255471707391\n813135255471707392 813135255471707647\n813135255471707648 813135255471708159\n813135255471708160 813135255471710207\n813135255471710208 813135255471718399\n813135255471718400 813135255471783935\n813135255471783936 813135255471915007\n813135255471915008 813135255476109311\n813135255476109312 813135255492886527\n813135255492886528 813135255526440959\n813135255526440960 813135255593549823\n813135255593549824 813135255861985279\n813135255861985280 813135260156952575\n813135260156952576 813135268746887167\n813135268746887168 813135303106625535\n813135303106625536 813135577984532479\n813135577984532480 813136127740346367\n813136127740346368 813137227251974143\n813137227251974144 813146023344996351\n813146023344996352 813181207717085183\n813181207717085184 813462682693795839\n813462682693795840 814025632647217151\n814025632647217152 815151532554059775\n815151532554059776 819655132181430271\n819655132181430272 828662331436171263\n828662331436171264 846676729945653247\n846676729945653248 847802629852495871\n847802629852495872 848084104829206527\n848084104829206528 848154473573384191\n848154473573384192 848172065759428607\n848172065759428608 848174264782684159\n848174264782684160 848174539660591103\n848174539660591104 848174677099544575\n848174677099544576 848174745819021311\n848174745819021312 848174780178759679\n848174780178759680 848174788768694271\n848174788768694272 848174793063661567\n848174793063661568 848174794137403391\n848174794137403392 848174794405838847\n848174794405838848 848174794472947711\n848174794472947712 848174794506502143\n848174794506502144 848174794508599295\n848174794508599296 848174794509647871\n848174794509647872 848174794509713407\n848174794509713408 848174794509729791\n848174794509729792 848174794509733887\n848174794509733888 848174794509734911\n848174794509734912 848174794509735423\n848174794509735424 848174794509735679\n848174794509735680 848174794509735807\n848174794509735808 848174794509735811\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_10",
                            "returncode": 0,
                            "stdout": "110\n504403158265495553 504403158265495553\n504403158265495554 504403158265495555\n504403158265495556 504403158265495559\n504403158265495560 504403158265495567\n504403158265495568 504403158265495583\n504403158265495584 504403158265495615\n504403158265495616 504403158265495679\n504403158265495680 504403158265495807\n504403158265495808 504403158265496063\n504403158265496064 504403158265496575\n504403158265496576 504403158265497599\n504403158265497600 504403158265499647\n504403158265499648 504403158265503743\n504403158265503744 504403158265511935\n504403158265511936 504403158265528319\n504403158265528320 504403158265561087\n504403158265561088 504403158265626623\n504403158265626624 504403158265757695\n504403158265757696 504403158266019839\n504403158266019840 504403158266544127\n504403158266544128 504403158267592703\n504403158267592704 504403158269689855\n504403158269689856 504403158273884159\n504403158273884160 504403158282272767\n504403158282272768 504403158299049983\n504403158299049984 504403158332604415\n504403158332604416 504403158399713279\n504403158399713280 504403158533931007\n504403158533931008 504403158802366463\n504403158802366464 504403159339237375\n504403159339237376 504403160412979199\n504403160412979200 504403162560462847\n504403162560462848 504403166855430143\n504403166855430144 504403175445364735\n504403175445364736 504403192625233919\n504403192625233920 504403226984972287\n504403226984972288 504403295704449023\n504403295704449024 504403433143402495\n504403433143402496 504403708021309439\n504403708021309440 504404257777123327\n504404257777123328 504405357288751103\n504405357288751104 504407556312006655\n504407556312006656 504411954358517759\n504411954358517760 504420750451539967\n504420750451539968 504438342637584383\n504438342637584384 504473527009673215\n504473527009673216 504543895753850879\n504543895753850880 504684633242206207\n504684633242206208 504966108218916863\n504966108218916864 505529058172338175\n505529058172338176 506654958079180799\n506654958079180800 508906757892866047\n508906757892866048 513410357520236543\n513410357520236544 522417556774977535\n522417556774977536 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 567453553048682495\n567453553048682496 571957152676052991\n571957152676052992 574208952489738239\n574208952489738240 575334852396580863\n575334852396580864 575897802350002175\n575897802350002176 576179277326712831\n576179277326712832 576320014815068159\n576320014815068160 576390383559245823\n576390383559245824 576425567931334655\n576425567931334656 576443160117379071\n576443160117379072 576451956210401279\n576451956210401280 576456354256912383\n576456354256912384 576458553280167935\n576458553280167936 576459652791795711\n576459652791795712 576460202547609599\n576460202547609600 576460477425516543\n576460477425516544 576460614864470015\n576460614864470016 576460683583946751\n576460683583946752 576460717943685119\n576460717943685120 576460735123554303\n576460735123554304 576460743713488895\n576460743713488896 576460748008456191\n576460748008456192 576460750155939839\n576460750155939840 576460751229681663\n576460751229681664 576460751766552575\n576460751766552576 576460752034988031\n576460752034988032 576460752169205759\n576460752169205760 576460752236314623\n576460752236314624 576460752269869055\n576460752269869056 576460752286646271\n576460752286646272 576460752295034879\n576460752295034880 576460752299229183\n576460752299229184 576460752301326335\n576460752301326336 576460752302374911\n576460752302374912 576460752302899199\n576460752302899200 576460752303161343\n576460752303161344 576460752303292415\n576460752303292416 576460752303357951\n576460752303357952 576460752303390719\n576460752303390720 576460752303407103\n576460752303407104 576460752303415295\n576460752303415296 576460752303419391\n576460752303419392 576460752303421439\n576460752303421440 576460752303422463\n576460752303422464 576460752303422975\n576460752303422976 576460752303423231\n576460752303423232 576460752303423359\n576460752303423360 576460752303423423\n576460752303423424 576460752303423455\n576460752303423456 576460752303423471\n576460752303423472 576460752303423479\n576460752303423480 576460752303423483\n576460752303423484 576460752303423485\n576460752303423486 576460752303423486\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_02",
                            "returncode": 0,
                            "stdout": "25\n432344644764301224 432344644764301231\n432344644764301232 432344644764301247\n432344644764301248 432344644764301311\n432344644764301312 432344644764303359\n432344644764303360 432344644764827647\n432344644764827648 432344644769021951\n432344644769021952 432344644836130815\n432344644836130816 432344645104566271\n432344645104566272 432344653694500863\n432344653694500864 432344670874370047\n432344670874370048 432344739593846783\n432344739593846784 432345014471753727\n432345014471753728 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 540431955284459519\n540431955284459520 558446353793941503\n558446353793941504 558448552817197055\n558448552817197056 558448827695103999\n558448827695104000 558448896414580735\n558448896414580736 558448896683016191\n558448896683016192 558448896716570623\n558448896716570624 558448896716832767\n558448896716832768 558448896716849151\n558448896716849152 558448896716853247\n558448896716853248 558448896716855295\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": 0,
                            "stdout": "5\n3 3\n4 7\n8 15\n16 17\n18 18\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_23",
                            "returncode": 0,
                            "stdout": "60\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_29",
                            "returncode": 0,
                            "stdout": "2\n1 1\n2 2\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_24",
                            "returncode": 0,
                            "stdout": "118\n1 1\n2 3\n4 7\n8 15\n16 31\n32 63\n64 127\n128 255\n256 511\n512 1023\n1024 2047\n2048 4095\n4096 8191\n8192 16383\n16384 32767\n32768 65535\n65536 131071\n131072 262143\n262144 524287\n524288 1048575\n1048576 2097151\n2097152 4194303\n4194304 8388607\n8388608 16777215\n16777216 33554431\n33554432 67108863\n67108864 134217727\n134217728 268435455\n268435456 536870911\n536870912 1073741823\n1073741824 2147483647\n2147483648 4294967295\n4294967296 8589934591\n8589934592 17179869183\n17179869184 34359738367\n34359738368 68719476735\n68719476736 137438953471\n137438953472 274877906943\n274877906944 549755813887\n549755813888 1099511627775\n1099511627776 2199023255551\n2199023255552 4398046511103\n4398046511104 8796093022207\n8796093022208 17592186044415\n17592186044416 35184372088831\n35184372088832 70368744177663\n70368744177664 140737488355327\n140737488355328 281474976710655\n281474976710656 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_28",
                            "returncode": 0,
                            "stdout": "1\n1 1\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_26",
                            "returncode": 0,
                            "stdout": "1\n576460752303423488 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_22",
                            "returncode": 0,
                            "stdout": "60\n0 576460752303423487\n576460752303423488 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1080863910568919039\n1080863910568919040 1116892707587883007\n1116892707587883008 1134907106097364991\n1134907106097364992 1143914305352105983\n1143914305352105984 1148417904979476479\n1148417904979476480 1150669704793161727\n1150669704793161728 1151795604700004351\n1151795604700004352 1152358554653425663\n1152358554653425664 1152640029630136319\n1152640029630136320 1152780767118491647\n1152780767118491648 1152851135862669311\n1152851135862669312 1152886320234758143\n1152886320234758144 1152903912420802559\n1152903912420802560 1152912708513824767\n1152912708513824768 1152917106560335871\n1152917106560335872 1152919305583591423\n1152919305583591424 1152920405095219199\n1152920405095219200 1152920954851033087\n1152920954851033088 1152921229728940031\n1152921229728940032 1152921367167893503\n1152921367167893504 1152921435887370239\n1152921435887370240 1152921470247108607\n1152921470247108608 1152921487426977791\n1152921487426977792 1152921496016912383\n1152921496016912384 1152921500311879679\n1152921500311879680 1152921502459363327\n1152921502459363328 1152921503533105151\n1152921503533105152 1152921504069976063\n1152921504069976064 1152921504338411519\n1152921504338411520 1152921504472629247\n1152921504472629248 1152921504539738111\n1152921504539738112 1152921504573292543\n1152921504573292544 1152921504590069759\n1152921504590069760 1152921504598458367\n1152921504598458368 1152921504602652671\n1152921504602652672 1152921504604749823\n1152921504604749824 1152921504605798399\n1152921504605798400 1152921504606322687\n1152921504606322688 1152921504606584831\n1152921504606584832 1152921504606715903\n1152921504606715904 1152921504606781439\n1152921504606781440 1152921504606814207\n1152921504606814208 1152921504606830591\n1152921504606830592 1152921504606838783\n1152921504606838784 1152921504606842879\n1152921504606842880 1152921504606844927\n1152921504606844928 1152921504606845951\n1152921504606845952 1152921504606846463\n1152921504606846464 1152921504606846719\n1152921504606846720 1152921504606846847\n1152921504606846848 1152921504606846911\n1152921504606846912 1152921504606846943\n1152921504606846944 1152921504606846959\n1152921504606846960 1152921504606846967\n1152921504606846968 1152921504606846971\n1152921504606846972 1152921504606846973\n1152921504606846974 1152921504606846974\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_08",
                            "returncode": 0,
                            "stdout": "87\n432486315808860234 432486315808860235\n432486315808860236 432486315808860239\n432486315808860240 432486315808860255\n432486315808860256 432486315808860287\n432486315808860288 432486315808860415\n432486315808860416 432486315808860671\n432486315808860672 432486315808861183\n432486315808861184 432486315808862207\n432486315808862208 432486315808866303\n432486315808866304 432486315808882687\n432486315808882688 432486315808915455\n432486315808915456 432486315809046527\n432486315809046528 432486315809308671\n432486315809308672 432486315809832959\n432486315809832960 432486315810881535\n432486315810881536 432486315812978687\n432486315812978688 432486315817172991\n432486315817172992 432486315825561599\n432486315825561600 432486315842338815\n432486315842338816 432486315875893247\n432486315875893248 432486315943002111\n432486315943002112 432486316211437567\n432486316211437568 432486316748308479\n432486316748308480 432486318895792127\n432486318895792128 432486336075661311\n432486336075661312 432486370435399679\n432486370435399680 432486439154876415\n432486439154876416 432486576593829887\n432486576593829888 432486851471736831\n432486851471736832 432487401227550719\n432487401227550720 432488500739178495\n432488500739178496 432490699762434047\n432490699762434048 432495097808945151\n432495097808945152 432503893901967359\n432503893901967360 432521486088011775\n432521486088011776 432556670460100607\n432556670460100608 432627039204278271\n432627039204278272 432908514180988927\n432908514180988928 433471464134410239\n433471464134410240 434597364041252863\n434597364041252864 436849163854938111\n436849163854938112 441352763482308607\n441352763482308608 450359962737049599\n450359962737049600 468374361246531583\n468374361246531584 504403158265495551\n504403158265495552 522417556774977535\n522417556774977536 526921156402348031\n526921156402348032 529172956216033279\n529172956216033280 530298856122875903\n530298856122875904 530861806076297215\n530861806076297216 531143281053007871\n531143281053007872 531284018541363199\n531284018541363200 531354387285540863\n531354387285540864 531389571657629695\n531389571657629696 531407163843674111\n531407163843674112 531415959936696319\n531415959936696320 531420357983207423\n531420357983207424 531422557006462975\n531422557006462976 531423106762276863\n531423106762276864 531423381640183807\n531423381640183808 531423450359660543\n531423450359660544 531423467539529727\n531423467539529728 531423469687013375\n531423469687013376 531423470760755199\n531423470760755200 531423471297626111\n531423471297626112 531423471431843839\n531423471431843840 531423471498952703\n531423471498952704 531423471532507135\n531423471532507136 531423471549284351\n531423471549284352 531423471557672959\n531423471557672960 531423471561867263\n531423471561867264 531423471563964415\n531423471563964416 531423471564226559\n531423471564226560 531423471564357631\n531423471564357632 531423471564390399\n531423471564390400 531423471564398591\n531423471564398592 531423471564400639\n531423471564400640 531423471564401663\n531423471564401664 531423471564402175\n531423471564402176 531423471564402431\n531423471564402432 531423471564402559\n531423471564402560 531423471564402623\n531423471564402624 531423471564402655\n531423471564402656 531423471564402663\n531423471564402664 531423471564402667\n531423471564402668 531423471564402669\n531423471564402670 531423471564402670\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_06",
                            "returncode": 0,
                            "stdout": "63\n11801128058619141 11801128058619141\n11801128058619142 11801128058619143\n11801128058619144 11801128058619151\n11801128058619152 11801128058619167\n11801128058619168 11801128058619199\n11801128058619200 11801128058619263\n11801128058619264 11801128058619391\n11801128058619392 11801128058619903\n11801128058619904 11801128058621951\n11801128058621952 11801128058626047\n11801128058626048 11801128058634239\n11801128058634240 11801128058650623\n11801128058650624 11801128058683391\n11801128058683392 11801128058748927\n11801128058748928 11801128059011071\n11801128059011072 11801128059535359\n11801128059535360 11801128060583935\n11801128060583936 11801128094138367\n11801128094138368 11801129167880191\n11801129167880192 11801131315363839\n11801131315363840 11801135610331135\n11801135610331136 11801144200265727\n11801144200265728 11801161380134911\n11801161380134912 11801195739873279\n11801195739873280 11801333178826751\n11801333178826752 11801608056733695\n11801608056733696 11802157812547583\n11802157812547584 11804356835803135\n11804356835803136 11821949021847551\n11821949021847552 12384898975268863\n12384898975268864 13510798882111487\n13510798882111488 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 477381560501272575\n477381560501272576 481885160128643071\n481885160128643072 484136959942328319\n484136959942328320 484418434919038975\n484418434919038976 484488803663216639\n484488803663216640 484491002686472191\n484491002686472192 484492102198099967\n484492102198099968 484492651953913855\n484492651953913856 484492789392867327\n484492789392867328 484492858112344063\n484492858112344064 484492892472082431\n484492892472082432 484492909651951615\n484492909651951616 484492910725693439\n484492910725693440 484492910859911167\n484492910859911168 484492910927020031\n484492910927020032 484492910960574463\n484492910960574464 484492910964768767\n484492910964768768 484492910965817343\n484492910965817344 484492910965818367\n484492910965818368 484492910965818623\n484492910965818624 484492910965818687\n484492910965818688 484492910965818719\n484492910965818720 484492910965818727\n484492910965818728 484492910965818729\n484492910965818730 484492910965818730\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_07",
                            "returncode": 0,
                            "stdout": "85\n282183781417523 282183781417523\n282183781417524 282183781417527\n282183781417528 282183781417535\n282183781417536 282183781417599\n282183781417600 282183781417727\n282183781417728 282183781417983\n282183781417984 282183781419007\n282183781419008 282183781421055\n282183781421056 282183781425151\n282183781425152 282183781433343\n282183781433344 282183781449727\n282183781449728 282183781580799\n282183781580800 282183782629375\n282183782629376 282183784726527\n282183784726528 282183788920831\n282183788920832 282183797309439\n282183797309440 282183814086655\n282183814086656 282183847641087\n282183847641088 282183914749951\n282183914749952 282184183185407\n282184183185408 282184720056319\n282184720056320 282185793798143\n282185793798144 282187941281791\n282187941281792 282196531216383\n282196531216384 282230890954751\n282230890954752 282299610431487\n282299610431488 282574488338431\n282574488338432 283673999966207\n283673999966208 285873023221759\n285873023221760 290271069732863\n290271069732864 299067162755071\n299067162755072 316659348799487\n316659348799488 351843720888319\n351843720888320 422212465065983\n422212465065984 562949953421311\n562949953421312 1125899906842623\n1125899906842624 2251799813685247\n2251799813685248 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 18014398509481983\n18014398509481984 36028797018963967\n36028797018963968 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 270215977642229759\n270215977642229760 279223176896970751\n279223176896970752 283726776524341247\n283726776524341248 285978576338026495\n285978576338026496 286541526291447807\n286541526291447808 286611895035625471\n286611895035625472 286647079407714303\n286647079407714304 286664671593758719\n286664671593758720 286673467686780927\n286673467686780928 286677865733292031\n286677865733292032 286680064756547583\n286680064756547584 286681164268175359\n286681164268175360 286681714023989247\n286681714023989248 286681988901896191\n286681988901896192 286682126340849663\n286682126340849664 286682195060326399\n286682195060326400 286682229420064767\n286682229420064768 286682246599933951\n286682246599933952 286682250894901247\n286682250894901248 286682251968643071\n286682251968643072 286682252505513983\n286682252505513984 286682252773949439\n286682252773949440 286682252908167167\n286682252908167168 286682252975276031\n286682252975276032 286682253008830463\n286682253008830464 286682253017219071\n286682253017219072 286682253019316223\n286682253019316224 286682253020364799\n286682253020364800 286682253020889087\n286682253020889088 286682253020954623\n286682253020954624 286682253020987391\n286682253020987392 286682253021003775\n286682253021003776 286682253021011967\n286682253021011968 286682253021016063\n286682253021016064 286682253021018111\n286682253021018112 286682253021019135\n286682253021019136 286682253021019647\n286682253021019648 286682253021019775\n286682253021019776 286682253021019779\n286682253021019780 286682253021019780\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_03",
                            "returncode": 0,
                            "stdout": "28\n144106357446602451 144106357446602451\n144106357446602452 144106357446602455\n144106357446602456 144106357446602463\n144106357446602464 144106357446602495\n144106357446602496 144106357446602751\n144106357446602752 144106357446606847\n144106357446606848 144106357446672383\n144106357446672384 144106357446934527\n144106357446934528 144106357455323135\n144106357455323136 144106357488877567\n144106357488877568 144106357623095295\n144106357623095296 144106391982833663\n144106391982833664 144115188075855871\n144115188075855872 216172782113783807\n216172782113783808 252201579132747775\n252201579132747776 261208778387488767\n261208778387488768 261771728340910079\n261771728340910080 261789320526954495\n261789320526954496 261791519550210047\n261791519550210048 261791588269686783\n261791588269686784 261791622629425151\n261791622629425152 261791639809294335\n261791639809294336 261791641956777983\n261791641956777984 261791642225213439\n261791642225213440 261791642225344511\n261791642225344512 261791642225410047\n261791642225410048 261791642225414143\n261791642225414144 261791642225414175\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_21",
                            "returncode": 0,
                            "stdout": "1\n0 1152921504606846975\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_04",
                            "returncode": 0,
                            "stdout": "41\n360198504640541332 360198504640541335\n360198504640541336 360198504640541343\n360198504640541344 360198504640541375\n360198504640541376 360198504640541439\n360198504640541440 360198504640541695\n360198504640541696 360198504640542719\n360198504640542720 360198504640544767\n360198504640544768 360198504640675839\n360198504640675840 360198504640937983\n360198504640937984 360198504645132287\n360198504645132288 360198504678686719\n360198504678686720 360198504947122175\n360198504947122176 360198506020863999\n360198506020864000 360198514610798591\n360198514610798592 360198531790667775\n360198531790667776 360198566150406143\n360198566150406144 360198634869882879\n360198634869882880 360198909747789823\n360198909747789824 360200009259417599\n360200009259417600 360217601445462015\n360217601445462016 360287970189639679\n360287970189639680 432345564227567615\n432345564227567616 504403158265495551\n504403158265495552 504966108218916863\n504966108218916864 505247583195627519\n505247583195627520 505256379288649727\n505256379288649728 505257478800277503\n505257478800277504 505258028556091391\n505258028556091392 505258032851058687\n505258032851058688 505258033387929599\n505258033387929600 505258033455038463\n505258033455038464 505258033488592895\n505258033488592896 505258033496981503\n505258033496981504 505258033499078655\n505258033499078656 505258033500127231\n505258033500127232 505258033500651519\n505258033500651520 505258033500667903\n505258033500667904 505258033500676095\n505258033500676096 505258033500676607\n505258033500676608 505258033500676863\n505258033500676864 505258033500676865\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_05",
                            "returncode": 0,
                            "stdout": "55\n170125114320639076 170125114320639079\n170125114320639080 170125114320639087\n170125114320639088 170125114320639103\n170125114320639104 170125114320639231\n170125114320639232 170125114320639487\n170125114320639488 170125114320639999\n170125114320640000 170125114320642047\n170125114320642048 170125114320650239\n170125114320650240 170125114320683007\n170125114320683008 170125114320748543\n170125114320748544 170125114320879615\n170125114320879616 170125114321403903\n170125114321403904 170125114329792511\n170125114329792512 170125114346569727\n170125114346569728 170125114883440639\n170125114883440640 170125132063309823\n170125132063309824 170125166423048191\n170125166423048192 170125235142524927\n170125235142524928 170134031235547135\n170134031235547136 170151623421591551\n170151623421591552 170292360909946879\n170292360909946880 170573835886657535\n170573835886657536 171136785840078847\n171136785840078848 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 202661983231672319\n202661983231672320 203787883138514943\n203787883138514944 204350833091936255\n204350833091936256 204632308068646911\n204632308068646912 204634507091902463\n204634507091902464 204635606603530239\n204635606603530240 204635881481437183\n204635881481437184 204636018920390655\n204636018920390656 204636027510325247\n204636027510325248 204636029657808895\n204636029657808896 204636030731550719\n204636030731550720 204636031268421631\n204636031268421632 204636031536857087\n204636031536857088 204636031671074815\n204636031671074816 204636031704629247\n204636031704629248 204636031721406463\n204636031721406464 204636031729795071\n204636031729795072 204636031731892223\n204636031731892224 204636031732940799\n204636031732940800 204636031733465087\n204636031733465088 204636031733727231\n204636031733727232 204636031733858303\n204636031733858304 204636031733923839\n204636031733923840 204636031733956607\n204636031733956608 204636031733972991\n204636031733972992 204636031733975039\n204636031733975040 204636031733976063\n204636031733976064 204636031733976575\n204636031733976576 204636031733976831\n204636031733976832 204636031733976847\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_12",
                            "returncode": 0,
                            "stdout": "54\n271518219607274605 271518219607274605\n271518219607274606 271518219607274607\n271518219607274608 271518219607274623\n271518219607274624 271518219607274751\n271518219607274752 271518219607275007\n271518219607275008 271518219607275519\n271518219607275520 271518219607277567\n271518219607277568 271518219607343103\n271518219607343104 271518219607474175\n271518219607474176 271518219611668479\n271518219611668480 271518219645222911\n271518219645222912 271518219779440639\n271518219779440640 271518220316311551\n271518220316311552 271518228906246143\n271518228906246144 271518246086115327\n271518246086115328 271518280445853695\n271518280445853696 271518349165330431\n271518349165330432 271518898921144319\n271518898921144320 271519998432772095\n271519998432772096 271522197456027647\n271522197456027648 271526595502538751\n271526595502538752 271535391595560959\n271535391595560960 271552983781605375\n271552983781605376 271623352525783039\n271623352525783040 271904827502493695\n271904827502493696 272467777455915007\n272467777455915008 274719577269600255\n274719577269600256 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 432345564227567615\n432345564227567616 468374361246531583\n468374361246531584 486388759756013567\n486388759756013568 490892359383384063\n490892359383384064 493144159197069311\n493144159197069312 493425634173779967\n493425634173779968 493496002917957631\n493496002917957632 493513595104002047\n493513595104002048 493515794127257599\n493515794127257600 493515931566211071\n493515931566211072 493515932639952895\n493515932639952896 493515933176823807\n493515933176823808 493515933311041535\n493515933311041536 493515933378150399\n493515933378150400 493515933394927615\n493515933394927616 493515933403316223\n493515933403316224 493515933404364799\n493515933404364800 493515933404430335\n493515933404430336 493515933404463103\n493515933404463104 493515933404467199\n493515933404467200 493515933404467263\n493515933404467264 493515933404467279\n493515933404467280 493515933404467287\n493515933404467288 493515933404467291\n493515933404467292 493515933404467292\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_15",
                            "returncode": 0,
                            "stdout": "48\n123989531008007376 123989531008007391\n123989531008007392 123989531008007423\n123989531008007424 123989531008007679\n123989531008007680 123989531008008191\n123989531008008192 123989531008040959\n123989531008040960 123989531008172031\n123989531008172032 123989531008434175\n123989531008434176 123989531010531327\n123989531010531328 123989531014725631\n123989531014725632 123989531283161087\n123989531283161088 123989531820031999\n123989531820032000 123989533967515647\n123989533967515648 123989538262482943\n123989538262482944 123989555442352127\n123989555442352128 123989589802090495\n123989589802090496 123989727241043967\n123989727241043968 124130464729399295\n124130464729399296 124411939706109951\n124411939706109952 124974889659531263\n124974889659531264 126100789566373887\n126100789566373888 144115188075855871\n144115188075855872 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 794885334230892543\n794885334230892544 795448284184313855\n795448284184313856 795518652928491519\n795518652928491520 795527449021513727\n795527449021513728 795527723899420671\n795527723899420672 795527861338374143\n795527861338374144 795527930057850879\n795527930057850880 795527938647785471\n795527938647785472 795527940795269119\n795527940795269120 795527941063704575\n795527941063704576 795527941130813439\n795527941130813440 795527941164367871\n795527941164367872 795527941166465023\n795527941166465024 795527941167513599\n795527941167513600 795527941168037887\n795527941168037888 795527941168070655\n795527941168070656 795527941168087039\n795527941168087040 795527941168095231\n795527941168095232 795527941168099327\n795527941168099328 795527941168099839\n795527941168099840 795527941168099967\n795527941168099968 795527941168099983\n795527941168099984 795527941168099987\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_01",
                            "returncode": 0,
                            "stdout": "4\n288054454257713152 288054454291267583\n288054454291267584 288089638663356415\n288089638663356416 288230376151711743\n288230376151711744 288230376160100351\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_16",
                            "returncode": 0,
                            "stdout": "57\n395279993370173227 395279993370173227\n395279993370173228 395279993370173231\n395279993370173232 395279993370173247\n395279993370173248 395279993370173311\n395279993370173312 395279993370173439\n395279993370173440 395279993370181631\n395279993370181632 395279993370312703\n395279993370312704 395279993370836991\n395279993370836992 395279993371885567\n395279993371885568 395279993376079871\n395279993376079872 395279993510297599\n395279993510297600 395279993778733055\n395279993778733056 395279994315603967\n395279994315603968 395279996463087615\n395279996463087616 395280065182564351\n395280065182564352 395280202621517823\n395280202621517824 395280477499424767\n395280477499424768 395281027255238655\n395281027255238656 395283226278494207\n395283226278494208 395287624325005311\n395287624325005312 395296420418027519\n395296420418027520 395331604790116351\n395331604790116352 395472342278471679\n395472342278471680 395753817255182335\n395753817255182336 396316767208603647\n396316767208603648 432345564227567615\n432345564227567616 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 729583139634020351\n729583139634020352 734086739261390847\n734086739261390848 736338539075076095\n736338539075076096 737464438981918719\n737464438981918720 737745913958629375\n737745913958629376 737816282702807039\n737816282702807040 737851467074895871\n737851467074895872 737869059260940287\n737869059260940288 737873457307451391\n737873457307451392 737875656330706943\n737875656330706944 737876755842334719\n737876755842334720 737876773022203903\n737876773022203904 737876777317171199\n737876777317171200 737876777854042111\n737876777854042112 737876777988259839\n737876777988259840 737876778055368703\n737876778055368704 737876778088923135\n737876778088923136 737876778091020287\n737876778091020288 737876778092068863\n737876778092068864 737876778092331007\n737876778092331008 737876778092363775\n737876778092363776 737876778092380159\n737876778092380160 737876778092388351\n737876778092388352 737876778092390399\n737876778092390400 737876778092391423\n737876778092391424 737876778092391935\n737876778092391936 737876778092392191\n737876778092392192 737876778092392195\n737876778092392196 737876778092392197\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_03",
                            "returncode": 0,
                            "stdout": "8\n3940649673945088 3940649673949183\n3940649673949184 4503599627370495\n4503599627370496 9007199254740991\n9007199254740992 11258999068426239\n11258999068426240 11540474045136895\n11540474045136896 11549270138159103\n11549270138159104 11549545016066047\n11549545016066048 11549545024454655\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_18",
                            "returncode": 0,
                            "stdout": "61\n61398917963652103 61398917963652103\n61398917963652104 61398917963652111\n61398917963652112 61398917963652127\n61398917963652128 61398917963652159\n61398917963652160 61398917963652223\n61398917963652224 61398917963652351\n61398917963652352 61398917963652607\n61398917963652608 61398917963653119\n61398917963653120 61398917963661311\n61398917963661312 61398917963677695\n61398917963677696 61398917963710463\n61398917963710464 61398917963841535\n61398917963841536 61398917964103679\n61398917964103680 61398917964627967\n61398917964627968 61398917966725119\n61398917966725120 61398917983502335\n61398917983502336 61398918117720063\n61398918117720064 61398918654590975\n61398918654590976 61398919728332799\n61398919728332800 61398928318267391\n61398928318267392 61401127341522943\n61401127341522944 61405525388034047\n61405525388034048 61414321481056255\n61414321481056256 61431913667100671\n61431913667100672 61502282411278335\n61502282411278336 61643019899633663\n61643019899633664 61924494876344319\n61924494876344320 63050394783186943\n63050394783186944 72057594037927935\n72057594037927936 144115188075855871\n144115188075855872 180143985094819839\n180143985094819840 198158383604301823\n198158383604301824 198721333557723135\n198721333557723136 199002808534433791\n199002808534433792 199143546022789119\n199143546022789120 199213914766966783\n199213914766966784 199249099139055615\n199249099139055616 199253497185566719\n199253497185566720 199255696208822271\n199255696208822272 199256795720450047\n199256795720450048 199257345476263935\n199257345476263936 199257414195740671\n199257414195740672 199257448555479039\n199257448555479040 199257465735348223\n199257465735348224 199257470030315519\n199257470030315520 199257470298750975\n199257470298750976 199257470432968703\n199257470432968704 199257470466523135\n199257470466523136 199257470468620287\n199257470468620288 199257470469668863\n199257470469668864 199257470470193151\n199257470470193152 199257470470455295\n199257470470455296 199257470470586367\n199257470470586368 199257470470594559\n199257470470594560 199257470470596607\n199257470470596608 199257470470596863\n199257470470596864 199257470470596991\n199257470470596992 199257470470597055\n199257470470597056 199257470470597071\n199257470470597072 199257470470597075\n199257470470597076 199257470470597077\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_02",
                            "returncode": 0,
                            "stdout": "1\n0 1023\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_14",
                            "returncode": 0,
                            "stdout": "51\n860329287908420023 860329287908420023\n860329287908420024 860329287908420031\n860329287908420032 860329287908420095\n860329287908420096 860329287908420607\n860329287908420608 860329287908421631\n860329287908421632 860329287908425727\n860329287908425728 860329287908458495\n860329287908458496 860329287908589567\n860329287908589568 860329287909113855\n860329287909113856 860329287910162431\n860329287910162432 860329287914356735\n860329287914356736 860329287981465599\n860329287981465600 860329288518336511\n860329288518336512 860329297108271103\n860329297108271104 860329365827747839\n860329365827747840 860330465339375615\n860330465339375616 860332664362631167\n860332664362631168 860337062409142271\n860337062409142272 860345858502164479\n860345858502164480 860363450688208895\n860363450688208896 860398635060297727\n860398635060297728 860469003804475391\n860469003804475392 860750478781186047\n860750478781186048 861313428734607359\n861313428734607360 862439328641449983\n862439328641449984 864691128455135231\n864691128455135232 1008806316530991103\n1008806316530991104 1044835113549955071\n1044835113549955072 1062849512059437055\n1062849512059437056 1067353111686807551\n1067353111686807552 1067916061640228863\n1067916061640228864 1068056799128584191\n1068056799128584192 1068127167872761855\n1068127167872761856 1068162352244850687\n1068162352244850688 1068166750291361791\n1068166750291361792 1068167025169268735\n1068167025169268736 1068167042349137919\n1068167042349137920 1068167042382692351\n1068167042382692352 1068167042391080959\n1068167042391080960 1068167042392129535\n1068167042392129536 1068167042392653823\n1068167042392653824 1068167042392784895\n1068167042392784896 1068167042392850431\n1068167042392850432 1068167042392883199\n1068167042392883200 1068167042392899583\n1068167042392899584 1068167042392901631\n1068167042392901632 1068167042392902655\n1068167042392902656 1068167042392903167\n1068167042392903168 1068167042392903231\n1068167042392903232 1068167042392903247\n1068167042392903248 1068167042392903249\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_test_19",
                            "returncode": 0,
                            "stdout": "67\n278964037634255119 278964037634255119\n278964037634255120 278964037634255135\n278964037634255136 278964037634255167\n278964037634255168 278964037634255231\n278964037634255232 278964037634255359\n278964037634255360 278964037634255871\n278964037634255872 278964037634256895\n278964037634256896 278964037634260991\n278964037634260992 278964037634293759\n278964037634293760 278964037634359295\n278964037634359296 278964037634490367\n278964037634490368 278964037635538943\n278964037635538944 278964037637636095\n278964037637636096 278964037646024703\n278964037646024704 278964037662801919\n278964037662801920 278964037696356351\n278964037696356352 278964037763465215\n278964037763465216 278964037897682943\n278964037897682944 278964040045166591\n278964040045166592 278964044340133887\n278964044340133888 278964052930068479\n278964052930068480 278964070109937663\n278964070109937664 278964104469676031\n278964104469676032 278964241908629503\n278964241908629504 278964791664443391\n278964791664443392 278965891176071167\n278965891176071168 278968090199326719\n278968090199326720 278976886292348927\n278976886292348928 279012070664437759\n279012070664437760 279082439408615423\n279082439408615424 279223176896970751\n279223176896970752 288230376151711743\n288230376151711744 576460752303423487\n576460752303423488 720575940379279359\n720575940379279360 792633534417207295\n792633534417207296 828662331436171263\n828662331436171264 833165931063541759\n833165931063541760 835417730877227007\n835417730877227008 836543630784069631\n836543630784069632 836825105760780287\n836825105760780288 836860290132869119\n836860290132869120 836877882318913535\n836877882318913536 836882280365424639\n836882280365424640 836884479388680191\n836884479388680192 836884616827633663\n836884616827633664 836884651187372031\n836884651187372032 836884668367241215\n836884668367241216 836884670514724863\n836884670514724864 836884671588466687\n836884671588466688 836884672125337599\n836884672125337600 836884672158892031\n836884672158892032 836884672175669247\n836884672175669248 836884672179863551\n836884672179863552 836884672180912127\n836884672180912128 836884672181436415\n836884672181436416 836884672181567487\n836884672181567488 836884672181583871\n836884672181583872 836884672181592063\n836884672181592064 836884672181596159\n836884672181596160 836884672181598207\n836884672181598208 836884672181598463\n836884672181598464 836884672181598591\n836884672181598592 836884672181598623\n836884672181598624 836884672181598639\n836884672181598640 836884672181598647\n836884672181598648 836884672181598649\n836884672181598650 836884672181598650\n",
                            "stderr": ""
                        }
                    ]
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": 0,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_test_11",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_27",
                            "returncode": 1,
                            "stdout": "1\n",
                            "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:458)\n\tat Main.main(Main.java:27)\n"
                        },
                        {
                            "case_name": "01_test_09",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_20",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_25",
                            "returncode": 1,
                            "stdout": "1\n",
                            "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:458)\n\tat Main.main(Main.java:27)\n"
                        },
                        {
                            "case_name": "01_test_17",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_13",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_10",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_02",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": 1,
                            "stdout": "4\n",
                            "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:458)\n\tat Main.main(Main.java:27)\n"
                        },
                        {
                            "case_name": "01_test_23",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_29",
                            "returncode": 1,
                            "stdout": "1\n",
                            "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:458)\n\tat Main.main(Main.java:27)\n"
                        },
                        {
                            "case_name": "01_test_24",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_28",
                            "returncode": 1,
                            "stdout": "1\n",
                            "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:458)\n\tat Main.main(Main.java:27)\n"
                        },
                        {
                            "case_name": "01_test_26",
                            "returncode": 1,
                            "stdout": "1\n",
                            "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:458)\n\tat Main.main(Main.java:27)\n"
                        },
                        {
                            "case_name": "01_test_22",
                            "returncode": 1,
                            "stdout": "1\n",
                            "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:458)\n\tat Main.main(Main.java:27)\n"
                        },
                        {
                            "case_name": "01_test_08",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_06",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_07",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_03",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_21",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_04",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_05",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_12",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_15",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_01",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_16",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "00_sample_03",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_18",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "00_sample_02",
                            "returncode": 1,
                            "stdout": "1\n",
                            "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:458)\n\tat Main.main(Main.java:27)\n"
                        },
                        {
                            "case_name": "01_test_14",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        },
                        {
                            "case_name": "01_test_19",
                            "returncode": -1,
                            "stdout": null,
                            "stderr": "Timeout"
                        }
                    ]
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            }
        },
        "prompt_apr_5": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            }
        },
        "prompt_apr_6": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": -1,
                    "so": null,
                    "se": "Timeout"
                }
            }
        }
    }
}