
================== buggy_file ==================
src/com/google/javascript/jscomp/TypedScopeCreator.java
================== buggy_method ==================
{'method_name': 'defineObjectLiteral', 'method_body': 'private void defineObjectLiteral(Node objectLit) {\n      // Handle the @lends annotation.\n      JSType type = null;\n      JSDocInfo info = objectLit.getJSDocInfo();\n      if (info != null &&\n          info.getLendsName() != null) {\n        String lendsName = info.getLendsName();\n        Var lendsVar = scope.getVar(lendsName);\n        if (lendsVar == null) {\n          compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n        } else {\n          type = lendsVar.getType();\n          if (type == null) {\n            type = typeRegistry.getNativeType(UNKNOWN_TYPE);\n          }\n          if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n            compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));\n            type = null;\n          } else {\n            objectLit.setJSType(type);\n          }\n        }\n      }\n\n      info = NodeUtil.getBestJSDocInfo(objectLit);\n      Node lValue = NodeUtil.getBestLValue(objectLit);\n      String lValueName = NodeUtil.getBestLValueName(lValue);\n      boolean createdEnumType = false;\n      if (info != null && info.hasEnumParameterType()) {\n        type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);\n        createdEnumType = true;\n      }\n\n      if (type == null) {\n        type = typeRegistry.createAnonymousObjectType();\n      }\n\n      setDeferredType(objectLit, type);\n\n      // If this is an enum, the properties were already taken care of above.\n      processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);\n    }', 'start_line': 588, 'end_line': 633, 'buggy_lines': [595, 597]}
================== buggy_method_src ==================
private void defineObjectLiteral(Node objectLit) {
      // Handle the @lends annotation.
      JSType type = null;
      JSDocInfo info = objectLit.getJSDocInfo();
      if (info != null &&
          info.getLendsName() != null) {
        String lendsName = info.getLendsName();
        Var lendsVar = scope.getVar(lendsName);
        if (lendsVar == null) {
          compiler.report(
              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));
        } else {
          type = lendsVar.getType();
          if (type == null) {
            type = typeRegistry.getNativeType(UNKNOWN_TYPE);
          }
          if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {
            compiler.report(
                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,
                    lendsName, type.toString()));
            type = null;
          } else {
            objectLit.setJSType(type);
          }
        }
      }

      info = NodeUtil.getBestJSDocInfo(objectLit);
      Node lValue = NodeUtil.getBestLValue(objectLit);
      String lValueName = NodeUtil.getBestLValueName(lValue);
      boolean createdEnumType = false;
      if (info != null && info.hasEnumParameterType()) {
        type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);
        createdEnumType = true;
      }

      if (type == null) {
        type = typeRegistry.createAnonymousObjectType();
      }

      setDeferredType(objectLit, type);

      // If this is an enum, the properties were already taken care of above.
      processObjectLitProperties(
          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);
    }
================== test_stack ==================
com.google.javascript.jscomp.TypeCheckTest::testLends10
junit.framework.ComparisonFailure: expected:<[inconsistent return type
found   : number
required: string]> but was:<[Variable Foo.prototype not declared before @lends annotation.]>
	at junit.framework.Assert.assertEquals(Assert.java:100)
	at junit.framework.Assert.assertEquals(Assert.java:107)
	at junit.framework.TestCase.assertEquals(TestCase.java:269)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9511)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9490)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9428)
	at com.google.javascript.jscomp.TypeCheckTest.testLends10(TypeCheckTest.java:8781)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)
com.google.javascript.jscomp.TypeCheckTest::testLends11
junit.framework.ComparisonFailure: expected:<[inconsistent return type
found   : number
required: string]> but was:<[Variable SubFoo.prototype not declared before @lends annotation.]>
	at junit.framework.Assert.assertEquals(Assert.java:100)
	at junit.framework.Assert.assertEquals(Assert.java:107)
	at junit.framework.TestCase.assertEquals(TestCase.java:269)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9511)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9490)
	at com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9428)
	at com.google.javascript.jscomp.TypeCheckTest.testLends11(TypeCheckTest.java:8793)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

================== test_assert ==================
testTypes(

================== buggy_lines_in_method ==================
[8, 10]
================== buggy_statements ==================
['        Var lendsVar = scope.getVar(lendsName);', '          compiler.report(']
================== buggy_method_src_endswith_buggy_statement ==================
private void defineObjectLiteral(Node objectLit) {
      // Handle the @lends annotation.
      JSType type = null;
      JSDocInfo info = objectLit.getJSDocInfo();
      if (info != null &&
          info.getLendsName() != null) {
        String lendsName = info.getLendsName();
        Var lendsVar = scope.getVar(lendsName);
        if (lendsVar == null) {
          compiler.report(