
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'main', 'method_body': 'public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        int n = scan.nextInt();\n        int k = scan.nextInt();\n\n        int[] p = new int[n+1];\n        TreeSet<Integer> pSet = new TreeSet<Integer>();\n\n        for (int i = 0; i < n; i++) {\n        \tp[scan.nextInt()] = i;\n\t\t}\n\t\tscan.close();\n\n        for (int i = 1; i < k; i++) {\n        \tpSet.add(p[i]);\n\t\t}\n\t\t\n\t\tint ans = n;\n\t\t\n\t\tfor (int j = 1; j <= n-k+1; j++) {\n\t\t\tpSet.add( p[j+k-1]);\n\t\t\tSystem.out.println(pSet.last() +" "+ pSet.first());\n\t\t\tans=Math.min(ans, pSet.last() - pSet.first());\n\t\t\tpSet.remove(p[j]);\n\t\t\n\t\t}\n\t\tSystem.out.println(ans);\n\t}', 'start_line': 7, 'end_line': 35}
================== buggy_method_src ==================
public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        int n = scan.nextInt();
        int k = scan.nextInt();

        int[] p = new int[n+1];
        TreeSet<Integer> pSet = new TreeSet<Integer>();

        for (int i = 0; i < n; i++) {
        	p[scan.nextInt()] = i;
		}
		scan.close();

        for (int i = 1; i < k; i++) {
        	pSet.add(p[i]);
		}
		
		int ans = n;
		
		for (int j = 1; j <= n-k+1; j++) {
			pSet.add( p[j+k-1]);
			System.out.println(pSet.last() +" "+ pSet.first());
			ans=Math.min(ans, pSet.last() - pSet.first());
			pSet.remove(p[j]);
		
		}
		System.out.println(ans);
	}
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[23]
================== buggy_statements ==================
['\t\t\tSystem.out.println(pSet.last() +" "+ pSet.first());']
================== buggy_method_src_endswith_buggy_statement ==================
public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        int n = scan.nextInt();
        int k = scan.nextInt();

        int[] p = new int[n+1];
        TreeSet<Integer> pSet = new TreeSet<Integer>();

        for (int i = 0; i < n; i++) {
        	p[scan.nextInt()] = i;
		}
		scan.close();

        for (int i = 1; i < k; i++) {
        	pSet.add(p[i]);
		}
		
		int ans = n;
		
		for (int j = 1; j <= n-k+1; j++) {
			pSet.add( p[j+k-1]);
			System.out.println(pSet.last() +" "+ pSet.first());