
================== buggy_file ==================
src/com/google/javascript/jscomp/CollapseVariableDeclarations.java
================== buggy_method ==================
{'method_name': 'applyCollapses', 'method_body': 'private void applyCollapses() {\n    for (Collapse collapse : collapses) {\n\n      Node var = new Node(Token.VAR);\n      var.copyInformationFrom(collapse.startNode);\n      collapse.parent.addChildBefore(var, collapse.startNode);\n\n      boolean redeclaration = false;\n      for (Node n = collapse.startNode; n != collapse.endNode;) {\n        Node next = n.getNext();\n\n        Preconditions.checkState(var.getNext() == n);\n        collapse.parent.removeChildAfter(var);\n\n        if (n.isVar()) {\n          while(n.hasChildren()) {\n            var.addChildToBack(n.removeFirstChild());\n          }\n        } else {\n          Node assign = n.getFirstChild();\n          Node lhs = assign.getFirstChild();\n          Preconditions.checkState(lhs.isName());\n          Node rhs = assign.getLastChild();\n          lhs.addChildToBack(rhs.detachFromParent());\n          var.addChildToBack(lhs.detachFromParent());\n          redeclaration = true;\n        }\n        n = next;\n      }\n\n      if (redeclaration) {\n        JSDocInfo info = new JSDocInfo();\n        info.addSuppression("duplicate");\n        var.setJSDocInfo(info);\n      }\n    }\n  }', 'start_line': 209, 'end_line': 245, 'buggy_lines': [211]}
================== buggy_method_src ==================
private void applyCollapses() {
    for (Collapse collapse : collapses) {

      Node var = new Node(Token.VAR);
      var.copyInformationFrom(collapse.startNode);
      collapse.parent.addChildBefore(var, collapse.startNode);

      boolean redeclaration = false;
      for (Node n = collapse.startNode; n != collapse.endNode;) {
        Node next = n.getNext();

        Preconditions.checkState(var.getNext() == n);
        collapse.parent.removeChildAfter(var);

        if (n.isVar()) {
          while(n.hasChildren()) {
            var.addChildToBack(n.removeFirstChild());
          }
        } else {
          Node assign = n.getFirstChild();
          Node lhs = assign.getFirstChild();
          Preconditions.checkState(lhs.isName());
          Node rhs = assign.getLastChild();
          lhs.addChildToBack(rhs.detachFromParent());
          var.addChildToBack(lhs.detachFromParent());
          redeclaration = true;
        }
        n = next;
      }

      if (redeclaration) {
        JSDocInfo info = new JSDocInfo();
        info.addSuppression("duplicate");
        var.setJSDocInfo(info);
      }
    }
  }
================== test_stack ==================
com.google.javascript.jscomp.CollapseVariableDeclarationsTest::testIssue820
junit.framework.AssertionFailedError:
Expected: function f(a){var b=1;a=2;var c}
Result: function f(a){var b=1,a=2,c}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
                NAME a 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME b 1 [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME a 1 [source_file: expected0]
                        NUMBER 2.0 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME c 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
                NAME a 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]
                    NAME b 1 [source_file: testcode]
                        NUMBER 1.0 1 [source_file: testcode]
                    NAME a 1 [source_file: testcode]
                        NUMBER 2.0 1 [source_file: testcode]
                    NAME c 1 [source_file: testcode]


Subtree1: BLOCK 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME b 1 [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        ASSIGN 1 [source_file: expected0]
            NAME a 1 [source_file: expected0]
            NUMBER 2.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME c 1 [source_file: expected0]


Subtree2: BLOCK 1 [source_file: testcode]
    VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]
        NAME b 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            NUMBER 2.0 1 [source_file: testcode]
        NAME c 1 [source_file: testcode]

	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at junit.framework.Assert.assertNull(Assert.java:277)
	at junit.framework.TestCase.assertNull(TestCase.java:447)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:560)
	at com.google.javascript.jscomp.CollapseVariableDeclarationsTest.testIssue820(CollapseVariableDeclarationsTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

================== test_assert ==================
testSame("function f(a){ var b=1; a=2; var c; }");

================== buggy_lines_in_method ==================
[3]
================== buggy_statements ==================
['']
================== buggy_method_src_endswith_buggy_statement ==================
private void applyCollapses() {
    for (Collapse collapse : collapses) {
