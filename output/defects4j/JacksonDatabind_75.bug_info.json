[
    {
        "buggy_file": "src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "buggy_method": {
            "method_name": "construct",
            "method_body": "@SuppressWarnings(\"unchecked\")\n    public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config,\n            BeanDescription beanDesc, JsonFormat.Value format)\n    {\n        /* 08-Apr-2015, tatu: As per [databind#749], we can not statically determine\n         *   between name() and toString(), need to construct `EnumValues` with names,\n         *   handle toString() case dynamically (for example)\n         */\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n        Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n        return new EnumSerializer(v, serializeAsIndex);\n    }",
            "start_line": 77,
            "end_line": 88,
            "buggy_lines": [
                86
            ]
        },
        "buggy_method_src": "@SuppressWarnings(\"unchecked\")\n    public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config,\n            BeanDescription beanDesc, JsonFormat.Value format)\n    {\n        /* 08-Apr-2015, tatu: As per [databind#749], we can not statically determine\n         *   between name() and toString(), need to construct `EnumValues` with names,\n         *   handle toString() case dynamically (for example)\n         */\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n        Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n        return new EnumSerializer(v, serializeAsIndex);\n    }",
        "test_stack": "com.fasterxml.jackson.databind.struct.EnumFormatShapeTest::testEnumPropertyAsNumber\njunit.framework.ComparisonFailure: expected:<{\"color\":[2]}> but was:<{\"color\":[\"GREEN\"]}>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.fasterxml.jackson.databind.struct.EnumFormatShapeTest.testEnumPropertyAsNumber(EnumFormatShapeTest.java:113)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(String.format(aposToQuotes(\"{'color':%s}\"), Color.GREEN.ordinal()),\n",
        "buggy_lines_in_method": [
            10
        ],
        "buggy_statements": [
            "        Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);"
        ],
        "buggy_method_src_endswith_buggy_statement": "@SuppressWarnings(\"unchecked\")\n    public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config,\n            BeanDescription beanDesc, JsonFormat.Value format)\n    {\n        /* 08-Apr-2015, tatu: As per [databind#749], we can not statically determine\n         *   between name() and toString(), need to construct `EnumValues` with names,\n         *   handle toString() case dynamically (for example)\n         */\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n        Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);"
    },
    {
        "buggy_file": "src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "buggy_method": {
            "method_name": "createContextual",
            "method_body": "@Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = findFormatOverrides(serializers,\n                    property, handledType());\n            if (format != null) {\n                Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(),\n                        format, false);\n                if (serializeAsIndex != _serializeAsIndex) {\n                    return new EnumSerializer(_values, serializeAsIndex);\n                }\n            }\n        }\n        return this;\n    }",
            "start_line": 95,
            "end_line": 111,
            "buggy_lines": [
                104
            ]
        },
        "buggy_method_src": "@Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = findFormatOverrides(serializers,\n                    property, handledType());\n            if (format != null) {\n                Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(),\n                        format, false);\n                if (serializeAsIndex != _serializeAsIndex) {\n                    return new EnumSerializer(_values, serializeAsIndex);\n                }\n            }\n        }\n        return this;\n    }",
        "test_stack": "com.fasterxml.jackson.databind.struct.EnumFormatShapeTest::testEnumPropertyAsNumber\njunit.framework.ComparisonFailure: expected:<{\"color\":[2]}> but was:<{\"color\":[\"GREEN\"]}>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.fasterxml.jackson.databind.struct.EnumFormatShapeTest.testEnumPropertyAsNumber(EnumFormatShapeTest.java:113)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(String.format(aposToQuotes(\"{'color':%s}\"), Color.GREEN.ordinal()),\n",
        "buggy_lines_in_method": [
            10
        ],
        "buggy_statements": [
            "                        format, false);"
        ],
        "buggy_method_src_endswith_buggy_statement": "@Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = findFormatOverrides(serializers,\n                    property, handledType());\n            if (format != null) {\n                Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(),\n                        format, false);"
    },
    {
        "buggy_file": "src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "buggy_method": {
            "method_name": "_isShapeWrittenUsingIndex",
            "method_body": "protected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass,\n            JsonFormat.Value format, boolean fromClass)\n    {\n        JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n        if (shape == null) {\n            return null;\n        }\n        // i.e. \"default\", check dynamically\n        if (shape == Shape.ANY || shape == Shape.SCALAR) {\n            return null;\n        }\n        // 19-May-2016, tatu: also consider \"natural\" shape\n        if (shape == Shape.STRING || shape == Shape.NATURAL) {\n            return Boolean.FALSE;\n        }\n        // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n        if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n            return Boolean.TRUE;\n        }\n        // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n        throw new IllegalArgumentException(String.format(\n                \"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\",\n                    shape, enumClass.getName(), (fromClass? \"class\" : \"property\")));\n    }",
            "start_line": 216,
            "end_line": 239,
            "buggy_lines": [
                217,
                221,
                225
            ]
        },
        "buggy_method_src": "protected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass,\n            JsonFormat.Value format, boolean fromClass)\n    {\n        JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n        if (shape == null) {\n            return null;\n        }\n        // i.e. \"default\", check dynamically\n        if (shape == Shape.ANY || shape == Shape.SCALAR) {\n            return null;\n        }\n        // 19-May-2016, tatu: also consider \"natural\" shape\n        if (shape == Shape.STRING || shape == Shape.NATURAL) {\n            return Boolean.FALSE;\n        }\n        // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n        if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n            return Boolean.TRUE;\n        }\n        // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n        throw new IllegalArgumentException(String.format(\n                \"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\",\n                    shape, enumClass.getName(), (fromClass? \"class\" : \"property\")));\n    }",
        "test_stack": "com.fasterxml.jackson.databind.struct.EnumFormatShapeTest::testEnumPropertyAsNumber\njunit.framework.ComparisonFailure: expected:<{\"color\":[2]}> but was:<{\"color\":[\"GREEN\"]}>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.fasterxml.jackson.databind.struct.EnumFormatShapeTest.testEnumPropertyAsNumber(EnumFormatShapeTest.java:113)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "assertEquals(String.format(aposToQuotes(\"{'color':%s}\"), Color.GREEN.ordinal()),\n",
        "buggy_lines_in_method": [
            2,
            6,
            10
        ],
        "buggy_statements": [
            "            JsonFormat.Value format, boolean fromClass)",
            "            return null;",
            "            return null;"
        ],
        "buggy_method_src_endswith_buggy_statement": "protected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass,\n            JsonFormat.Value format, boolean fromClass)\n    {\n        JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n        if (shape == null) {\n            return null;\n        }\n        // i.e. \"default\", check dynamically\n        if (shape == Shape.ANY || shape == Shape.SCALAR) {\n            return null;"
    }
]