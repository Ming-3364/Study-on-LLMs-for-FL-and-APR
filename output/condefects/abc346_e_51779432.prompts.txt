
================== prompt_fl_1 ==================

source code:
public static void main(String[] args){
    var sc=new java.util.Scanner(System.in);
    int H=sc.nextInt();
    int W=sc.nextInt();
    int M=sc.nextInt();
    int[] T=new int[M],A=new int[M],X=new int[M];
    
    for(int i=0;i<M;i++){
      T[i]=sc.nextInt();
      A[i]=sc.nextInt()-1;
      X[i]=sc.nextInt();
    }
    
    var map=new java.util.HashMap<Integer,Long>();
    boolean[] hused=new boolean[H],vused=new boolean[W];
    
    for(int i=M-1;i>=0;i--){
      int t=T[i];
      int a=A[i];
      int x=X[i];
      
      if(t==1){
        if(!hused[a]){
          hused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+W);
          H--;
        }
      }else{
        if(!vused[a]){
          vused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+H);
          W--;
        }
      }
    }
    map.put(0,map.getOrDefault(0,0l)+W*H);
    
    var colors=new java.util.ArrayList<Integer>();
    for(var set:map.entrySet()){
      if(set.getValue()>0)colors.add(set.getKey());
    }
    
    java.util.Collections.sort(colors);
    
    System.out.println(colors.size());
    for(int color:colors)System.out.println(color+" "+map.get(color));
  }

There is a bug in the above code, please help me locate it.

Please output **only one integer**: the line number of the buggy code (The code starts from line 1). Do not provide any explanations or additional content.

================== prompt_fl_4 ==================

source code:
public static void main(String[] args){
    var sc=new java.util.Scanner(System.in);
    int H=sc.nextInt();
    int W=sc.nextInt();
    int M=sc.nextInt();
    int[] T=new int[M],A=new int[M],X=new int[M];
    
    for(int i=0;i<M;i++){
      T[i]=sc.nextInt();
      A[i]=sc.nextInt()-1;
      X[i]=sc.nextInt();
    }
    
    var map=new java.util.HashMap<Integer,Long>();
    boolean[] hused=new boolean[H],vused=new boolean[W];
    
    for(int i=M-1;i>=0;i--){
      int t=T[i];
      int a=A[i];
      int x=X[i];
      
      if(t==1){
        if(!hused[a]){
          hused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+W);
          H--;
        }
      }else{
        if(!vused[a]){
          vused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+H);
          W--;
        }
      }
    }
    map.put(0,map.getOrDefault(0,0l)+W*H);
    
    var colors=new java.util.ArrayList<Integer>();
    for(var set:map.entrySet()){
      if(set.getValue()>0)colors.add(set.getKey());
    }
    
    java.util.Collections.sort(colors);
    
    System.out.println(colors.size());
    for(int color:colors)System.out.println(color+" "+map.get(color));
  }

There is a bug in the above code, please help me locate it.

Output **only** the exact buggy statement, with no line numbers, explanations, or additional content. Your response should contain just the buggy code line. Do not include ```java or ``` markers in the response.

================== prompt_apr_1 ==================

public static void main(String[] args){
    var sc=new java.util.Scanner(System.in);
    int H=sc.nextInt();
    int W=sc.nextInt();
    int M=sc.nextInt();
    int[] T=new int[M],A=new int[M],X=new int[M];
    
    for(int i=0;i<M;i++){
      T[i]=sc.nextInt();
      A[i]=sc.nextInt()-1;
      X[i]=sc.nextInt();
    }
    
    var map=new java.util.HashMap<Integer,Long>();
    boolean[] hused=new boolean[H],vused=new boolean[W];
    
    for(int i=M-1;i>=0;i--){
      int t=T[i];
      int a=A[i];
      int x=X[i];
      
      if(t==1){
        if(!hused[a]){
          hused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+W);
          H--;
        }
      }else{
        if(!vused[a]){
          vused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+H);
          W--;
        }
      }
    }
    map.put(0,map.getOrDefault(0,0l)+W*H);
    
    var colors=new java.util.ArrayList<Integer>();
    for(var set:map.entrySet()){
      if(set.getValue()>0)colors.add(set.getKey());
    }
    
    java.util.Collections.sort(colors);
    
    System.out.println(colors.size());
    for(int color:colors)System.out.println(color+" "+map.get(color));
  }

There is a bug in line [36] of the code, please help me fix it.

Please return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.

================== prompt_apr_2 ==================

public static void main(String[] args){
    var sc=new java.util.Scanner(System.in);
    int H=sc.nextInt();
    int W=sc.nextInt();
    int M=sc.nextInt();
    int[] T=new int[M],A=new int[M],X=new int[M];
    
    for(int i=0;i<M;i++){
      T[i]=sc.nextInt();
      A[i]=sc.nextInt()-1;
      X[i]=sc.nextInt();
    }
    
    var map=new java.util.HashMap<Integer,Long>();
    boolean[] hused=new boolean[H],vused=new boolean[W];
    
    for(int i=M-1;i>=0;i--){
      int t=T[i];
      int a=A[i];
      int x=X[i];
      
      if(t==1){
        if(!hused[a]){
          hused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+W);
          H--;
        }
      }else{
        if(!vused[a]){
          vused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+H);
          W--;
        }
      }
    }
    map.put(0,map.getOrDefault(0,0l)+W*H);
    
    var colors=new java.util.ArrayList<Integer>();
    for(var set:map.entrySet()){
      if(set.getValue()>0)colors.add(set.getKey());
    }
    
    java.util.Collections.sort(colors);
    
    System.out.println(colors.size());
    for(int color:colors)System.out.println(color+" "+map.get(color));
  }

There is a bug in ['    map.put(0,map.getOrDefault(0,0l)+W*H);'] , please help me fix it. 

Please return the **complete corrected method**. Do not skip or omit any part of the code. Do not include ```java or ``` markers in the response.

================== prompt_apr_3 ==================

public static void main(String[] args){
    var sc=new java.util.Scanner(System.in);
    int H=sc.nextInt();
    int W=sc.nextInt();
    int M=sc.nextInt();
    int[] T=new int[M],A=new int[M],X=new int[M];
    
    for(int i=0;i<M;i++){
      T[i]=sc.nextInt();
      A[i]=sc.nextInt()-1;
      X[i]=sc.nextInt();
    }
    
    var map=new java.util.HashMap<Integer,Long>();
    boolean[] hused=new boolean[H],vused=new boolean[W];
    
    for(int i=M-1;i>=0;i--){
      int t=T[i];
      int a=A[i];
      int x=X[i];
      
      if(t==1){
        if(!hused[a]){
          hused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+W);
          H--;
        }
      }else{
        if(!vused[a]){
          vused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+H);
          W--;
        }
      }
    }
    map.put(0,map.getOrDefault(0,0l)+W*H);

There is a bug in the last statement, please help me fix it.

Return the code **only from the method declaration to the fixed statement**, without completing or adding additional code. Do not modify anything beyond fixing the bug, and do not complete the `if` statement or other unfinished parts. Do not include ```java or ``` markers in the response.

================== prompt_apr_4 ==================

public static void main(String[] args){
    var sc=new java.util.Scanner(System.in);
    int H=sc.nextInt();
    int W=sc.nextInt();
    int M=sc.nextInt();
    int[] T=new int[M],A=new int[M],X=new int[M];
    
    for(int i=0;i<M;i++){
      T[i]=sc.nextInt();
      A[i]=sc.nextInt()-1;
      X[i]=sc.nextInt();
    }
    
    var map=new java.util.HashMap<Integer,Long>();
    boolean[] hused=new boolean[H],vused=new boolean[W];
    
    for(int i=M-1;i>=0;i--){
      int t=T[i];
      int a=A[i];
      int x=X[i];
      
      if(t==1){
        if(!hused[a]){
          hused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+W);
          H--;
        }
      }else{
        if(!vused[a]){
          vused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+H);
          W--;
        }
      }
    }
    map.put(0,map.getOrDefault(0,0l)+W*H);
    
    var colors=new java.util.ArrayList<Integer>();
    for(var set:map.entrySet()){
      if(set.getValue()>0)colors.add(set.getKey());
    }
    
    java.util.Collections.sort(colors);
    
    System.out.println(colors.size());
    for(int color:colors)System.out.println(color+" "+map.get(color));
  }

There is a bug in line [36] of the code, please help me fix it.

Please return the results in a strict JSON format as described below. Please follow these instructions carefully:
1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).
2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:
   - `"line_number"`: The line number of the buggy code that was repaired (integer).
   - `"fixed_statement"`: The repaired statement for that specific line (string).

3. The result must strictly follow this format:
[
    {
        "line_number": int,
        "fixed_statement": "string"
    },
    {
        "line_number": int,
        "fixed_statement": "string"
    }
]
4. The repaired statement in "fixed_statement" must replace the corresponding line in the buggy code.
5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.

================== prompt_apr_5 ==================

public static void main(String[] args){
    var sc=new java.util.Scanner(System.in);
    int H=sc.nextInt();
    int W=sc.nextInt();
    int M=sc.nextInt();
    int[] T=new int[M],A=new int[M],X=new int[M];
    
    for(int i=0;i<M;i++){
      T[i]=sc.nextInt();
      A[i]=sc.nextInt()-1;
      X[i]=sc.nextInt();
    }
    
    var map=new java.util.HashMap<Integer,Long>();
    boolean[] hused=new boolean[H],vused=new boolean[W];
    
    for(int i=M-1;i>=0;i--){
      int t=T[i];
      int a=A[i];
      int x=X[i];
      
      if(t==1){
        if(!hused[a]){
          hused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+W);
          H--;
        }
      }else{
        if(!vused[a]){
          vused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+H);
          W--;
        }
      }
    }
    map.put(0,map.getOrDefault(0,0l)+W*H);
    
    var colors=new java.util.ArrayList<Integer>();
    for(var set:map.entrySet()){
      if(set.getValue()>0)colors.add(set.getKey());
    }
    
    java.util.Collections.sort(colors);
    
    System.out.println(colors.size());
    for(int color:colors)System.out.println(color+" "+map.get(color));
  }

There is a bug in ['    map.put(0,map.getOrDefault(0,0l)+W*H);'] , please help me fix it. 

Please return the results in a strict JSON format as described below. Please follow these instructions carefully:
1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).
2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:
   - `"line_number"`: The line number of the buggy code that was repaired (integer).
   - `"fixed_statement"`: The repaired statement for that specific line (string).

3. The result must strictly follow this format:
[
    {
        "line_number": int,
        "fixed_statement": "string"
    },
    {
        "line_number": int,
        "fixed_statement": "string"
    }
]
4. The repaired statement in "fixed_statement" must replace the corresponding line in the buggy code.
5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.

================== prompt_apr_6 ==================

public static void main(String[] args){
    var sc=new java.util.Scanner(System.in);
    int H=sc.nextInt();
    int W=sc.nextInt();
    int M=sc.nextInt();
    int[] T=new int[M],A=new int[M],X=new int[M];
    
    for(int i=0;i<M;i++){
      T[i]=sc.nextInt();
      A[i]=sc.nextInt()-1;
      X[i]=sc.nextInt();
    }
    
    var map=new java.util.HashMap<Integer,Long>();
    boolean[] hused=new boolean[H],vused=new boolean[W];
    
    for(int i=M-1;i>=0;i--){
      int t=T[i];
      int a=A[i];
      int x=X[i];
      
      if(t==1){
        if(!hused[a]){
          hused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+W);
          H--;
        }
      }else{
        if(!vused[a]){
          vused[a]=true;
          map.put(x,map.getOrDefault(x,0l)+H);
          W--;
        }
      }
    }
    map.put(0,map.getOrDefault(0,0l)+W*H);

There is a bug in the last statement, please help me fix it.

Please return the results in a strict JSON format as described below. Please follow these instructions carefully:
1. Your output must include each repaired line's number (`line_number`) and the corresponding fixed code statement (`fixed_statement`).
2. The output format must be a valid JSON array, where each element represents one repaired line, with the following structure:
   - `"line_number"`: The line number of the buggy code that was repaired (integer).
   - `"fixed_statement"`: The repaired statement for that specific line (string).

3. The result must strictly follow this format:
[
    {
        "line_number": int,
        "fixed_statement": "string"
    },
    {
        "line_number": int,
        "fixed_statement": "string"
    }
]
4. The repaired statement in "fixed_statement" must replace the corresponding line in the buggy code.
5. You must NOT include any additional explanation or description in your response. Only return the JSON array. Do not include ```json or ``` markers in the response.
