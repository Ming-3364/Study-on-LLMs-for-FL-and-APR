
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'solve', 'method_body': 'public void solve(int testNumber, FastScanner in, PrintWriter out) {\n            int n = in.nextInt();\n            String[] s = new String[n];\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++) {\n                s[i] = in.next();\n            }\n            for (int i = 0; i < n; i++) {\n                a[i] = in.nextInt();\n            }\n\n            Graph g = new Graph(2 * n + 2);\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (i != j && s[i].contains(s[j])) {\n                        g.addEdge(i, j + n, g.infinity);\n                    }\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                g.addEdge(g.s, i, a[i]);\n            }\n            for (int i = 0; i < n; i++) {\n                g.addEdge(i + n, g.t, a[i]);\n            }\n            long sum = 0;\n            for (long x : a) {\n                sum += x;\n            }\n            out.println(sum - g.maxFlow());\n        }', 'start_line': 28, 'end_line': 58}
================== buggy_method_src ==================
public void solve(int testNumber, FastScanner in, PrintWriter out) {
            int n = in.nextInt();
            String[] s = new String[n];
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                s[i] = in.next();
            }
            for (int i = 0; i < n; i++) {
                a[i] = in.nextInt();
            }

            Graph g = new Graph(2 * n + 2);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (i != j && s[i].contains(s[j])) {
                        g.addEdge(i, j + n, g.infinity);
                    }
                }
            }
            for (int i = 0; i < n; i++) {
                g.addEdge(g.s, i, a[i]);
            }
            for (int i = 0; i < n; i++) {
                g.addEdge(i + n, g.t, a[i]);
            }
            long sum = 0;
            for (long x : a) {
                sum += x;
            }
            out.println(sum - g.maxFlow());
        }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[15]
================== buggy_statements ==================
['                    if (i != j && s[i].contains(s[j])) {']
================== buggy_method_src_endswith_buggy_statement ==================
public void solve(int testNumber, FastScanner in, PrintWriter out) {
            int n = in.nextInt();
            String[] s = new String[n];
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                s[i] = in.next();
            }
            for (int i = 0; i < n; i++) {
                a[i] = in.nextInt();
            }

            Graph g = new Graph(2 * n + 2);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (i != j && s[i].contains(s[j])) {