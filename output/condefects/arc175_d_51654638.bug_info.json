[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "solve",
            "method_body": "void solve() {\n        int n = in.nextInt();\n        long k = in.nextLong();\n        edges = in.nextGraph(n, n - 1, false);\n        size = new long[n];\n        ord = new int[n];\n        par = new int[n];\n        par[0] = -1;\n        dfs(0, 0);\n        long sizeSum = 0;\n        for (int i = 0; i < n; i++) {\n            sizeSum += size[i];\n        }\n        if (k < n || sizeSum < k) {\n            out.println(\"No\");\n            return;\n        }\n        int[] vs = new int[n];\n        for (int i : ord) {\n            if (i != 0) {\n                vs[i] += vs[par[i]];\n            }\n            if (i == 0 || k >= size[i]) {\n                k -= size[i];\n                vs[i]++;\n            }\n        }\n        List<List<Integer>> cnt = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            cnt.add(new ArrayList<>());\n        }\n        for (int i : ord) {\n            cnt.get(vs[i]).add(i);\n        }\n        int cur = 0;\n        int[] ans = new int[n];\n        for (int i = 1; i <= n; i++) {\n            List<Integer> list = cnt.get(i);\n            int tmp = cur + list.size();\n            for (int j : list) {\n                ans[j] = tmp;\n                tmp--;\n            }\n            cur += list.size();\n        }\n        out.println(ans);\n    }",
            "start_line": 25,
            "end_line": 71
        },
        "buggy_method_src": "void solve() {\n        int n = in.nextInt();\n        long k = in.nextLong();\n        edges = in.nextGraph(n, n - 1, false);\n        size = new long[n];\n        ord = new int[n];\n        par = new int[n];\n        par[0] = -1;\n        dfs(0, 0);\n        long sizeSum = 0;\n        for (int i = 0; i < n; i++) {\n            sizeSum += size[i];\n        }\n        if (k < n || sizeSum < k) {\n            out.println(\"No\");\n            return;\n        }\n        int[] vs = new int[n];\n        for (int i : ord) {\n            if (i != 0) {\n                vs[i] += vs[par[i]];\n            }\n            if (i == 0 || k >= size[i]) {\n                k -= size[i];\n                vs[i]++;\n            }\n        }\n        List<List<Integer>> cnt = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            cnt.add(new ArrayList<>());\n        }\n        for (int i : ord) {\n            cnt.get(vs[i]).add(i);\n        }\n        int cur = 0;\n        int[] ans = new int[n];\n        for (int i = 1; i <= n; i++) {\n            List<Integer> list = cnt.get(i);\n            int tmp = cur + list.size();\n            for (int j : list) {\n                ans[j] = tmp;\n                tmp--;\n            }\n            cur += list.size();\n        }\n        out.println(ans);\n    }",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            46
        ],
        "buggy_statements": [
            "        out.println(ans);"
        ],
        "buggy_method_src_endswith_buggy_statement": "void solve() {\n        int n = in.nextInt();\n        long k = in.nextLong();\n        edges = in.nextGraph(n, n - 1, false);\n        size = new long[n];\n        ord = new int[n];\n        par = new int[n];\n        par[0] = -1;\n        dfs(0, 0);\n        long sizeSum = 0;\n        for (int i = 0; i < n; i++) {\n            sizeSum += size[i];\n        }\n        if (k < n || sizeSum < k) {\n            out.println(\"No\");\n            return;\n        }\n        int[] vs = new int[n];\n        for (int i : ord) {\n            if (i != 0) {\n                vs[i] += vs[par[i]];\n            }\n            if (i == 0 || k >= size[i]) {\n                k -= size[i];\n                vs[i]++;\n            }\n        }\n        List<List<Integer>> cnt = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            cnt.add(new ArrayList<>());\n        }\n        for (int i : ord) {\n            cnt.get(vs[i]).add(i);\n        }\n        int cur = 0;\n        int[] ans = new int[n];\n        for (int i = 1; i <= n; i++) {\n            List<Integer> list = cnt.get(i);\n            int tmp = cur + list.size();\n            for (int j : list) {\n                ans[j] = tmp;\n                tmp--;\n            }\n            cur += list.size();\n        }\n        out.println(ans);"
    }
]