{
    "overall_status": {
        "prompt_apr_1": {
            "ernie-3.5-128k": "Fail some tests",
            "qwen-turbo": "Compile failed",
            "doubao-pro-4k": "Fail some tests",
            "gpt-4o-mini": "Fail some tests",
            "deepseek-chat": "Compile failed"
        },
        "prompt_apr_2": {
            "ernie-3.5-128k": "Fail some tests",
            "qwen-turbo": "Compile failed",
            "doubao-pro-4k": "Fail some tests",
            "gpt-4o-mini": "Fail some tests",
            "deepseek-chat": "Compile failed"
        },
        "prompt_apr_3": {
            "ernie-3.5-128k": "Compile failed",
            "qwen-turbo": "Compile failed",
            "doubao-pro-4k": "Fail some tests",
            "gpt-4o-mini": "Fail some tests",
            "deepseek-chat": "Compile failed"
        },
        "prompt_apr_4": {
            "ernie-3.5-128k": "Fail some tests",
            "qwen-turbo": "Fail some tests",
            "doubao-pro-4k": "Fail some tests",
            "gpt-4o-mini": "Fail some tests",
            "deepseek-chat": "Fail some tests"
        },
        "prompt_apr_5": {
            "ernie-3.5-128k": "Compile failed",
            "qwen-turbo": "Fail some tests",
            "doubao-pro-4k": "Fail some tests",
            "gpt-4o-mini": "Compile failed",
            "deepseek-chat": "Fail some tests"
        },
        "prompt_apr_6": {
            "ernie-3.5-128k": "Failed",
            "qwen-turbo": "Fail some tests",
            "doubao-pro-4k": "Compile failed",
            "gpt-4o-mini": "Compile failed",
            "deepseek-chat": "Fail some tests"
        }
    },
    "check_results_list": {
        "prompt_apr_1": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:4: error: illegal character: \\96\n```java\n^\nMain.java:4: error: illegal character: \\96\n```java\n ^\nMain.java:4: error: illegal character: \\96\n```java\n  ^\nMain.java:10: error: illegal character: \\96\n```}\n^\nMain.java:10: error: illegal character: \\96\n```}\n ^\nMain.java:10: error: illegal character: \\96\n```}\n  ^\nMain.java:10: error: reached end of file while parsing\n```}\n    ^\n7 errors\n"
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:10: error: ';' expected\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n       ^\nMain.java:10: error: ';' expected\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n              ^\nMain.java:10: error: ';' expected\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                            ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                      ^\nMain.java:10: error: <identifier> expected\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                              ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                                ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                                                                                                                                                                       ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                                                                                                                                                                                     ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                                                                                                                                                                                                                                                                                                                             ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                                                                                                                                                                                                                                                                                                                                        ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                                                                                                                                                                                                                                                                                                                                                                ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code was that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is necessary for the regular expression to work correctly. Additionally, I added `sc.close()` to properly close the `Scanner` object and avoid resource leaks.}\n                                                                                                                                                                                                                                                                                                                                                                                        ^\n12 errors\n"
                }
            }
        },
        "prompt_apr_2": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:4: error: <identifier> expected\nCertainly, here is the complete corrected method:\n         ^\nMain.java:4: error: ';' expected\nCertainly, here is the complete corrected method:\n               ^\nMain.java:4: error: ';' expected\nCertainly, here is the complete corrected method:\n                      ^\nMain.java:4: error: ';' expected\nCertainly, here is the complete corrected method:\n                                         ^\nMain.java:4: error: <identifier> expected\nCertainly, here is the complete corrected method:\n                                                ^\nMain.java:6: error: illegal character: \\96\n```java\n^\nMain.java:6: error: illegal character: \\96\n```java\n ^\nMain.java:6: error: illegal character: \\96\n```java\n  ^\nMain.java:7: error: illegal start of type\nimport java.util.Scanner;\n^\nMain.java:7: error: ';' expected\nimport java.util.Scanner;\n      ^\nMain.java:7: error: illegal start of type\nimport java.util.Scanner;\n           ^\nMain.java:7: error: ';' expected\nimport java.util.Scanner;\n                ^\nMain.java:7: error: <identifier> expected\nimport java.util.Scanner;\n                        ^\nMain.java:14: error: illegal character: \\96\n```\n^\nMain.java:14: error: illegal character: \\96\n```\n ^\nMain.java:14: error: illegal character: \\96\n```\n  ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                 ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                           ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                       ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                  ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                       ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                                       ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                                                      ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                                                                         ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                                                                                     ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                                                                                                      ^\nMain.java:16: error: illegal character: \\96\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                                                                                                                ^\nMain.java:16: error: illegal character: \\96\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                                                                                                                        ^\nMain.java:16: error: ';' expected\nThis ensures that the input is captured and stored in a variable before performing the regex match, which helps avoid potential issues with how `Scanner` processes input.}\n                                                                                                                                                                         ^\n29 errors\n"
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:10: error: ';' expected\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n       ^\nMain.java:10: error: ';' expected\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n              ^\nMain.java:10: error: ';' expected\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                            ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                                     ^\nMain.java:10: error: <identifier> expected\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                                             ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                                               ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                                                                                                                                                                                      ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                                                                                                                                                                                                    ^\nMain.java:10: error: unclosed character literal\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                                                                                                                                                                                                                                                                                                        ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                                                                                                                                                                                                                                                                                                                                      ^\nMain.java:10: error: illegal character: \\96\nThe bug in the original code is that `sc.next()` only reads the next token (up to the first whitespace), which might not capture the entire input string if it contains spaces. Using `sc.nextLine()` ensures that the entire line of input is read, which is likely what you intended. Additionally, it's good practice to close the `Scanner` object to free up resources.}\n                                                                                                                                                                                                                                                                                                                                              ^\n11 errors\n"
                }
            }
        },
        "prompt_apr_3": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:6: error: reached end of file while parsing\n    System.out.print(sc.nextLine().matches(\"R.*M\") ? \"Yes\" : \"No\");}\n                                                                    ^\n1 error\n"
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:4: error: illegal character: \\96\n```java\n^\nMain.java:4: error: illegal character: \\96\n```java\n ^\nMain.java:4: error: illegal character: \\96\n```java\n  ^\nMain.java:8: error: illegal character: \\96\n```}\n^\nMain.java:8: error: illegal character: \\96\n```}\n ^\nMain.java:8: error: illegal character: \\96\n```}\n  ^\nMain.java:8: error: reached end of file while parsing\n```}\n    ^\n7 errors\n"
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:4: error: illegal character: \\96\n```java\n^\nMain.java:4: error: illegal character: \\96\n```java\n ^\nMain.java:4: error: illegal character: \\96\n```java\n  ^\nMain.java:9: error: illegal character: \\96\n```}\n^\nMain.java:9: error: illegal character: \\96\n```}\n ^\nMain.java:9: error: illegal character: \\96\n```}\n  ^\nMain.java:9: error: reached end of file while parsing\n```}\n    ^\n7 errors\n"
                }
            }
        },
        "prompt_apr_4": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes\n",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No\n",
                            "stderr": ""
                        }
                    ]
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            }
        },
        "prompt_apr_5": {
            "ernie-3.5-128k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:7: error: reached end of file while parsing\nSystem.out.println(sc.next().matches(\"R.*M\") ? \"Yes\" : \"No\");}\n                                                              ^\n1 error\n"
                }
            },
            "qwen-turbo": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:7: error: reached end of file while parsing\nSystem.out.print(sc.nextLine().matches(\"R.*M\") ? \"Yes\" : \"No\");}\n                                                                ^\n1 error\n"
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            }
        },
        "prompt_apr_6": {
            "ernie-3.5-128k": {},
            "qwen-turbo": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            },
            "doubao-pro-4k": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:7: error: reached end of file while parsing\nSystem.out.print(sc.next().matches(\"^R.*M$\" )? \"Yes\" : \"No\" );}\n                                                               ^\n1 error\n"
                }
            },
            "gpt-4o-mini": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": "Main.java:7: error: reached end of file while parsing\nSystem.out.print(sc.nextLine().matches(\"R.*M\") ? \"Yes\" : \"No\");}\n                                                                ^\n1 error\n"
                }
            },
            "deepseek-chat": {
                "compile": {
                    "rc": null,
                    "so": "",
                    "se": ""
                },
                "test": {
                    "test_res_info_list": [
                        {
                            "case_name": "01_internal_03",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_00",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_01",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        },
                        {
                            "case_name": "00_sample_00",
                            "returncode": null,
                            "stdout": "Yes",
                            "stderr": ""
                        },
                        {
                            "case_name": "01_internal_02",
                            "returncode": null,
                            "stdout": "No",
                            "stderr": ""
                        }
                    ]
                }
            }
        }
    }
}