
================== buggy_file ==================
src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
================== buggy_method ==================
{'method_name': 'provablyExecutesBefore', 'method_body': 'boolean provablyExecutesBefore(BasicBlock thatBlock) {\n      // If thatBlock is a descendant of this block, and there are no hoisted\n      // blocks between them, then this block must start before thatBlock.\n      BasicBlock currentBlock;\n      for (currentBlock = thatBlock;\n           currentBlock != null && currentBlock != this;\n           currentBlock = currentBlock.getParent()) {\n        if (currentBlock.isHoisted) {\n          return false;\n        }\n      }\n\n      return currentBlock == this;\n    }', 'start_line': 572, 'end_line': 585, 'buggy_lines': [571, 580]}
================== buggy_method_src ==================
boolean provablyExecutesBefore(BasicBlock thatBlock) {
      // If thatBlock is a descendant of this block, and there are no hoisted
      // blocks between them, then this block must start before thatBlock.
      BasicBlock currentBlock;
      for (currentBlock = thatBlock;
           currentBlock != null && currentBlock != this;
           currentBlock = currentBlock.getParent()) {
        if (currentBlock.isHoisted) {
          return false;
        }
      }

      return currentBlock == this;
    }
================== test_stack ==================
com.google.javascript.jscomp.InlineVariablesTest::testNoInlineAliasesInLoop
junit.framework.AssertionFailedError:
Expected: function f(){var i=0;for(;i<5;i++){var x=extern();(function(){var y=x;window.setTimeout(function(){extern(y)},0)})()}}
Result: function f(){var i=0;for(;i<5;i++){var x=extern();(function(){window.setTimeout(function(){extern(x)},0)})()}}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [sourcename: expected0] [synthetic: 1]
        FUNCTION  1 [sourcename: expected0]
            NAME f 1
            LP 1
            BLOCK 1
                VAR 1
                    NAME i 1
                        NUMBER 0.0 1
                FOR 1
                    EMPTY 1
                    LT 1
                        NAME i 1
                        NUMBER 5.0 1
                    INC 1 [incrdecr: 1]
                        NAME i 1
                    BLOCK 1
                        VAR 1
                            NAME x 1
                                CALL 1
                                    NAME extern 1
                        EXPR_RESULT 1
                            CALL 1
                                FUNCTION  1 [sourcename: expected0] [parenthesized: true]
                                    NAME  1
                                    LP 1
                                    BLOCK 1
                                        VAR 1
                                            NAME y 1
                                                NAME x 1
                                        EXPR_RESULT 1
                                            CALL 1
                                                GETPROP 1
                                                    NAME window 1
                                                    STRING setTimeout 1
                                                FUNCTION  1 [sourcename: expected0]
                                                    NAME  1
                                                    LP 1
                                                    BLOCK 1
                                                        EXPR_RESULT 1
                                                            CALL 1
                                                                NAME extern 1
                                                                NAME y 1
                                                NUMBER 0.0 1


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [sourcename: testcode] [synthetic: 1]
        FUNCTION  1 [sourcename: testcode]
            NAME f 1
            LP 1
            BLOCK 1
                VAR 1
                    NAME i 1
                        NUMBER 0.0 1
                FOR 1
                    EMPTY 1
                    LT 1
                        NAME i 1
                        NUMBER 5.0 1
                    INC 1 [incrdecr: 1]
                        NAME i 1
                    BLOCK 1
                        VAR 1
                            NAME x 1
                                CALL 1
                                    NAME extern 1
                        EXPR_RESULT 1
                            CALL 1
                                FUNCTION  1 [sourcename: testcode] [parenthesized: true]
                                    NAME  1
                                    LP 1
                                    BLOCK 1
                                        EXPR_RESULT 1
                                            CALL 1
                                                GETPROP 1
                                                    NAME window 1
                                                    STRING setTimeout 1
                                                FUNCTION  1 [sourcename: testcode]
                                                    NAME  1
                                                    LP 1
                                                    BLOCK 1
                                                        EXPR_RESULT 1
                                                            CALL 1
                                                                NAME extern 1
                                                                NAME x 1
                                                NUMBER 0.0 1


Subtree1: BLOCK 1
    VAR 1
        NAME y 1
            NAME x 1
    EXPR_RESULT 1
        CALL 1
            GETPROP 1
                NAME window 1
                STRING setTimeout 1
            FUNCTION  1 [sourcename: expected0]
                NAME  1
                LP 1
                BLOCK 1
                    EXPR_RESULT 1
                        CALL 1
                            NAME extern 1
                            NAME y 1
            NUMBER 0.0 1


Subtree2: BLOCK 1
    EXPR_RESULT 1
        CALL 1
            GETPROP 1
                NAME window 1
                STRING setTimeout 1
            FUNCTION  1 [sourcename: testcode]
                NAME  1
                LP 1
                BLOCK 1
                    EXPR_RESULT 1
                        CALL 1
                            NAME extern 1
                            NAME x 1
            NUMBER 0.0 1

	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at junit.framework.Assert.assertNull(Assert.java:277)
	at junit.framework.TestCase.assertNull(TestCase.java:447)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:777)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)
	at com.google.javascript.jscomp.InlineVariablesTest.testNoInlineAliasesInLoop(InlineVariablesTest.java:617)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

================== test_assert ==================
testSame(

================== buggy_lines_in_method ==================
[0, 9]
================== buggy_statements ==================
['    }', '          return false;']
================== buggy_method_src_endswith_buggy_statement ==================
boolean provablyExecutesBefore(BasicBlock thatBlock) {
      // If thatBlock is a descendant of this block, and there are no hoisted
      // blocks between them, then this block must start before thatBlock.
      BasicBlock currentBlock;
      for (currentBlock = thatBlock;
           currentBlock != null && currentBlock != this;
           currentBlock = currentBlock.getParent()) {
        if (currentBlock.isHoisted) {
          return false;