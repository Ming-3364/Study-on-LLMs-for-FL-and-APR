
================== buggy_file ==================
src/java/org/apache/commons/lang/Entities.java
================== buggy_method ==================
{'method_name': 'unescape', 'method_body': "firstAmp < 0) {\n            writer.write(string);\n            return;\n        }\n\n        writer.write(string, 0, firstAmp);\n        int len = string.length();\n        for (int i = firstAmp; i < len; i++) {\n            char c = string.charAt(i);\n            if (c == '&') {\n                int nextIdx = i+1;\n                int semiColonIdx = string.indexOf(';', nextIdx);\n                if (semiColonIdx == -1) {\n                    writer.write(c);\n                    continue;\n                }\n                int amphersandIdx = string.indexOf('&', i + 1);\n                if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {\n                    // Then the text looks like &...&...;\n                    writer.write(c);\n                    continue;\n                }\n                String entityContent = string.substring(nextIdx, semiColonIdx);\n                int entityValue = -1;\n                int entityContentLen = entityContent.length();\n                if (entityContentLen > 0) {\n                    if (entityContent.charAt(0) == '#') { //escaped value content is an integer (decimal or hexidecimal)\n                        if (entityContentLen > 1) {  \n                            char isHexChar = entityContent.charAt(1);\n                            try {\n                                switch (isHexChar) {\n                                    case 'X' :\n                                    case 'x' : {\n                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                    }\n                                    default : {\n                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                    }\n                                }\n                            } catch (NumberFormatException e) {\n                            }\n                        }\n                    } else { //escaped value content is an entity name\n                        entityValue = this.entityValue(entityContent);\n                    }\n                }\n                \n                if (entityValue == -1) {\n                    writer.write('&');\n                    writer.write(entityContent);\n                    writer.write(';');\n                } else {\n                    writer.write(entityValue);\n                }\n                i = semiColonIdx; //move index up to the semi-colon                \n            } else {\n                writer.write(c);\n            }\n        }\n    }\n    \n}\n", 'start_line': 884, 'end_line': 945, 'buggy_lines': [923, 931, 933]}
================== buggy_method_src ==================
firstAmp < 0) {
            writer.write(string);
            return;
        }

        writer.write(string, 0, firstAmp);
        int len = string.length();
        for (int i = firstAmp; i < len; i++) {
            char c = string.charAt(i);
            if (c == '&') {
                int nextIdx = i+1;
                int semiColonIdx = string.indexOf(';', nextIdx);
                if (semiColonIdx == -1) {
                    writer.write(c);
                    continue;
                }
                int amphersandIdx = string.indexOf('&', i + 1);
                if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {
                    // Then the text looks like &...&...;
                    writer.write(c);
                    continue;
                }
                String entityContent = string.substring(nextIdx, semiColonIdx);
                int entityValue = -1;
                int entityContentLen = entityContent.length();
                if (entityContentLen > 0) {
                    if (entityContent.charAt(0) == '#') { //escaped value content is an integer (decimal or hexidecimal)
                        if (entityContentLen > 1) {  
                            char isHexChar = entityContent.charAt(1);
                            try {
                                switch (isHexChar) {
                                    case 'X' :
                                    case 'x' : {
                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);
                                    }
                                    default : {
                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);
                                    }
                                }
                            } catch (NumberFormatException e) {
                            }
                        }
                    } else { //escaped value content is an entity name
                        entityValue = this.entityValue(entityContent);
                    }
                }
                
                if (entityValue == -1) {
                    writer.write('&');
                    writer.write(entityContent);
                    writer.write(';');
                } else {
                    writer.write(entityValue);
                }
                i = semiColonIdx; //move index up to the semi-colon                
            } else {
                writer.write(c);
            }
        }
    }
    
}

================== test_stack ==================
org.apache.commons.lang.EntitiesTest::testNumberOverflow
junit.framework.ComparisonFailure: expected:<[&#12345678;]> but was:<[æ…Ž]>
	at junit.framework.Assert.assertEquals(Assert.java:100)
	at junit.framework.Assert.assertEquals(Assert.java:107)
	at junit.framework.TestCase.assertEquals(TestCase.java:269)
	at org.apache.commons.lang.EntitiesTest.doTestUnescapeEntity(EntitiesTest.java:101)
	at org.apache.commons.lang.EntitiesTest.testNumberOverflow(EntitiesTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

================== test_assert ==================
doTestUnescapeEntity("&#12345678;", "&#12345678;");

================== buggy_lines_in_method ==================
[40, 48, 50]
================== buggy_statements ==================
['                            } catch (NumberFormatException e) {', '                if (entityValue == -1) {', '                    writer.write(entityContent);']
================== buggy_method_src_endswith_buggy_statement ==================
firstAmp < 0) {
            writer.write(string);
            return;
        }

        writer.write(string, 0, firstAmp);
        int len = string.length();
        for (int i = firstAmp; i < len; i++) {
            char c = string.charAt(i);
            if (c == '&') {
                int nextIdx = i+1;
                int semiColonIdx = string.indexOf(';', nextIdx);
                if (semiColonIdx == -1) {
                    writer.write(c);
                    continue;
                }
                int amphersandIdx = string.indexOf('&', i + 1);
                if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {
                    // Then the text looks like &...&...;
                    writer.write(c);
                    continue;
                }
                String entityContent = string.substring(nextIdx, semiColonIdx);
                int entityValue = -1;
                int entityContentLen = entityContent.length();
                if (entityContentLen > 0) {
                    if (entityContent.charAt(0) == '#') { //escaped value content is an integer (decimal or hexidecimal)
                        if (entityContentLen > 1) {  
                            char isHexChar = entityContent.charAt(1);
                            try {
                                switch (isHexChar) {
                                    case 'X' :
                                    case 'x' : {
                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);
                                    }
                                    default : {
                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);
                                    }
                                }
                            } catch (NumberFormatException e) {
                            }
                        }
                    } else { //escaped value content is an entity name
                        entityValue = this.entityValue(entityContent);
                    }
                }
                
                if (entityValue == -1) {
                    writer.write('&');
                    writer.write(entityContent);