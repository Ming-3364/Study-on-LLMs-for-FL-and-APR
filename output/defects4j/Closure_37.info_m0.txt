
================== buggy_file ==================
src/com/google/javascript/jscomp/NodeTraversal.java
================== buggy_method ==================
{'method_name': 'traverseFunction', 'method_body': 'private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.isBlock());\n    traverseBranch(body, n);\n\n    popScope();\n  }', 'start_line': 510, 'end_line': 545, 'buggy_lines': [541]}
================== buggy_method_src ==================
private void traverseFunction(Node n, Node parent) {
    Preconditions.checkState(n.getChildCount() == 3);
    Preconditions.checkState(n.isFunction());

    final Node fnName = n.getFirstChild();

    boolean isFunctionExpression = (parent != null)
        && NodeUtil.isFunctionExpression(n);

    if (!isFunctionExpression) {
      // Functions declarations are in the scope containing the declaration.
      traverseBranch(fnName, n);
    }

    curNode = n;
    pushScope(n);

    if (isFunctionExpression) {
      // Function expression names are only accessible within the function
      // scope.
      traverseBranch(fnName, n);
    }

    final Node args = fnName.getNext();
    final Node body = args.getNext();

    // Args
    traverseBranch(args, n);

    // Body
    Preconditions.checkState(body.getNext() == null &&
            body.isBlock());
    traverseBranch(body, n);

    popScope();
  }
================== test_stack ==================
com.google.javascript.jscomp.IntegrationTest::testIncompleteFunction
java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.
null
	at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:642)
	at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:587)
	at com.google.javascript.jscomp.Compiler.compile(Compiler.java:569)
	at com.google.javascript.jscomp.Compiler.compileModules(Compiler.java:560)
	at com.google.javascript.jscomp.Compiler.compile(Compiler.java:542)
	at com.google.javascript.jscomp.IntegrationTest.compile(IntegrationTest.java:2080)
	at com.google.javascript.jscomp.IntegrationTest.test(IntegrationTest.java:2041)
	at com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction(IntegrationTest.java:1945)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)
Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.
null
	at com.google.common.base.Preconditions.checkState(Preconditions.java:129)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:540)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:489)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)
	at com.google.javascript.jscomp.PrepareAst.process(PrepareAst.java:70)
	at com.google.javascript.jscomp.Compiler.prepareAst(Compiler.java:1835)
	at com.google.javascript.jscomp.JsAst.parse(JsAst.java:99)
	at com.google.javascript.jscomp.JsAst.getAstRoot(JsAst.java:52)
	at com.google.javascript.jscomp.CompilerInput.getAstRoot(CompilerInput.java:119)
	at com.google.javascript.jscomp.Compiler.parseInputs(Compiler.java:1302)
	at com.google.javascript.jscomp.Compiler.parse(Compiler.java:696)
	at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:650)
	at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:71)
	at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:572)
	at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:569)
	at com.google.javascript.jscomp.Compiler$2.run(Compiler.java:614)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException
	... 23 more

================== test_assert ==================
test(options,

================== buggy_lines_in_method ==================
[32]
================== buggy_statements ==================
['            body.isBlock());']
================== buggy_method_src_endswith_buggy_statement ==================
private void traverseFunction(Node n, Node parent) {
    Preconditions.checkState(n.getChildCount() == 3);
    Preconditions.checkState(n.isFunction());

    final Node fnName = n.getFirstChild();

    boolean isFunctionExpression = (parent != null)
        && NodeUtil.isFunctionExpression(n);

    if (!isFunctionExpression) {
      // Functions declarations are in the scope containing the declaration.
      traverseBranch(fnName, n);
    }

    curNode = n;
    pushScope(n);

    if (isFunctionExpression) {
      // Function expression names are only accessible within the function
      // scope.
      traverseBranch(fnName, n);
    }

    final Node args = fnName.getNext();
    final Node body = args.getNext();

    // Args
    traverseBranch(args, n);

    // Body
    Preconditions.checkState(body.getNext() == null &&
            body.isBlock());