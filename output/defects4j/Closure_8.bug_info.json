[
    {
        "buggy_file": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "buggy_method": {
            "method_name": "canBeRedeclared",
            "method_body": "private boolean canBeRedeclared(Node n, Scope s) {\n      if (!NodeUtil.isExprAssign(n)) {\n        return false;\n      }\n      Node assign = n.getFirstChild();\n      Node lhs = assign.getFirstChild();\n\n      if (!lhs.isName()) {\n        return false;\n      }\n\n      Var var = s.getVar(lhs.getString());\n      return var != null\n          && var.getScope() == s\n          && !blacklistedVars.contains(var);\n    }",
            "start_line": 190,
            "end_line": 205,
            "buggy_lines": [
                204
            ]
        },
        "buggy_method_src": "private boolean canBeRedeclared(Node n, Scope s) {\n      if (!NodeUtil.isExprAssign(n)) {\n        return false;\n      }\n      Node assign = n.getFirstChild();\n      Node lhs = assign.getFirstChild();\n\n      if (!lhs.isName()) {\n        return false;\n      }\n\n      Var var = s.getVar(lhs.getString());\n      return var != null\n          && var.getScope() == s\n          && !blacklistedVars.contains(var);\n    }",
        "test_stack": "com.google.javascript.jscomp.CollapseVariableDeclarationsTest::testIssue820\njunit.framework.AssertionFailedError:\nExpected: function f(a){var b=1;a=2;var c}\nResult: function f(a){var b=1,a=2,c}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION f 1 [source_file: expected0]\n            NAME f 1 [source_file: expected0]\n            PARAM_LIST 1 [source_file: expected0]\n                NAME a 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME b 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    ASSIGN 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME c 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION f 1 [source_file: testcode]\n            NAME f 1 [source_file: testcode]\n            PARAM_LIST 1 [source_file: testcode]\n                NAME a 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]\n                    NAME b 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NAME c 1 [source_file: testcode]\n\n\nSubtree1: BLOCK 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME b 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME c 1 [source_file: expected0]\n\n\nSubtree2: BLOCK 1 [source_file: testcode]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]\n        NAME b 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n        NAME a 1 [source_file: testcode]\n            NUMBER 2.0 1 [source_file: testcode]\n        NAME c 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:560)\n\tat com.google.javascript.jscomp.CollapseVariableDeclarationsTest.testIssue820(CollapseVariableDeclarationsTest.java:48)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "testSame(\"function f(a){ var b=1; a=2; var c; }\");\n",
        "buggy_lines_in_method": [
            15
        ],
        "buggy_statements": [
            "          && !blacklistedVars.contains(var);"
        ],
        "buggy_method_src_endswith_buggy_statement": "private boolean canBeRedeclared(Node n, Scope s) {\n      if (!NodeUtil.isExprAssign(n)) {\n        return false;\n      }\n      Node assign = n.getFirstChild();\n      Node lhs = assign.getFirstChild();\n\n      if (!lhs.isName()) {\n        return false;\n      }\n\n      Var var = s.getVar(lhs.getString());\n      return var != null\n          && var.getScope() == s\n          && !blacklistedVars.contains(var);"
    },
    {
        "buggy_file": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "buggy_method": {
            "method_name": "applyCollapses",
            "method_body": "private void applyCollapses() {\n    for (Collapse collapse : collapses) {\n\n      Node var = new Node(Token.VAR);\n      var.copyInformationFrom(collapse.startNode);\n      collapse.parent.addChildBefore(var, collapse.startNode);\n\n      boolean redeclaration = false;\n      for (Node n = collapse.startNode; n != collapse.endNode;) {\n        Node next = n.getNext();\n\n        Preconditions.checkState(var.getNext() == n);\n        collapse.parent.removeChildAfter(var);\n\n        if (n.isVar()) {\n          while(n.hasChildren()) {\n            var.addChildToBack(n.removeFirstChild());\n          }\n        } else {\n          Node assign = n.getFirstChild();\n          Node lhs = assign.getFirstChild();\n          Preconditions.checkState(lhs.isName());\n          Node rhs = assign.getLastChild();\n          lhs.addChildToBack(rhs.detachFromParent());\n          var.addChildToBack(lhs.detachFromParent());\n          redeclaration = true;\n        }\n        n = next;\n      }\n\n      if (redeclaration) {\n        JSDocInfo info = new JSDocInfo();\n        info.addSuppression(\"duplicate\");\n        var.setJSDocInfo(info);\n      }\n    }\n  }",
            "start_line": 209,
            "end_line": 245,
            "buggy_lines": [
                211
            ]
        },
        "buggy_method_src": "private void applyCollapses() {\n    for (Collapse collapse : collapses) {\n\n      Node var = new Node(Token.VAR);\n      var.copyInformationFrom(collapse.startNode);\n      collapse.parent.addChildBefore(var, collapse.startNode);\n\n      boolean redeclaration = false;\n      for (Node n = collapse.startNode; n != collapse.endNode;) {\n        Node next = n.getNext();\n\n        Preconditions.checkState(var.getNext() == n);\n        collapse.parent.removeChildAfter(var);\n\n        if (n.isVar()) {\n          while(n.hasChildren()) {\n            var.addChildToBack(n.removeFirstChild());\n          }\n        } else {\n          Node assign = n.getFirstChild();\n          Node lhs = assign.getFirstChild();\n          Preconditions.checkState(lhs.isName());\n          Node rhs = assign.getLastChild();\n          lhs.addChildToBack(rhs.detachFromParent());\n          var.addChildToBack(lhs.detachFromParent());\n          redeclaration = true;\n        }\n        n = next;\n      }\n\n      if (redeclaration) {\n        JSDocInfo info = new JSDocInfo();\n        info.addSuppression(\"duplicate\");\n        var.setJSDocInfo(info);\n      }\n    }\n  }",
        "test_stack": "com.google.javascript.jscomp.CollapseVariableDeclarationsTest::testIssue820\njunit.framework.AssertionFailedError:\nExpected: function f(a){var b=1;a=2;var c}\nResult: function f(a){var b=1,a=2,c}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION f 1 [source_file: expected0]\n            NAME f 1 [source_file: expected0]\n            PARAM_LIST 1 [source_file: expected0]\n                NAME a 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME b 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    ASSIGN 1 [source_file: expected0]\n                        NAME a 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME c 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION f 1 [source_file: testcode]\n            NAME f 1 [source_file: testcode]\n            PARAM_LIST 1 [source_file: testcode]\n                NAME a 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]\n                    NAME b 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NAME c 1 [source_file: testcode]\n\n\nSubtree1: BLOCK 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME b 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n    EXPR_RESULT 1 [source_file: expected0]\n        ASSIGN 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n            NUMBER 2.0 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME c 1 [source_file: expected0]\n\n\nSubtree2: BLOCK 1 [source_file: testcode]\n    VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]\n        NAME b 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n        NAME a 1 [source_file: testcode]\n            NUMBER 2.0 1 [source_file: testcode]\n        NAME c 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:892)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:445)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:371)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:340)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:328)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:560)\n\tat com.google.javascript.jscomp.CollapseVariableDeclarationsTest.testIssue820(CollapseVariableDeclarationsTest.java:48)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n",
        "test_assert": "testSame(\"function f(a){ var b=1; a=2; var c; }\");\n",
        "buggy_lines_in_method": [
            3
        ],
        "buggy_statements": [
            ""
        ],
        "buggy_method_src_endswith_buggy_statement": "private void applyCollapses() {\n    for (Collapse collapse : collapses) {\n"
    }
]