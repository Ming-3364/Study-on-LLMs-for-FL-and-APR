
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'solve', 'method_body': 'public Object solve(){\n    int N = in.it();\n    long[][] P = in.lg(N,N);\n    long[][] R = in.lg(N,N -1);\n    long[][] D = in.lg(N -1,N);\n\n    long[][] dp = new long[N][N];\n    long[][] nokori = new long[N][N];\n    for (int i = 0;i < N;i++)\n      for (int j = 0;j < N;j++)\n        dp[i][j] = infL;\n    dp[0][0] = 0;\n    for (int i = 0;i < N;i++)\n      for (int j = 0;j < N;j++) {\n        long[][] sub = new long[N][N];\n        for (var ls:sub)\n          fill(ls,infL);\n        sub[i][j] = 0;\n        for (int ni = i;ni < N;ni++)\n          for (int nj = j;nj < N;nj++) {\n            if (ni == i && nj == j)\n              continue;\n            if (0 < ni)\n              sub[ni][nj] = min(sub[ni][nj],sub[ni -1][nj] +D[ni -1][nj]);\n            if (0 < nj)\n              sub[ni][nj] = min(sub[ni][nj],sub[ni][nj -1] +R[ni][nj -1]);\n\n            long ceil = ceil(max(0,sub[ni][nj] -nokori[i][j]),P[i][j]);\n            long tmp = dp[i][j] +ceil +ni -i +nj -j;\n            if (dp[ni][nj] > tmp) {\n              dp[ni][nj] = tmp;\n              nokori[ni][nj] = ceil *P[i][j] +nokori[i][j] -sub[ni][nj];\n            }\n          }\n      }\n    return dp[N -1][N -1];\n  }', 'start_line': 15, 'end_line': 51}
================== buggy_method_src ==================
public Object solve(){
    int N = in.it();
    long[][] P = in.lg(N,N);
    long[][] R = in.lg(N,N -1);
    long[][] D = in.lg(N -1,N);

    long[][] dp = new long[N][N];
    long[][] nokori = new long[N][N];
    for (int i = 0;i < N;i++)
      for (int j = 0;j < N;j++)
        dp[i][j] = infL;
    dp[0][0] = 0;
    for (int i = 0;i < N;i++)
      for (int j = 0;j < N;j++) {
        long[][] sub = new long[N][N];
        for (var ls:sub)
          fill(ls,infL);
        sub[i][j] = 0;
        for (int ni = i;ni < N;ni++)
          for (int nj = j;nj < N;nj++) {
            if (ni == i && nj == j)
              continue;
            if (0 < ni)
              sub[ni][nj] = min(sub[ni][nj],sub[ni -1][nj] +D[ni -1][nj]);
            if (0 < nj)
              sub[ni][nj] = min(sub[ni][nj],sub[ni][nj -1] +R[ni][nj -1]);

            long ceil = ceil(max(0,sub[ni][nj] -nokori[i][j]),P[i][j]);
            long tmp = dp[i][j] +ceil +ni -i +nj -j;
            if (dp[ni][nj] > tmp) {
              dp[ni][nj] = tmp;
              nokori[ni][nj] = ceil *P[i][j] +nokori[i][j] -sub[ni][nj];
            }
          }
      }
    return dp[N -1][N -1];
  }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[30]
================== buggy_statements ==================
['            if (dp[ni][nj] > tmp) {']
================== buggy_method_src_endswith_buggy_statement ==================
public Object solve(){
    int N = in.it();
    long[][] P = in.lg(N,N);
    long[][] R = in.lg(N,N -1);
    long[][] D = in.lg(N -1,N);

    long[][] dp = new long[N][N];
    long[][] nokori = new long[N][N];
    for (int i = 0;i < N;i++)
      for (int j = 0;j < N;j++)
        dp[i][j] = infL;
    dp[0][0] = 0;
    for (int i = 0;i < N;i++)
      for (int j = 0;j < N;j++) {
        long[][] sub = new long[N][N];
        for (var ls:sub)
          fill(ls,infL);
        sub[i][j] = 0;
        for (int ni = i;ni < N;ni++)
          for (int nj = j;nj < N;nj++) {
            if (ni == i && nj == j)
              continue;
            if (0 < ni)
              sub[ni][nj] = min(sub[ni][nj],sub[ni -1][nj] +D[ni -1][nj]);
            if (0 < nj)
              sub[ni][nj] = min(sub[ni][nj],sub[ni][nj -1] +R[ni][nj -1]);

            long ceil = ceil(max(0,sub[ni][nj] -nokori[i][j]),P[i][j]);
            long tmp = dp[i][j] +ceil +ni -i +nj -j;
            if (dp[ni][nj] > tmp) {