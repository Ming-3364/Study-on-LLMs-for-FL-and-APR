
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'dfs', 'method_body': 'static int dfs(String[][] arr,int n,int m,int i,int j){\n        if(j == m){\n            return 0;\n        }\n        if(i == n){\n            return inf;\n        }\n        if(dp[i][j] != -1){\n            return dp[i][j];\n        }\n        //不选\n        int ans = dfs(arr,n,m,i+1,j);\n        //选\n        String[] cur = arr[i];\n        int len = cur.length;\n        for (int k = 1; k < len; k++) {\n            String str = cur[k];\n            int length = str.length();\n            if(m - j >= length && check(length,j,str)){\n                ans = Math.min(ans,dfs(arr,n,m,i,j+length) + 1);\n            }\n        }\n        dp[i][j] = ans;\n        return ans;\n    }\n    s', 'start_line': 8, 'end_line': 32}
================== buggy_method_src ==================
static int dfs(String[][] arr,int n,int m,int i,int j){
        if(j == m){
            return 0;
        }
        if(i == n){
            return inf;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        //不选
        int ans = dfs(arr,n,m,i+1,j);
        //选
        String[] cur = arr[i];
        int len = cur.length;
        for (int k = 1; k < len; k++) {
            String str = cur[k];
            int length = str.length();
            if(m - j >= length && check(length,j,str)){
                ans = Math.min(ans,dfs(arr,n,m,i,j+length) + 1);
            }
        }
        dp[i][j] = ans;
        return ans;
    }
    s
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[20]
================== buggy_statements ==================
['                ans = Math.min(ans,dfs(arr,n,m,i,j+length) + 1);']
================== buggy_method_src_endswith_buggy_statement ==================
static int dfs(String[][] arr,int n,int m,int i,int j){
        if(j == m){
            return 0;
        }
        if(i == n){
            return inf;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        //不选
        int ans = dfs(arr,n,m,i+1,j);
        //选
        String[] cur = arr[i];
        int len = cur.length;
        for (int k = 1; k < len; k++) {
            String str = cur[k];
            int length = str.length();
            if(m - j >= length && check(length,j,str)){
                ans = Math.min(ans,dfs(arr,n,m,i,j+length) + 1);