[
    {
        "buggy_file": "faultyVersion.java",
        "buggy_method": {
            "method_name": "main",
            "method_body": "s) {\n\t\tvar sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tp = new int[n + 10];\n\t\tfor(int i = 1; i <= n; i ++ ) {\n\t\t\tp[i] = i; // \u521a\u5f00\u59cb\u7684\u7956\u5b97 \u90fd\u662f\u81ea\u5df1\u81ea\u5df1\n\t\t}\n\t\tlong ret = 0;\n\t\tint mm = m;\n\t\t\n\t\tvar mp = new HashMap<Integer, Long>();\n\t\tvar se = new TreeSet<Integer>();\n\t\twhile(m -- != 0 ) {\n\t\t\tint x = sc.nextInt();\n\t\t\tint y = sc.nextInt();\n\t\t\t// \u8fd9\u91cc\u7406\u89e3\u4e3ay\u52a0\u5230x\u7684\u8282\u70b9\u4e0b\u9762\n\t\t\tp[find(y)] = find(x); // \u8be5\u4e0d\u4f1a\u662f\u8fd9\u91cc\u51fa\u95ee\u9898\u4e86\u5427\n\t\t}\n\t\t\n\t\tfor(int i = 1; i <= n; i ++ ) {\n\t\t\tint x = p[i];\n\t\t\tif(!mp.containsKey(x)) {\n\t\t\t\tmp.put(x, 0l);\n\t\t\t}\n\t\t\tlong t = mp.get(x) + 1;\n\t\t\tmp.put(x, t);\n\t\t\tse.add(x); // \u8fd9\u91cc\u9762\u5b58\u7684\u662f \u90fd\u662f\u7956\u5b97\n\t\t}\n\t\tfor(int i : se) {\n\t\t\t//System.out.print(\"i = \" + i + \"\\n\");\n\t\t\t//System.out.print(\"x = \" + mp.get(i) + \"\\n\");\n\t\t\tlong tt = mp.get(i);\n\t\t\tlong t2 = mp.get(i) - 1;\n\t\t\t\n\t\t\tret += tt * t2 / 2;\n\t\t\t//System.out.print(\"ret = \" + ret + \"\\n\");\n\t\t}\n\t\tret -= mm;\n\t\tSystem.out.print(ret);\n\t\t\n\t\t\n\t}\n\tpublic static int find(int x) {\n\t\tif(x != p[x])p[x] = find(p[x]);\n\t\treturn p[x];\n\t}\n}\n",
            "start_line": 7,
            "end_line": 49
        },
        "buggy_method_src": "s) {\n\t\tvar sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tp = new int[n + 10];\n\t\tfor(int i = 1; i <= n; i ++ ) {\n\t\t\tp[i] = i; // \u521a\u5f00\u59cb\u7684\u7956\u5b97 \u90fd\u662f\u81ea\u5df1\u81ea\u5df1\n\t\t}\n\t\tlong ret = 0;\n\t\tint mm = m;\n\t\t\n\t\tvar mp = new HashMap<Integer, Long>();\n\t\tvar se = new TreeSet<Integer>();\n\t\twhile(m -- != 0 ) {\n\t\t\tint x = sc.nextInt();\n\t\t\tint y = sc.nextInt();\n\t\t\t// \u8fd9\u91cc\u7406\u89e3\u4e3ay\u52a0\u5230x\u7684\u8282\u70b9\u4e0b\u9762\n\t\t\tp[find(y)] = find(x); // \u8be5\u4e0d\u4f1a\u662f\u8fd9\u91cc\u51fa\u95ee\u9898\u4e86\u5427\n\t\t}\n\t\t\n\t\tfor(int i = 1; i <= n; i ++ ) {\n\t\t\tint x = p[i];\n\t\t\tif(!mp.containsKey(x)) {\n\t\t\t\tmp.put(x, 0l);\n\t\t\t}\n\t\t\tlong t = mp.get(x) + 1;\n\t\t\tmp.put(x, t);\n\t\t\tse.add(x); // \u8fd9\u91cc\u9762\u5b58\u7684\u662f \u90fd\u662f\u7956\u5b97\n\t\t}\n\t\tfor(int i : se) {\n\t\t\t//System.out.print(\"i = \" + i + \"\\n\");\n\t\t\t//System.out.print(\"x = \" + mp.get(i) + \"\\n\");\n\t\t\tlong tt = mp.get(i);\n\t\t\tlong t2 = mp.get(i) - 1;\n\t\t\t\n\t\t\tret += tt * t2 / 2;\n\t\t\t//System.out.print(\"ret = \" + ret + \"\\n\");\n\t\t}\n\t\tret -= mm;\n\t\tSystem.out.print(ret);\n\t\t\n\t\t\n\t}\n\tpublic static int find(int x) {\n\t\tif(x != p[x])p[x] = find(p[x]);\n\t\treturn p[x];\n\t}\n}\n",
        "test_stack": "None",
        "test_assert": "None",
        "buggy_lines_in_method": [
            22
        ],
        "buggy_statements": [
            "\t\t\tint x = p[i];"
        ],
        "buggy_method_src_endswith_buggy_statement": "s) {\n\t\tvar sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tp = new int[n + 10];\n\t\tfor(int i = 1; i <= n; i ++ ) {\n\t\t\tp[i] = i; // \u521a\u5f00\u59cb\u7684\u7956\u5b97 \u90fd\u662f\u81ea\u5df1\u81ea\u5df1\n\t\t}\n\t\tlong ret = 0;\n\t\tint mm = m;\n\t\t\n\t\tvar mp = new HashMap<Integer, Long>();\n\t\tvar se = new TreeSet<Integer>();\n\t\twhile(m -- != 0 ) {\n\t\t\tint x = sc.nextInt();\n\t\t\tint y = sc.nextInt();\n\t\t\t// \u8fd9\u91cc\u7406\u89e3\u4e3ay\u52a0\u5230x\u7684\u8282\u70b9\u4e0b\u9762\n\t\t\tp[find(y)] = find(x); // \u8be5\u4e0d\u4f1a\u662f\u8fd9\u91cc\u51fa\u95ee\u9898\u4e86\u5427\n\t\t}\n\t\t\n\t\tfor(int i = 1; i <= n; i ++ ) {\n\t\t\tint x = p[i];"
    }
]