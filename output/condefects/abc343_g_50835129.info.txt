
================== buggy_file ==================
faultyVersion.java
================== buggy_method ==================
{'method_name': 'solve', 'method_body': 'public Object solve(){\n    int N = in.it();\n    String[] SS = in.str(N);\n\n    a:for (int i = 0;i < N;i++)\n      for (int j = 0;j < N;j++) {\n        if (i == j)\n          continue;\n        if (SS[i].contains(SS[j])) {\n          SS[j] = SS[N -1];\n          N--;\n          i--;\n          continue a;\n        }\n      }\n\n    char[][] S = new char[N][];\n    for (int i = 0;i < N;i++)\n      S[i] = SS[i].toCharArray();\n    RollingHash[] rhs = new RollingHash[N];\n    for (int i = 0;i < N;i++)\n      rhs[i] = new RollingHash(S[i],false);\n    int[][] E = new int[N][N];\n    for (int i = 0;i < N;i++)\n      for (int j = 0;j < N;j++)\n        for (int l = 1;l <= min(S[i].length,S[j].length);l++)\n          if (rhs[i].get(S[i].length -l,S[i].length) == rhs[j].get(0,l))\n            E[i][j] = l;\n\n    long[][] dp = new long[1 <<N][N];\n\n    for (int bit = 0;bit < 1 <<N;bit++)\n      for (int i = 0;i < N;i++)\n        for (int j = 0;j < N;j++) {\n          if ((bit >>i &1) == 0 || (bit >>j &1) == 1)\n            continue;\n          dp[bit |1 <<j][j] = max(dp[bit |1 <<j][j],dp[bit][i] +E[i][j]);\n        }\n    long sum = 0;\n    for (var s:S)\n      sum += s.length;\n\n    long ans = infL;\n    for (int i = 0;i < N;i++)\n      ans = min(ans,sum -dp[(1 <<N) -1][i]);\n    return ans;\n  }', 'start_line': 15, 'end_line': 61}
================== buggy_method_src ==================
public Object solve(){
    int N = in.it();
    String[] SS = in.str(N);

    a:for (int i = 0;i < N;i++)
      for (int j = 0;j < N;j++) {
        if (i == j)
          continue;
        if (SS[i].contains(SS[j])) {
          SS[j] = SS[N -1];
          N--;
          i--;
          continue a;
        }
      }

    char[][] S = new char[N][];
    for (int i = 0;i < N;i++)
      S[i] = SS[i].toCharArray();
    RollingHash[] rhs = new RollingHash[N];
    for (int i = 0;i < N;i++)
      rhs[i] = new RollingHash(S[i],false);
    int[][] E = new int[N][N];
    for (int i = 0;i < N;i++)
      for (int j = 0;j < N;j++)
        for (int l = 1;l <= min(S[i].length,S[j].length);l++)
          if (rhs[i].get(S[i].length -l,S[i].length) == rhs[j].get(0,l))
            E[i][j] = l;

    long[][] dp = new long[1 <<N][N];

    for (int bit = 0;bit < 1 <<N;bit++)
      for (int i = 0;i < N;i++)
        for (int j = 0;j < N;j++) {
          if ((bit >>i &1) == 0 || (bit >>j &1) == 1)
            continue;
          dp[bit |1 <<j][j] = max(dp[bit |1 <<j][j],dp[bit][i] +E[i][j]);
        }
    long sum = 0;
    for (var s:S)
      sum += s.length;

    long ans = infL;
    for (int i = 0;i < N;i++)
      ans = min(ans,sum -dp[(1 <<N) -1][i]);
    return ans;
  }
================== test_stack ==================
None
================== test_assert ==================
None
================== buggy_lines_in_method ==================
[12]
================== buggy_statements ==================
['          i--;']
================== buggy_method_src_endswith_buggy_statement ==================
public Object solve(){
    int N = in.it();
    String[] SS = in.str(N);

    a:for (int i = 0;i < N;i++)
      for (int j = 0;j < N;j++) {
        if (i == j)
          continue;
        if (SS[i].contains(SS[j])) {
          SS[j] = SS[N -1];
          N--;
          i--;